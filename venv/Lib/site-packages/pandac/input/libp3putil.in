1608630870
3 3
10 libp3putil 4 xqRv 12 panda3d.core 
950
963 5 clear 0 4 1915 56 PointerToBase< ReferenceCountedVector< ushort > >::clear 0 1 14 0
75
inline void PointerToBase< ReferenceCountedVector< ushort > >::clear(void);

964 6 output 0 4 1915 57 PointerToBase< ReferenceCountedVector< ushort > >::output 0 1 15 0
88
void PointerToBase< ReferenceCountedVector< ushort > >::output(std::ostream &out) const;

965 19 ~PointerToArrayBase 0 4 1914 49 PointerToArrayBase< ushort >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< ushort >::~PointerToArrayBase(void);

966 19 ConstPointerToArray 0 4 1913 50 ConstPointerToArray< ushort >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< ushort >::ConstPointerToArray(PointerToArray< ushort > const &copy);
inline ConstPointerToArray< ushort >::ConstPointerToArray(ConstPointerToArray< ushort > const &copy);

967 5 clear 0 4 1913 36 ConstPointerToArray< ushort >::clear 0 1 3 0
55
inline void ConstPointerToArray< ushort >::clear(void);

968 4 size 0 4 1913 35 ConstPointerToArray< ushort >::size 0 1 4 0
78
inline unsigned long long int ConstPointerToArray< ushort >::size(void) const;

969 11 get_element 0 4 1913 42 ConstPointerToArray< ushort >::get_element 0 1 5 0
96
inline ushort const &ConstPointerToArray< ushort >::get_element(unsigned long long int n) const;

970 11 __getitem__ 0 4 1913 42 ConstPointerToArray< ushort >::__getitem__ 0 1 6 0
89
ushort const &ConstPointerToArray< ushort >::__getitem__(unsigned long long int n) const;

971 8 get_data 0 4 1913 39 ConstPointerToArray< ushort >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< ushort >::get_data(void) const;

972 11 get_subdata 0 4 1913 42 ConstPointerToArray< ushort >::get_subdata 0 1 8 0
115
PyObject *ConstPointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

973 13 get_ref_count 0 4 1913 44 ConstPointerToArray< ushort >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< ushort >::get_ref_count(void) const;

974 18 get_node_ref_count 0 4 1913 49 ConstPointerToArray< ushort >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< ushort >::get_node_ref_count(void) const;

975 5 count 0 4 1913 36 ConstPointerToArray< ushort >::count 0 1 11 0
89
inline unsigned long long int ConstPointerToArray< ushort >::count(ushort const &) const;

976 13 __getbuffer__ 0 4 1913 44 ConstPointerToArray< ushort >::__getbuffer__ 0 1 12 0
99
int ConstPointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

977 17 __releasebuffer__ 0 4 1913 48 ConstPointerToArray< ushort >::__releasebuffer__ 0 1 13 0
93
void ConstPointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

978 20 ~ConstPointerToArray 0 4 1913 51 ConstPointerToArray< ushort >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< ushort >::~ConstPointerToArray(void);

979 14 PointerToArray 0 4 1917 40 PointerToArray< ushort >::PointerToArray 0 3 16 17 18 0
279
inline PointerToArray< ushort >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));
inline PointerToArray< ushort >::PointerToArray(PointerToArray< ushort > const &copy);
PointerToArray< ushort >::PointerToArray(PyObject *self, PyObject *source);

980 11 empty_array 0 4 1917 37 PointerToArray< ushort >::empty_array 0 1 19 0
171
static inline PointerToArray< ushort > PointerToArray< ushort >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));

981 5 clear 0 4 1917 31 PointerToArray< ushort >::clear 0 1 20 0
50
inline void PointerToArray< ushort >::clear(void);

982 4 size 0 4 1917 30 PointerToArray< ushort >::size 0 1 21 0
73
inline unsigned long long int PointerToArray< ushort >::size(void) const;

983 9 push_back 0 4 1917 35 PointerToArray< ushort >::push_back 0 1 22 0
65
inline void PointerToArray< ushort >::push_back(ushort const &x);

984 8 pop_back 0 4 1917 34 PointerToArray< ushort >::pop_back 0 1 23 0
53
inline void PointerToArray< ushort >::pop_back(void);

985 11 get_element 0 4 1917 37 PointerToArray< ushort >::get_element 0 1 24 0
91
inline ushort const &PointerToArray< ushort >::get_element(unsigned long long int n) const;

986 11 set_element 0 4 1917 37 PointerToArray< ushort >::set_element 0 1 25 0
97
inline void PointerToArray< ushort >::set_element(unsigned long long int n, ushort const &value);

987 11 __getitem__ 0 4 1917 37 PointerToArray< ushort >::__getitem__ 0 1 26 0
84
ushort const &PointerToArray< ushort >::__getitem__(unsigned long long int n) const;

988 11 __setitem__ 0 4 1917 37 PointerToArray< ushort >::__setitem__ 0 1 27 0
90
void PointerToArray< ushort >::__setitem__(unsigned long long int n, ushort const &value);

989 8 get_data 0 4 1917 34 PointerToArray< ushort >::get_data 0 1 28 0
57
PyObject *PointerToArray< ushort >::get_data(void) const;

990 8 set_data 0 4 1917 34 PointerToArray< ushort >::set_data 0 1 29 0
56
void PointerToArray< ushort >::set_data(PyObject *data);

991 11 get_subdata 0 4 1917 37 PointerToArray< ushort >::get_subdata 0 1 30 0
110
PyObject *PointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

992 11 set_subdata 0 4 1917 37 PointerToArray< ushort >::set_subdata 0 1 31 0
145
inline void PointerToArray< ushort >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

993 13 get_ref_count 0 4 1917 39 PointerToArray< ushort >::get_ref_count 0 1 32 0
63
inline int PointerToArray< ushort >::get_ref_count(void) const;

994 18 get_node_ref_count 0 4 1917 44 PointerToArray< ushort >::get_node_ref_count 0 1 33 0
68
inline int PointerToArray< ushort >::get_node_ref_count(void) const;

995 5 count 0 4 1917 31 PointerToArray< ushort >::count 0 1 34 0
84
inline unsigned long long int PointerToArray< ushort >::count(ushort const &) const;

996 13 __getbuffer__ 0 4 1917 39 PointerToArray< ushort >::__getbuffer__ 0 1 35 0
88
int PointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

997 17 __releasebuffer__ 0 4 1917 43 PointerToArray< ushort >::__releasebuffer__ 0 1 36 0
88
void PointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

998 15 ~PointerToArray 0 4 1917 41 PointerToArray< ushort >::~PointerToArray 0 0 0
48
PointerToArray< ushort >::~PointerToArray(void);

999 14 ~AnimInterface 0 6 1918 29 AnimInterface::~AnimInterface 0 0 10
/**
 *
 */
44
virtual AnimInterface::~AnimInterface(void);

1000 4 play 0 4 1918 19 AnimInterface::play 0 2 37 38 477
/**
 * Runs the entire animation from beginning to end and stops.
 */

/**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

1001 4 loop 0 4 1918 19 AnimInterface::loop 0 2 39 40 392
/**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

1002 8 pingpong 0 4 1918 23 AnimInterface::pingpong 0 2 41 42 369
/**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

1003 4 stop 0 4 1918 19 AnimInterface::stop 0 1 43 130
/**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */
38
inline void AnimInterface::stop(void);

1004 4 pose 0 4 1918 19 AnimInterface::pose 0 1 44 72
/**
 * Sets the animation to the indicated frame and holds it there.
 */
46
inline void AnimInterface::pose(double frame);

1005 13 set_play_rate 0 4 1918 28 AnimInterface::set_play_rate 0 1 45 243
/**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */
59
inline void AnimInterface::set_play_rate(double play_rate);

1006 13 get_play_rate 0 4 1918 28 AnimInterface::get_play_rate 0 1 46 79
/**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */
55
inline double AnimInterface::get_play_rate(void) const;

1007 14 get_frame_rate 0 4 1918 29 AnimInterface::get_frame_rate 0 1 47 234
/**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */
56
inline double AnimInterface::get_frame_rate(void) const;

1008 14 get_num_frames 0 6 1918 29 AnimInterface::get_num_frames 0 1 48 278
/**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */
54
virtual int AnimInterface::get_num_frames(void) const;

1009 9 get_frame 0 4 1918 24 AnimInterface::get_frame 0 1 49 116
/**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */
48
inline int AnimInterface::get_frame(void) const;

1010 14 get_next_frame 0 4 1918 29 AnimInterface::get_next_frame 0 1 50 330
/**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */
53
inline int AnimInterface::get_next_frame(void) const;

1011 8 get_frac 0 4 1918 23 AnimInterface::get_frac 0 1 51 314
/**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */
50
inline double AnimInterface::get_frac(void) const;

1012 14 get_full_frame 0 4 1918 29 AnimInterface::get_full_frame 0 1 52 372
/**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */
53
inline int AnimInterface::get_full_frame(void) const;

1013 15 get_full_fframe 0 4 1918 30 AnimInterface::get_full_fframe 0 1 53 490
/**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */
57
inline double AnimInterface::get_full_fframe(void) const;

1014 10 is_playing 0 4 1918 25 AnimInterface::is_playing 0 1 54 208
/**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */
50
inline bool AnimInterface::is_playing(void) const;

1015 6 output 0 6 1918 21 AnimInterface::output 0 1 55 10
/**
 *
 */
60
virtual void AnimInterface::output(std::ostream &out) const;

1016 14 get_class_type 0 4 1918 29 AnimInterface::get_class_type 0 1 56 0
54
static TypeHandle AnimInterface::get_class_type(void);

1017 9 UpdateSeq 0 4 1923 20 UpdateSeq::UpdateSeq 0 2 57 58 132
/**
 * Creates an UpdateSeq in the given state.
 */

/**
 * Creates an UpdateSeq in the 'initial' state.
 */

/**
 *
 */

/**
 *
 */
89
constexpr UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

1018 7 initial 0 4 1923 18 UpdateSeq::initial 0 1 59 0
52
static constexpr UpdateSeq UpdateSeq::initial(void);

1019 3 old 0 4 1923 14 UpdateSeq::old 0 1 60 0
48
static constexpr UpdateSeq UpdateSeq::old(void);

1020 5 fresh 0 4 1923 16 UpdateSeq::fresh 0 1 61 0
50
static constexpr UpdateSeq UpdateSeq::fresh(void);

1021 10 operator = 0 4 1923 21 UpdateSeq::operator = 0 1 62 10
/**
 *
 */
57
inline void UpdateSeq::operator =(UpdateSeq const &copy);

1022 5 clear 0 4 1923 16 UpdateSeq::clear 0 1 63 55
/**
 * Resets the UpdateSeq to the 'initial' state.
 */
35
inline void UpdateSeq::clear(void);

1023 10 is_initial 0 4 1923 21 UpdateSeq::is_initial 0 1 64 67
/**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */
46
inline bool UpdateSeq::is_initial(void) const;

1024 6 is_old 0 4 1923 17 UpdateSeq::is_old 0 1 65 63
/**
 * Returns true if the UpdateSeq is in the 'old' state.
 */
42
inline bool UpdateSeq::is_old(void) const;

1025 8 is_fresh 0 4 1923 19 UpdateSeq::is_fresh 0 1 66 65
/**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */
44
inline bool UpdateSeq::is_fresh(void) const;

1026 10 is_special 0 4 1923 21 UpdateSeq::is_special 0 1 67 105
/**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */
46
inline bool UpdateSeq::is_special(void) const;

1027 11 operator == 0 4 1923 22 UpdateSeq::operator == 0 1 68 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

1028 11 operator != 0 4 1923 22 UpdateSeq::operator != 0 1 69 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

1029 10 operator < 0 4 1923 21 UpdateSeq::operator < 0 1 70 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

1030 11 operator <= 0 4 1923 22 UpdateSeq::operator <= 0 1 71 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

1031 10 operator > 0 4 1923 21 UpdateSeq::operator > 0 1 72 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

1032 11 operator >= 0 4 1923 22 UpdateSeq::operator >= 0 1 73 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

1033 11 operator ++ 0 68 1923 22 UpdateSeq::operator ++ 0 1 74 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

1034 11 operator ++ 0 4 1923 22 UpdateSeq::operator ++ 0 1 75 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

1035 7 get_seq 0 4 1923 18 UpdateSeq::get_seq 0 1 76 107
/**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */
60
inline AtomicAdjust::Integer UpdateSeq::get_seq(void) const;

1036 6 output 0 4 1923 17 UpdateSeq::output 0 1 77 10
/**
 *
 */
55
inline void UpdateSeq::output(std::ostream &out) const;

1037 10 ~UpdateSeq 0 4 1923 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

1038 6 fillin 0 6 1927 21 TypedWritable::fillin 0 1 78 308
/**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */
79
virtual void TypedWritable::fillin(DatagramIterator &scan, BamReader *manager);

1039 17 mark_bam_modified 0 4 1927 32 TypedWritable::mark_bam_modified 0 1 79 345
/**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */
51
inline void TypedWritable::mark_bam_modified(void);

1040 16 get_bam_modified 0 4 1927 31 TypedWritable::get_bam_modified 0 1 80 140
/**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

1041 10 __reduce__ 0 4 1927 25 TypedWritable::__reduce__ 0 1 81 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

1042 18 __reduce_persist__ 0 4 1927 33 TypedWritable::__reduce_persist__ 0 1 82 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

1043 20 encode_to_bam_stream 0 4 1927 35 TypedWritable::encode_to_bam_stream 0 2 83 84 854
/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a bytes object.  Returns an empty bytes
 * object on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */

/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */
165
inline vector_uchar TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(vector_uchar &data, BamWriter *writer = nullptr) const;

1044 26 decode_raw_from_bam_stream 0 4 1927 41 TypedWritable::decode_raw_from_bam_stream 0 0 953
/**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts the single object on those bytes.  Returns true on success, false
 * on error.
 *
 * This variant sets the TypedWritable and ReferenceCount pointers separately;
 * both are pointers to the same object.  The reference count is not
 * incremented; it is the caller's responsibility to manage the reference
 * count.
 *
 * Note that this method cannot be used to retrieve objects that do not
 * inherit from ReferenceCount, because these objects cannot persist beyond
 * the lifetime of the BamReader that reads them.  To retrieve these objects
 * from a bam stream, you must construct a BamReader directly.
 *
 * If you happen to know that the particular object in question inherits from
 * TypedWritableReferenceCount or PandaNode, consider calling the variant of
 * decode_from_bam_stream() defined for those methods, which presents a
 * simpler interface.
 */
149
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, vector_uchar data, BamReader *reader = nullptr);

1045 14 get_class_type 0 4 1927 29 TypedWritable::get_class_type 0 1 85 0
54
static TypeHandle TypedWritable::get_class_type(void);

1046 23 upcast_to_TypedWritable 0 12 1929 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 88 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

1047 39 downcast_to_TypedWritableReferenceCount 0 12 1927 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 0 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

1048 24 upcast_to_ReferenceCount 0 12 1929 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 89 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

1049 39 downcast_to_TypedWritableReferenceCount 0 12 1930 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 0 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1050 22 decode_from_bam_stream 0 4 1929 51 TypedWritableReferenceCount::decode_from_bam_stream 0 1 86 491
/**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on those bytes.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */
148
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(vector_uchar data, BamReader *reader = nullptr);

1051 14 get_class_type 0 4 1929 43 TypedWritableReferenceCount::get_class_type 0 1 87 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1052 28 ~TypedWritableReferenceCount 0 4 1929 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1053 37 upcast_to_TypedWritableReferenceCount 0 12 1931 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 112 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1054 26 downcast_to_BamCacheRecord 0 12 1929 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 0 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1055 24 upcast_to_LinkedListNode 0 12 1931 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1056 26 downcast_to_BamCacheRecord 0 12 1932 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1057 15 ~BamCacheRecord 0 6 1931 31 BamCacheRecord::~BamCacheRecord 0 0 10
/**
 *
 */
46
virtual BamCacheRecord::~BamCacheRecord(void);

1058 9 make_copy 0 4 1931 25 BamCacheRecord::make_copy 0 1 90 179
/**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1059 11 operator == 0 4 1931 27 BamCacheRecord::operator == 0 1 91 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1060 19 get_source_pathname 0 4 1931 35 BamCacheRecord::get_source_pathname 0 1 92 237
/**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1061 18 get_cache_filename 0 4 1931 34 BamCacheRecord::get_cache_filename 0 1 93 230
/**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1062 20 get_source_timestamp 0 4 1931 36 BamCacheRecord::get_source_timestamp 0 1 94 204
/**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */
63
inline time_t BamCacheRecord::get_source_timestamp(void) const;

1063 17 get_recorded_time 0 4 1931 33 BamCacheRecord::get_recorded_time 0 1 95 84
/**
 * Returns the time at which this particular record was recorded or updated.
 */
60
inline time_t BamCacheRecord::get_recorded_time(void) const;

1064 23 get_num_dependent_files 0 4 1931 39 BamCacheRecord::get_num_dependent_files 0 1 96 75
/**
 * Returns the number of source files that contribute to the cache.
 */
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1065 22 get_dependent_pathname 0 4 1931 38 BamCacheRecord::get_dependent_pathname 0 1 97 94
/**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1066 20 dependents_unchanged 0 4 1931 36 BamCacheRecord::dependents_unchanged 0 1 98 124
/**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */
54
bool BamCacheRecord::dependents_unchanged(void) const;

1067 21 clear_dependent_files 0 4 1931 37 BamCacheRecord::clear_dependent_files 0 1 99 80
/**
 * Empties the list of files that contribute to the data in this record.
 */
49
void BamCacheRecord::clear_dependent_files(void);

1068 18 add_dependent_file 0 4 1931 34 BamCacheRecord::add_dependent_file 0 2 100 101 309
/**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */

/**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */
132
void BamCacheRecord::add_dependent_file(Filename const &pathname);
void BamCacheRecord::add_dependent_file(VirtualFile const *file);

1069 8 has_data 0 4 1931 24 BamCacheRecord::has_data 0 1 102 130
/**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */
49
inline bool BamCacheRecord::has_data(void) const;

1070 10 clear_data 0 4 1931 26 BamCacheRecord::clear_data 0 1 103 147
/**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */
45
inline void BamCacheRecord::clear_data(void);

1071 8 get_data 0 4 1931 24 BamCacheRecord::get_data 0 1 104 139
/**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1072 12 extract_data 0 4 1931 28 BamCacheRecord::extract_data 0 0 416
/**
 * Fills ptr and ref_ptr with the two different-typed pointers to the same
 * object, the data stored within this record.  This transfers ownership of
 * the data pointer; the caller will be responsible for managing the reference
 * counts on this object subsequently.
 *
 * Returns true if the record contained any data (and the pointers have been
 * filled), false if it didn't (and the pointers are NULL).
 */
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1073 8 set_data 0 4 1931 24 BamCacheRecord::set_data 0 4 105 106 107 108 916
/**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */

/**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */
281
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr);
inline void BamCacheRecord::set_data(TypedWritableReferenceCount *ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1074 6 output 0 4 1931 22 BamCacheRecord::output 0 1 109 10
/**
 *
 */
53
void BamCacheRecord::output(std::ostream &out) const;

1075 5 write 0 4 1931 21 BamCacheRecord::write 0 1 110 10
/**
 *
 */
74
void BamCacheRecord::write(std::ostream &out, int indent_level = 0) const;

1076 14 get_class_type 0 4 1931 30 BamCacheRecord::get_class_type 0 1 111 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1077 8 BamCache 0 4 1937 18 BamCache::BamCache 0 1 113 10
/**
 *
 */
25
BamCache::BamCache(void);

1078 9 ~BamCache 0 4 1937 19 BamCache::~BamCache 0 0 10
/**
 *
 */
26
BamCache::~BamCache(void);

1079 10 set_active 0 4 1937 20 BamCache::set_active 0 1 114 347
/**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
44
inline void BamCache::set_active(bool flag);

1080 10 get_active 0 4 1937 20 BamCache::get_active 0 1 115 381
/**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
45
inline bool BamCache::get_active(void) const;

1081 16 set_cache_models 0 4 1937 26 BamCache::set_cache_models 0 1 116 118
/**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */
50
inline void BamCache::set_cache_models(bool flag);

1082 16 get_cache_models 0 4 1937 26 BamCache::get_cache_models 0 1 117 172
/**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */
51
inline bool BamCache::get_cache_models(void) const;

1083 18 set_cache_textures 0 4 1937 28 BamCache::set_cache_textures 0 1 118 101
/**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */
52
inline void BamCache::set_cache_textures(bool flag);

1084 18 get_cache_textures 0 4 1937 28 BamCache::get_cache_textures 0 1 119 174
/**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */
53
inline bool BamCache::get_cache_textures(void) const;

1085 29 set_cache_compressed_textures 0 4 1937 39 BamCache::set_cache_compressed_textures 0 1 120 722
/**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1086 29 get_cache_compressed_textures 0 4 1937 39 BamCache::get_cache_compressed_textures 0 1 121 202
/**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1087 26 set_cache_compiled_shaders 0 4 1937 36 BamCache::set_cache_compiled_shaders 0 1 122 184
/**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */
60
inline void BamCache::set_cache_compiled_shaders(bool flag);

1088 26 get_cache_compiled_shaders 0 4 1937 36 BamCache::get_cache_compiled_shaders 0 1 123 196
/**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */
61
inline bool BamCache::get_cache_compiled_shaders(void) const;

1089 8 set_root 0 4 1937 18 BamCache::set_root 0 1 124 372
/**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */
46
void BamCache::set_root(Filename const &root);

1090 8 get_root 0 4 1937 18 BamCache::get_root 0 1 125 75
/**
 * Returns the current root pathname of the cache.  See set_root().
 */
47
inline Filename BamCache::get_root(void) const;

1091 14 set_flush_time 0 4 1937 24 BamCache::set_flush_time 0 1 126 86
/**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */
53
inline void BamCache::set_flush_time(int flush_time);

1092 14 get_flush_time 0 4 1937 24 BamCache::get_flush_time 0 1 127 84
/**
 * Returns the time in seconds between automatic flushes of the cache index.
 */
48
inline int BamCache::get_flush_time(void) const;

1093 20 set_cache_max_kbytes 0 4 1937 30 BamCache::set_cache_max_kbytes 0 1 128 430
/**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1094 20 get_cache_max_kbytes 0 4 1937 30 BamCache::get_cache_max_kbytes 0 1 129 121
/**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */
54
inline int BamCache::get_cache_max_kbytes(void) const;

1095 13 set_read_only 0 4 1937 23 BamCache::set_read_only 0 1 130 252
/**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */
45
inline void BamCache::set_read_only(bool ro);

1096 13 get_read_only 0 4 1937 23 BamCache::get_read_only 0 1 131 230
/**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */
48
inline bool BamCache::get_read_only(void) const;

1097 6 lookup 0 4 1937 16 BamCache::lookup 0 1 132 782
/**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */
114
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, std::string const &cache_extension);

1098 5 store 0 4 1937 15 BamCache::store 0 1 133 212
/**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */
45
bool BamCache::store(BamCacheRecord *record);

1099 20 consider_flush_index 0 4 1937 30 BamCache::consider_flush_index 0 1 134 92
/**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */
42
void BamCache::consider_flush_index(void);

1100 11 flush_index 0 4 1937 21 BamCache::flush_index 0 1 135 48
/**
 * Ensures the index is written to disk.
 */
33
void BamCache::flush_index(void);

1101 10 list_index 0 4 1937 20 BamCache::list_index 0 1 136 63
/**
 * Writes the contents of the index to standard output.
 */
73
void BamCache::list_index(std::ostream &out, int indent_level = 0) const;

1102 14 get_global_ptr 0 4 1937 24 BamCache::get_global_ptr 0 1 137 124
/**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */
55
static inline BamCache *BamCache::get_global_ptr(void);

1103 27 consider_flush_global_index 0 4 1937 37 BamCache::consider_flush_global_index 0 1 138 84
/**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */
63
static inline void BamCache::consider_flush_global_index(void);

1104 18 flush_global_index 0 4 1937 28 BamCache::flush_global_index 0 1 139 75
/**
 * If there is a global BamCache object, calls flush_index() on it.
 */
54
static inline void BamCache::flush_global_index(void);

1105 8 BamEnums 0 4 1938 18 BamEnums::BamEnums 0 2 140 141 0
97
inline BamEnums::BamEnums(void) = default;
inline BamEnums::BamEnums(BamEnums const &) = default;

1106 9 ~BamEnums 0 4 1938 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1107 13 LoaderOptions 0 4 1942 28 LoaderOptions::LoaderOptions 0 3 142 143 144 22
/**
 *
 */

/**
 *
 */
247
LoaderOptions::LoaderOptions(int flags = (::LoaderOptions::LF_search | ::LoaderOptions::LF_report_errors));
constexpr LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &) = default;

1108 9 set_flags 0 4 1942 24 LoaderOptions::set_flags 0 1 145 10
/**
 *
 */
48
inline void LoaderOptions::set_flags(int flags);

1109 9 get_flags 0 4 1942 24 LoaderOptions::get_flags 0 1 146 10
/**
 *
 */
48
inline int LoaderOptions::get_flags(void) const;

1110 17 set_texture_flags 0 4 1942 32 LoaderOptions::set_texture_flags 0 1 147 10
/**
 *
 */
56
inline void LoaderOptions::set_texture_flags(int flags);

1111 17 get_texture_flags 0 4 1942 32 LoaderOptions::get_texture_flags 0 1 148 10
/**
 *
 */
56
inline int LoaderOptions::get_texture_flags(void) const;

1112 21 set_texture_num_views 0 4 1942 36 LoaderOptions::set_texture_num_views 0 1 149 459
/**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1113 21 get_texture_num_views 0 4 1942 36 LoaderOptions::get_texture_num_views 0 1 150 39
/**
 * See set_texture_num_views().
 */
60
inline int LoaderOptions::get_texture_num_views(void) const;

1114 22 set_auto_texture_scale 0 4 1942 37 LoaderOptions::set_auto_texture_scale 0 1 151 209
/**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1115 22 get_auto_texture_scale 0 4 1942 37 LoaderOptions::get_auto_texture_scale 0 1 152 40
/**
 * See set_auto_texture_scale().
 */
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1116 6 output 0 4 1942 21 LoaderOptions::output 0 1 153 10
/**
 *
 */
52
void LoaderOptions::output(std::ostream &out) const;

1117 14 ~LoaderOptions 0 4 1942 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1118 9 BamReader 0 4 1945 20 BamReader::BamReader 0 1 154 50
// The primary interface for a caller.

/**
 *
 */
67
explicit BamReader::BamReader(DatagramGenerator *source = nullptr);

1119 10 ~BamReader 0 4 1945 21 BamReader::~BamReader 0 0 10
/**
 *
 */
28
BamReader::~BamReader(void);

1120 10 set_source 0 4 1945 21 BamReader::set_source 0 1 155 142
/**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */
54
void BamReader::set_source(DatagramGenerator *source);

1121 10 get_source 0 4 1945 21 BamReader::get_source 0 1 156 100
/**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */
54
inline DatagramGenerator *BamReader::get_source(void);

1122 4 init 0 4 1945 15 BamReader::init 0 1 157 210
/**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */
27
bool BamReader::init(void);

1123 12 set_aux_data 0 4 1945 23 BamReader::set_aux_data 0 1 158 1007
/**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */
100
void BamReader::set_aux_data(TypedWritable *obj, std::string const &name, BamReader::AuxData *data);

1124 12 get_aux_data 0 4 1945 23 BamReader::get_aux_data 0 1 159 173
/**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */
95
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, std::string const &name) const;

1125 12 get_filename 0 4 1945 23 BamReader::get_filename 0 1 160 199
/**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */
59
inline Filename const &BamReader::get_filename(void) const;

1126 18 get_loader_options 0 4 1945 29 BamReader::get_loader_options 0 1 161 98
/**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1127 18 set_loader_options 0 4 1945 29 BamReader::set_loader_options 0 1 162 58
/**
 * Specifies the LoaderOptions for this BamReader.
 */
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1128 11 read_object 0 4 1945 22 BamReader::read_object 0 1 163 1393
/**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */

/**
 * Reads a single object from the Bam file.
 *
 * This flavor of read_object() returns both a TypedWritable and a
 * ReferenceCount pointer to the same object, so the reference count may be
 * tracked reliably, without having to know precisely what type of object we
 * have.
 * @return true on success, or false on failure.
 */
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1129 6 is_eof 0 4 1945 17 BamReader::is_eof 0 1 164 138
/**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */
42
inline bool BamReader::is_eof(void) const;

1130 7 resolve 0 4 1945 18 BamReader::resolve 0 1 165 565
/**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */
30
bool BamReader::resolve(void);

1131 14 change_pointer 0 4 1945 25 BamReader::change_pointer 0 1 166 406
/**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1132 18 get_file_major_ver 0 4 1945 29 BamReader::get_file_major_ver 0 1 167 81
/**
 * Returns the major version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_major_ver(void) const;

1133 18 get_file_minor_ver 0 4 1945 29 BamReader::get_file_minor_ver 0 1 168 81
/**
 * Returns the minor version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_minor_ver(void) const;

1134 15 get_file_endian 0 4 1945 26 BamReader::get_file_endian 0 1 169 254
/**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1135 24 get_file_stdfloat_double 0 4 1945 35 BamReader::get_file_stdfloat_double 0 1 170 220
/**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1136 21 get_current_major_ver 0 4 1945 32 BamReader::get_current_major_ver 0 1 171 174
/**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */
56
inline int BamReader::get_current_major_ver(void) const;

1137 21 get_current_minor_ver 0 4 1945 32 BamReader::get_current_minor_ver 0 1 172 184
/**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */
56
inline int BamReader::get_current_minor_ver(void) const;

1138 16 get_file_version 0 4 1945 27 BamReader::get_file_version 0 1 173 0
50
PyObject *BamReader::get_file_version(void) const;

1139 16 register_factory 0 4 1945 27 BamReader::register_factory 0 1 174 208
/**
 * Registers a factory function that is called when an object of the given
 * type is encountered within the .bam stream.
 *
 * @param user_data an optional pointer to be passed along to the function.
 */
75
static void BamReader::register_factory(TypeHandle handle, PyObject *func);

1140 9 BamWriter 0 4 1952 20 BamWriter::BamWriter 0 2 175 176 10
/**
 *
 */
120
explicit BamWriter::BamWriter(DatagramSink *target = nullptr);
inline BamWriter::BamWriter(BamWriter const &) = default;

1141 10 ~BamWriter 0 4 1952 21 BamWriter::~BamWriter 0 0 10
/**
 *
 */
28
BamWriter::~BamWriter(void);

1142 10 set_target 0 4 1952 21 BamWriter::set_target 0 1 177 153
/**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */
49
void BamWriter::set_target(DatagramSink *target);

1143 10 get_target 0 4 1952 21 BamWriter::get_target 0 1 178 100
/**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */
49
inline DatagramSink *BamWriter::get_target(void);

1144 4 init 0 4 1952 15 BamWriter::init 0 1 179 220
/**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */
27
bool BamWriter::init(void);

1145 12 get_filename 0 4 1952 23 BamWriter::get_filename 0 1 180 197
/**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */
59
inline Filename const &BamWriter::get_filename(void) const;

1146 12 write_object 0 4 1952 23 BamWriter::write_object 0 1 181 736
/**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */
55
bool BamWriter::write_object(TypedWritable const *obj);

1147 10 has_object 0 4 1952 21 BamWriter::has_object 0 1 182 170
/**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1148 5 flush 0 4 1952 16 BamWriter::flush 0 1 183 85
/**
 * Ensures that all data written thus far is manifested on the output stream.
 */
28
void BamWriter::flush(void);

1149 18 get_file_major_ver 0 4 1952 29 BamWriter::get_file_major_ver 0 1 184 84
/**
 * Returns the major version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_major_ver(void) const;

1150 18 get_file_minor_ver 0 4 1952 29 BamWriter::get_file_minor_ver 0 1 185 84
/**
 * Returns the minor version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_minor_ver(void) const;

1151 18 set_file_minor_ver 0 4 1952 29 BamWriter::set_file_minor_ver 0 1 186 232
/**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */
57
inline void BamWriter::set_file_minor_ver(int minor_ver);

1152 15 get_file_endian 0 4 1952 26 BamWriter::get_file_endian 0 1 187 257
/**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1153 24 get_file_stdfloat_double 0 4 1952 35 BamWriter::get_file_stdfloat_double 0 1 188 248
/**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1154 21 get_file_texture_mode 0 4 1952 32 BamWriter::get_file_texture_mode 0 1 189 196
/**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1155 21 set_file_texture_mode 0 4 1952 32 BamWriter::set_file_texture_mode 0 1 190 187
/**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1156 13 get_root_node 0 4 1952 24 BamWriter::get_root_node 0 1 191 165
/**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */
59
inline TypedWritable *BamWriter::get_root_node(void) const;

1157 13 set_root_node 0 4 1952 24 BamWriter::set_root_node 0 1 192 160
/**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */
63
inline void BamWriter::set_root_node(TypedWritable *root_node);

1158 7 BitMask 0 4 1955 32 BitMask< uint16_t, 16 >::BitMask 0 3 193 194 195 0
215
constexpr BitMask< uint16_t, 16 >::BitMask(void) = default;
inline constexpr BitMask< uint16_t, 16 >::BitMask(uint16_t init_value);
inline BitMask< uint16_t, 16 >::BitMask(BitMask< uint16_t, 16 > const &) = default;

1159 6 all_on 0 4 1955 31 BitMask< uint16_t, 16 >::all_on 0 1 196 0
76
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_on(void);

1160 7 all_off 0 4 1955 32 BitMask< uint16_t, 16 >::all_off 0 1 197 0
77
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_off(void);

1161 8 lower_on 0 4 1955 33 BitMask< uint16_t, 16 >::lower_on 0 1 198 0
85
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::lower_on(int on_bits);

1162 3 bit 0 4 1955 28 BitMask< uint16_t, 16 >::bit 0 1 199 0
78
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::bit(int index);

1163 5 range 0 4 1955 30 BitMask< uint16_t, 16 >::range 0 1 200 0
92
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::range(int low_bit, int size);

1164 16 has_max_num_bits 0 4 1955 41 BitMask< uint16_t, 16 >::has_max_num_bits 0 1 201 0
70
static constexpr bool BitMask< uint16_t, 16 >::has_max_num_bits(void);

1165 16 get_max_num_bits 0 4 1955 41 BitMask< uint16_t, 16 >::get_max_num_bits 0 1 202 0
69
static constexpr int BitMask< uint16_t, 16 >::get_max_num_bits(void);

1166 12 get_num_bits 0 4 1955 37 BitMask< uint16_t, 16 >::get_num_bits 0 1 203 0
64
constexpr int BitMask< uint16_t, 16 >::get_num_bits(void) const;

1167 7 get_bit 0 4 1955 32 BitMask< uint16_t, 16 >::get_bit 0 1 204 0
62
inline bool BitMask< uint16_t, 16 >::get_bit(int index) const;

1168 7 set_bit 0 4 1955 32 BitMask< uint16_t, 16 >::set_bit 0 1 205 0
56
inline void BitMask< uint16_t, 16 >::set_bit(int index);

1169 9 clear_bit 0 4 1955 34 BitMask< uint16_t, 16 >::clear_bit 0 1 206 0
58
inline void BitMask< uint16_t, 16 >::clear_bit(int index);

1170 10 set_bit_to 0 4 1955 35 BitMask< uint16_t, 16 >::set_bit_to 0 1 207 0
71
inline void BitMask< uint16_t, 16 >::set_bit_to(int index, bool value);

1171 7 is_zero 0 4 1955 32 BitMask< uint16_t, 16 >::is_zero 0 1 208 0
57
inline bool BitMask< uint16_t, 16 >::is_zero(void) const;

1172 9 is_all_on 0 4 1955 34 BitMask< uint16_t, 16 >::is_all_on 0 1 209 0
59
inline bool BitMask< uint16_t, 16 >::is_all_on(void) const;

1173 7 extract 0 4 1955 32 BitMask< uint16_t, 16 >::extract 0 1 210 0
78
inline uint16_t BitMask< uint16_t, 16 >::extract(int low_bit, int size) const;

1174 5 store 0 4 1955 30 BitMask< uint16_t, 16 >::store 0 1 211 0
82
inline void BitMask< uint16_t, 16 >::store(uint16_t value, int low_bit, int size);

1175 10 has_any_of 0 4 1955 35 BitMask< uint16_t, 16 >::has_any_of 0 1 212 0
77
inline bool BitMask< uint16_t, 16 >::has_any_of(int low_bit, int size) const;

1176 10 has_all_of 0 4 1955 35 BitMask< uint16_t, 16 >::has_all_of 0 1 213 0
77
inline bool BitMask< uint16_t, 16 >::has_all_of(int low_bit, int size) const;

1177 9 set_range 0 4 1955 34 BitMask< uint16_t, 16 >::set_range 0 1 214 0
70
inline void BitMask< uint16_t, 16 >::set_range(int low_bit, int size);

1178 11 clear_range 0 4 1955 36 BitMask< uint16_t, 16 >::clear_range 0 1 215 0
72
inline void BitMask< uint16_t, 16 >::clear_range(int low_bit, int size);

1179 12 set_range_to 0 4 1955 37 BitMask< uint16_t, 16 >::set_range_to 0 1 216 0
85
inline void BitMask< uint16_t, 16 >::set_range_to(bool value, int low_bit, int size);

1180 8 get_word 0 4 1955 33 BitMask< uint16_t, 16 >::get_word 0 1 217 0
62
inline uint16_t BitMask< uint16_t, 16 >::get_word(void) const;

1181 8 set_word 0 4 1955 33 BitMask< uint16_t, 16 >::set_word 0 1 218 0
62
inline void BitMask< uint16_t, 16 >::set_word(uint16_t value);

1182 15 get_num_on_bits 0 4 1955 40 BitMask< uint16_t, 16 >::get_num_on_bits 0 1 219 0
64
inline int BitMask< uint16_t, 16 >::get_num_on_bits(void) const;

1183 16 get_num_off_bits 0 4 1955 41 BitMask< uint16_t, 16 >::get_num_off_bits 0 1 220 0
65
inline int BitMask< uint16_t, 16 >::get_num_off_bits(void) const;

1184 17 get_lowest_on_bit 0 4 1955 42 BitMask< uint16_t, 16 >::get_lowest_on_bit 0 1 221 0
66
inline int BitMask< uint16_t, 16 >::get_lowest_on_bit(void) const;

1185 18 get_lowest_off_bit 0 4 1955 43 BitMask< uint16_t, 16 >::get_lowest_off_bit 0 1 222 0
67
inline int BitMask< uint16_t, 16 >::get_lowest_off_bit(void) const;

1186 18 get_highest_on_bit 0 4 1955 43 BitMask< uint16_t, 16 >::get_highest_on_bit 0 1 223 0
67
inline int BitMask< uint16_t, 16 >::get_highest_on_bit(void) const;

1187 19 get_highest_off_bit 0 4 1955 44 BitMask< uint16_t, 16 >::get_highest_off_bit 0 1 224 0
68
inline int BitMask< uint16_t, 16 >::get_highest_off_bit(void) const;

1188 29 get_next_higher_different_bit 0 4 1955 54 BitMask< uint16_t, 16 >::get_next_higher_different_bit 0 1 225 0
85
inline int BitMask< uint16_t, 16 >::get_next_higher_different_bit(int low_bit) const;

1189 15 invert_in_place 0 4 1955 40 BitMask< uint16_t, 16 >::invert_in_place 0 1 226 0
59
inline void BitMask< uint16_t, 16 >::invert_in_place(void);

1190 18 has_bits_in_common 0 4 1955 43 BitMask< uint16_t, 16 >::has_bits_in_common 0 1 227 0
100
inline bool BitMask< uint16_t, 16 >::has_bits_in_common(BitMask< uint16_t, 16 > const &other) const;

1191 5 clear 0 4 1955 30 BitMask< uint16_t, 16 >::clear 0 1 228 0
49
inline void BitMask< uint16_t, 16 >::clear(void);

1192 6 output 0 4 1955 31 BitMask< uint16_t, 16 >::output 0 1 229 0
62
void BitMask< uint16_t, 16 >::output(std::ostream &out) const;

1193 13 output_binary 0 4 1955 38 BitMask< uint16_t, 16 >::output_binary 0 1 230 0
91
void BitMask< uint16_t, 16 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1194 10 output_hex 0 4 1955 35 BitMask< uint16_t, 16 >::output_hex 0 1 231 0
88
void BitMask< uint16_t, 16 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1195 5 write 0 4 1955 30 BitMask< uint16_t, 16 >::write 0 1 232 0
83
void BitMask< uint16_t, 16 >::write(std::ostream &out, int indent_level = 0) const;

1196 11 operator == 0 4 1955 36 BitMask< uint16_t, 16 >::operator == 0 1 233 0
93
inline bool BitMask< uint16_t, 16 >::operator ==(BitMask< uint16_t, 16 > const &other) const;

1197 11 operator != 0 4 1955 36 BitMask< uint16_t, 16 >::operator != 0 1 234 0
93
inline bool BitMask< uint16_t, 16 >::operator !=(BitMask< uint16_t, 16 > const &other) const;

1198 10 operator < 0 4 1955 35 BitMask< uint16_t, 16 >::operator < 0 1 235 0
92
inline bool BitMask< uint16_t, 16 >::operator <(BitMask< uint16_t, 16 > const &other) const;

1199 10 compare_to 0 4 1955 35 BitMask< uint16_t, 16 >::compare_to 0 1 236 0
91
inline int BitMask< uint16_t, 16 >::compare_to(BitMask< uint16_t, 16 > const &other) const;

1200 10 operator & 0 4 1955 35 BitMask< uint16_t, 16 >::operator & 0 1 237 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator &(BitMask< uint16_t, 16 > const &other) const;

1201 10 operator | 0 4 1955 35 BitMask< uint16_t, 16 >::operator | 0 1 238 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator |(BitMask< uint16_t, 16 > const &other) const;

1202 10 operator ^ 0 4 1955 35 BitMask< uint16_t, 16 >::operator ^ 0 1 239 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ^(BitMask< uint16_t, 16 > const &other) const;

1203 10 operator ~ 0 68 1955 35 BitMask< uint16_t, 16 >::operator ~ 0 1 240 0
79
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ~(void) const;

1204 11 operator << 0 4 1955 36 BitMask< uint16_t, 16 >::operator << 0 1 241 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator <<(int shift) const;

1205 11 operator >> 0 4 1955 36 BitMask< uint16_t, 16 >::operator >> 0 1 242 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator >>(int shift) const;

1206 11 operator &= 0 4 1955 36 BitMask< uint16_t, 16 >::operator &= 0 1 243 0
87
inline void BitMask< uint16_t, 16 >::operator &=(BitMask< uint16_t, 16 > const &other);

1207 11 operator |= 0 4 1955 36 BitMask< uint16_t, 16 >::operator |= 0 1 244 0
87
inline void BitMask< uint16_t, 16 >::operator |=(BitMask< uint16_t, 16 > const &other);

1208 11 operator ^= 0 4 1955 36 BitMask< uint16_t, 16 >::operator ^= 0 1 245 0
87
inline void BitMask< uint16_t, 16 >::operator ^=(BitMask< uint16_t, 16 > const &other);

1209 12 operator <<= 0 4 1955 37 BitMask< uint16_t, 16 >::operator <<= 0 1 246 0
61
inline void BitMask< uint16_t, 16 >::operator <<=(int shift);

1210 12 operator >>= 0 4 1955 37 BitMask< uint16_t, 16 >::operator >>= 0 1 247 0
61
inline void BitMask< uint16_t, 16 >::operator >>=(int shift);

1211 19 flood_down_in_place 0 4 1955 44 BitMask< uint16_t, 16 >::flood_down_in_place 0 1 248 0
63
inline void BitMask< uint16_t, 16 >::flood_down_in_place(void);

1212 17 flood_up_in_place 0 4 1955 42 BitMask< uint16_t, 16 >::flood_up_in_place 0 1 249 0
61
inline void BitMask< uint16_t, 16 >::flood_up_in_place(void);

1213 15 flood_bits_down 0 4 1955 40 BitMask< uint16_t, 16 >::flood_bits_down 0 1 250 0
84
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_down(void) const;

1214 13 flood_bits_up 0 4 1955 38 BitMask< uint16_t, 16 >::flood_bits_up 0 1 251 0
82
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_up(void) const;

1215 21 keep_next_highest_bit 0 4 1955 46 BitMask< uint16_t, 16 >::keep_next_highest_bit 0 3 252 253 254 0
309
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(BitMask< uint16_t, 16 > const &other) const;

1216 20 keep_next_lowest_bit 0 4 1955 45 BitMask< uint16_t, 16 >::keep_next_lowest_bit 0 3 255 256 257 0
306
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(BitMask< uint16_t, 16 > const &other) const;

1217 7 get_key 0 4 1955 32 BitMask< uint16_t, 16 >::get_key 0 1 258 0
56
inline int BitMask< uint16_t, 16 >::get_key(void) const;

1218 11 __nonzero__ 0 4 1955 36 BitMask< uint16_t, 16 >::__nonzero__ 0 1 259 0
61
inline bool BitMask< uint16_t, 16 >::__nonzero__(void) const;

1219 10 __reduce__ 0 4 1955 35 BitMask< uint16_t, 16 >::__reduce__ 0 1 260 0
68
PyObject *BitMask< uint16_t, 16 >::__reduce__(PyObject *self) const;

1220 14 get_class_type 0 4 1955 39 BitMask< uint16_t, 16 >::get_class_type 0 1 261 0
64
static TypeHandle BitMask< uint16_t, 16 >::get_class_type(void);

1221 8 ~BitMask 0 4 1955 33 BitMask< uint16_t, 16 >::~BitMask 0 0 0
40
BitMask< uint16_t, 16 >::~BitMask(void);

1222 7 BitMask 0 4 1957 32 BitMask< uint32_t, 32 >::BitMask 0 3 262 263 264 0
215
constexpr BitMask< uint32_t, 32 >::BitMask(void) = default;
inline constexpr BitMask< uint32_t, 32 >::BitMask(uint32_t init_value);
inline BitMask< uint32_t, 32 >::BitMask(BitMask< uint32_t, 32 > const &) = default;

1223 6 all_on 0 4 1957 31 BitMask< uint32_t, 32 >::all_on 0 1 265 0
76
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_on(void);

1224 7 all_off 0 4 1957 32 BitMask< uint32_t, 32 >::all_off 0 1 266 0
77
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_off(void);

1225 8 lower_on 0 4 1957 33 BitMask< uint32_t, 32 >::lower_on 0 1 267 0
85
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::lower_on(int on_bits);

1226 3 bit 0 4 1957 28 BitMask< uint32_t, 32 >::bit 0 1 268 0
78
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::bit(int index);

1227 5 range 0 4 1957 30 BitMask< uint32_t, 32 >::range 0 1 269 0
92
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::range(int low_bit, int size);

1228 16 has_max_num_bits 0 4 1957 41 BitMask< uint32_t, 32 >::has_max_num_bits 0 1 270 0
70
static constexpr bool BitMask< uint32_t, 32 >::has_max_num_bits(void);

1229 16 get_max_num_bits 0 4 1957 41 BitMask< uint32_t, 32 >::get_max_num_bits 0 1 271 0
69
static constexpr int BitMask< uint32_t, 32 >::get_max_num_bits(void);

1230 12 get_num_bits 0 4 1957 37 BitMask< uint32_t, 32 >::get_num_bits 0 1 272 0
64
constexpr int BitMask< uint32_t, 32 >::get_num_bits(void) const;

1231 7 get_bit 0 4 1957 32 BitMask< uint32_t, 32 >::get_bit 0 1 273 0
62
inline bool BitMask< uint32_t, 32 >::get_bit(int index) const;

1232 7 set_bit 0 4 1957 32 BitMask< uint32_t, 32 >::set_bit 0 1 274 0
56
inline void BitMask< uint32_t, 32 >::set_bit(int index);

1233 9 clear_bit 0 4 1957 34 BitMask< uint32_t, 32 >::clear_bit 0 1 275 0
58
inline void BitMask< uint32_t, 32 >::clear_bit(int index);

1234 10 set_bit_to 0 4 1957 35 BitMask< uint32_t, 32 >::set_bit_to 0 1 276 0
71
inline void BitMask< uint32_t, 32 >::set_bit_to(int index, bool value);

1235 7 is_zero 0 4 1957 32 BitMask< uint32_t, 32 >::is_zero 0 1 277 0
57
inline bool BitMask< uint32_t, 32 >::is_zero(void) const;

1236 9 is_all_on 0 4 1957 34 BitMask< uint32_t, 32 >::is_all_on 0 1 278 0
59
inline bool BitMask< uint32_t, 32 >::is_all_on(void) const;

1237 7 extract 0 4 1957 32 BitMask< uint32_t, 32 >::extract 0 1 279 0
78
inline uint32_t BitMask< uint32_t, 32 >::extract(int low_bit, int size) const;

1238 5 store 0 4 1957 30 BitMask< uint32_t, 32 >::store 0 1 280 0
82
inline void BitMask< uint32_t, 32 >::store(uint32_t value, int low_bit, int size);

1239 10 has_any_of 0 4 1957 35 BitMask< uint32_t, 32 >::has_any_of 0 1 281 0
77
inline bool BitMask< uint32_t, 32 >::has_any_of(int low_bit, int size) const;

1240 10 has_all_of 0 4 1957 35 BitMask< uint32_t, 32 >::has_all_of 0 1 282 0
77
inline bool BitMask< uint32_t, 32 >::has_all_of(int low_bit, int size) const;

1241 9 set_range 0 4 1957 34 BitMask< uint32_t, 32 >::set_range 0 1 283 0
70
inline void BitMask< uint32_t, 32 >::set_range(int low_bit, int size);

1242 11 clear_range 0 4 1957 36 BitMask< uint32_t, 32 >::clear_range 0 1 284 0
72
inline void BitMask< uint32_t, 32 >::clear_range(int low_bit, int size);

1243 12 set_range_to 0 4 1957 37 BitMask< uint32_t, 32 >::set_range_to 0 1 285 0
85
inline void BitMask< uint32_t, 32 >::set_range_to(bool value, int low_bit, int size);

1244 8 get_word 0 4 1957 33 BitMask< uint32_t, 32 >::get_word 0 1 286 0
62
inline uint32_t BitMask< uint32_t, 32 >::get_word(void) const;

1245 8 set_word 0 4 1957 33 BitMask< uint32_t, 32 >::set_word 0 1 287 0
62
inline void BitMask< uint32_t, 32 >::set_word(uint32_t value);

1246 15 get_num_on_bits 0 4 1957 40 BitMask< uint32_t, 32 >::get_num_on_bits 0 1 288 0
64
inline int BitMask< uint32_t, 32 >::get_num_on_bits(void) const;

1247 16 get_num_off_bits 0 4 1957 41 BitMask< uint32_t, 32 >::get_num_off_bits 0 1 289 0
65
inline int BitMask< uint32_t, 32 >::get_num_off_bits(void) const;

1248 17 get_lowest_on_bit 0 4 1957 42 BitMask< uint32_t, 32 >::get_lowest_on_bit 0 1 290 0
66
inline int BitMask< uint32_t, 32 >::get_lowest_on_bit(void) const;

1249 18 get_lowest_off_bit 0 4 1957 43 BitMask< uint32_t, 32 >::get_lowest_off_bit 0 1 291 0
67
inline int BitMask< uint32_t, 32 >::get_lowest_off_bit(void) const;

1250 18 get_highest_on_bit 0 4 1957 43 BitMask< uint32_t, 32 >::get_highest_on_bit 0 1 292 0
67
inline int BitMask< uint32_t, 32 >::get_highest_on_bit(void) const;

1251 19 get_highest_off_bit 0 4 1957 44 BitMask< uint32_t, 32 >::get_highest_off_bit 0 1 293 0
68
inline int BitMask< uint32_t, 32 >::get_highest_off_bit(void) const;

1252 29 get_next_higher_different_bit 0 4 1957 54 BitMask< uint32_t, 32 >::get_next_higher_different_bit 0 1 294 0
85
inline int BitMask< uint32_t, 32 >::get_next_higher_different_bit(int low_bit) const;

1253 15 invert_in_place 0 4 1957 40 BitMask< uint32_t, 32 >::invert_in_place 0 1 295 0
59
inline void BitMask< uint32_t, 32 >::invert_in_place(void);

1254 18 has_bits_in_common 0 4 1957 43 BitMask< uint32_t, 32 >::has_bits_in_common 0 1 296 0
100
inline bool BitMask< uint32_t, 32 >::has_bits_in_common(BitMask< uint32_t, 32 > const &other) const;

1255 5 clear 0 4 1957 30 BitMask< uint32_t, 32 >::clear 0 1 297 0
49
inline void BitMask< uint32_t, 32 >::clear(void);

1256 6 output 0 4 1957 31 BitMask< uint32_t, 32 >::output 0 1 298 0
62
void BitMask< uint32_t, 32 >::output(std::ostream &out) const;

1257 13 output_binary 0 4 1957 38 BitMask< uint32_t, 32 >::output_binary 0 1 299 0
91
void BitMask< uint32_t, 32 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1258 10 output_hex 0 4 1957 35 BitMask< uint32_t, 32 >::output_hex 0 1 300 0
88
void BitMask< uint32_t, 32 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1259 5 write 0 4 1957 30 BitMask< uint32_t, 32 >::write 0 1 301 0
83
void BitMask< uint32_t, 32 >::write(std::ostream &out, int indent_level = 0) const;

1260 11 operator == 0 4 1957 36 BitMask< uint32_t, 32 >::operator == 0 1 302 0
93
inline bool BitMask< uint32_t, 32 >::operator ==(BitMask< uint32_t, 32 > const &other) const;

1261 11 operator != 0 4 1957 36 BitMask< uint32_t, 32 >::operator != 0 1 303 0
93
inline bool BitMask< uint32_t, 32 >::operator !=(BitMask< uint32_t, 32 > const &other) const;

1262 10 operator < 0 4 1957 35 BitMask< uint32_t, 32 >::operator < 0 1 304 0
92
inline bool BitMask< uint32_t, 32 >::operator <(BitMask< uint32_t, 32 > const &other) const;

1263 10 compare_to 0 4 1957 35 BitMask< uint32_t, 32 >::compare_to 0 1 305 0
91
inline int BitMask< uint32_t, 32 >::compare_to(BitMask< uint32_t, 32 > const &other) const;

1264 10 operator & 0 4 1957 35 BitMask< uint32_t, 32 >::operator & 0 1 306 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator &(BitMask< uint32_t, 32 > const &other) const;

1265 10 operator | 0 4 1957 35 BitMask< uint32_t, 32 >::operator | 0 1 307 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator |(BitMask< uint32_t, 32 > const &other) const;

1266 10 operator ^ 0 4 1957 35 BitMask< uint32_t, 32 >::operator ^ 0 1 308 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ^(BitMask< uint32_t, 32 > const &other) const;

1267 10 operator ~ 0 68 1957 35 BitMask< uint32_t, 32 >::operator ~ 0 1 309 0
79
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ~(void) const;

1268 11 operator << 0 4 1957 36 BitMask< uint32_t, 32 >::operator << 0 1 310 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator <<(int shift) const;

1269 11 operator >> 0 4 1957 36 BitMask< uint32_t, 32 >::operator >> 0 1 311 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator >>(int shift) const;

1270 11 operator &= 0 4 1957 36 BitMask< uint32_t, 32 >::operator &= 0 1 312 0
87
inline void BitMask< uint32_t, 32 >::operator &=(BitMask< uint32_t, 32 > const &other);

1271 11 operator |= 0 4 1957 36 BitMask< uint32_t, 32 >::operator |= 0 1 313 0
87
inline void BitMask< uint32_t, 32 >::operator |=(BitMask< uint32_t, 32 > const &other);

1272 11 operator ^= 0 4 1957 36 BitMask< uint32_t, 32 >::operator ^= 0 1 314 0
87
inline void BitMask< uint32_t, 32 >::operator ^=(BitMask< uint32_t, 32 > const &other);

1273 12 operator <<= 0 4 1957 37 BitMask< uint32_t, 32 >::operator <<= 0 1 315 0
61
inline void BitMask< uint32_t, 32 >::operator <<=(int shift);

1274 12 operator >>= 0 4 1957 37 BitMask< uint32_t, 32 >::operator >>= 0 1 316 0
61
inline void BitMask< uint32_t, 32 >::operator >>=(int shift);

1275 19 flood_down_in_place 0 4 1957 44 BitMask< uint32_t, 32 >::flood_down_in_place 0 1 317 0
63
inline void BitMask< uint32_t, 32 >::flood_down_in_place(void);

1276 17 flood_up_in_place 0 4 1957 42 BitMask< uint32_t, 32 >::flood_up_in_place 0 1 318 0
61
inline void BitMask< uint32_t, 32 >::flood_up_in_place(void);

1277 15 flood_bits_down 0 4 1957 40 BitMask< uint32_t, 32 >::flood_bits_down 0 1 319 0
84
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_down(void) const;

1278 13 flood_bits_up 0 4 1957 38 BitMask< uint32_t, 32 >::flood_bits_up 0 1 320 0
82
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_up(void) const;

1279 21 keep_next_highest_bit 0 4 1957 46 BitMask< uint32_t, 32 >::keep_next_highest_bit 0 3 321 322 323 0
309
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(BitMask< uint32_t, 32 > const &other) const;

1280 20 keep_next_lowest_bit 0 4 1957 45 BitMask< uint32_t, 32 >::keep_next_lowest_bit 0 3 324 325 326 0
306
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(BitMask< uint32_t, 32 > const &other) const;

1281 7 get_key 0 4 1957 32 BitMask< uint32_t, 32 >::get_key 0 1 327 0
56
inline int BitMask< uint32_t, 32 >::get_key(void) const;

1282 11 __nonzero__ 0 4 1957 36 BitMask< uint32_t, 32 >::__nonzero__ 0 1 328 0
61
inline bool BitMask< uint32_t, 32 >::__nonzero__(void) const;

1283 10 __reduce__ 0 4 1957 35 BitMask< uint32_t, 32 >::__reduce__ 0 1 329 0
68
PyObject *BitMask< uint32_t, 32 >::__reduce__(PyObject *self) const;

1284 14 get_class_type 0 4 1957 39 BitMask< uint32_t, 32 >::get_class_type 0 1 330 0
64
static TypeHandle BitMask< uint32_t, 32 >::get_class_type(void);

1285 8 ~BitMask 0 4 1957 33 BitMask< uint32_t, 32 >::~BitMask 0 0 0
40
BitMask< uint32_t, 32 >::~BitMask(void);

1286 7 BitMask 0 4 1959 32 BitMask< uint64_t, 64 >::BitMask 0 3 331 332 333 0
215
constexpr BitMask< uint64_t, 64 >::BitMask(void) = default;
inline constexpr BitMask< uint64_t, 64 >::BitMask(uint64_t init_value);
inline BitMask< uint64_t, 64 >::BitMask(BitMask< uint64_t, 64 > const &) = default;

1287 6 all_on 0 4 1959 31 BitMask< uint64_t, 64 >::all_on 0 1 334 0
76
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_on(void);

1288 7 all_off 0 4 1959 32 BitMask< uint64_t, 64 >::all_off 0 1 335 0
77
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_off(void);

1289 8 lower_on 0 4 1959 33 BitMask< uint64_t, 64 >::lower_on 0 1 336 0
85
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::lower_on(int on_bits);

1290 3 bit 0 4 1959 28 BitMask< uint64_t, 64 >::bit 0 1 337 0
78
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::bit(int index);

1291 5 range 0 4 1959 30 BitMask< uint64_t, 64 >::range 0 1 338 0
92
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::range(int low_bit, int size);

1292 16 has_max_num_bits 0 4 1959 41 BitMask< uint64_t, 64 >::has_max_num_bits 0 1 339 0
70
static constexpr bool BitMask< uint64_t, 64 >::has_max_num_bits(void);

1293 16 get_max_num_bits 0 4 1959 41 BitMask< uint64_t, 64 >::get_max_num_bits 0 1 340 0
69
static constexpr int BitMask< uint64_t, 64 >::get_max_num_bits(void);

1294 12 get_num_bits 0 4 1959 37 BitMask< uint64_t, 64 >::get_num_bits 0 1 341 0
64
constexpr int BitMask< uint64_t, 64 >::get_num_bits(void) const;

1295 7 get_bit 0 4 1959 32 BitMask< uint64_t, 64 >::get_bit 0 1 342 0
62
inline bool BitMask< uint64_t, 64 >::get_bit(int index) const;

1296 7 set_bit 0 4 1959 32 BitMask< uint64_t, 64 >::set_bit 0 1 343 0
56
inline void BitMask< uint64_t, 64 >::set_bit(int index);

1297 9 clear_bit 0 4 1959 34 BitMask< uint64_t, 64 >::clear_bit 0 1 344 0
58
inline void BitMask< uint64_t, 64 >::clear_bit(int index);

1298 10 set_bit_to 0 4 1959 35 BitMask< uint64_t, 64 >::set_bit_to 0 1 345 0
71
inline void BitMask< uint64_t, 64 >::set_bit_to(int index, bool value);

1299 7 is_zero 0 4 1959 32 BitMask< uint64_t, 64 >::is_zero 0 1 346 0
57
inline bool BitMask< uint64_t, 64 >::is_zero(void) const;

1300 9 is_all_on 0 4 1959 34 BitMask< uint64_t, 64 >::is_all_on 0 1 347 0
59
inline bool BitMask< uint64_t, 64 >::is_all_on(void) const;

1301 7 extract 0 4 1959 32 BitMask< uint64_t, 64 >::extract 0 1 348 0
78
inline uint64_t BitMask< uint64_t, 64 >::extract(int low_bit, int size) const;

1302 5 store 0 4 1959 30 BitMask< uint64_t, 64 >::store 0 1 349 0
82
inline void BitMask< uint64_t, 64 >::store(uint64_t value, int low_bit, int size);

1303 10 has_any_of 0 4 1959 35 BitMask< uint64_t, 64 >::has_any_of 0 1 350 0
77
inline bool BitMask< uint64_t, 64 >::has_any_of(int low_bit, int size) const;

1304 10 has_all_of 0 4 1959 35 BitMask< uint64_t, 64 >::has_all_of 0 1 351 0
77
inline bool BitMask< uint64_t, 64 >::has_all_of(int low_bit, int size) const;

1305 9 set_range 0 4 1959 34 BitMask< uint64_t, 64 >::set_range 0 1 352 0
70
inline void BitMask< uint64_t, 64 >::set_range(int low_bit, int size);

1306 11 clear_range 0 4 1959 36 BitMask< uint64_t, 64 >::clear_range 0 1 353 0
72
inline void BitMask< uint64_t, 64 >::clear_range(int low_bit, int size);

1307 12 set_range_to 0 4 1959 37 BitMask< uint64_t, 64 >::set_range_to 0 1 354 0
85
inline void BitMask< uint64_t, 64 >::set_range_to(bool value, int low_bit, int size);

1308 8 get_word 0 4 1959 33 BitMask< uint64_t, 64 >::get_word 0 1 355 0
62
inline uint64_t BitMask< uint64_t, 64 >::get_word(void) const;

1309 8 set_word 0 4 1959 33 BitMask< uint64_t, 64 >::set_word 0 1 356 0
62
inline void BitMask< uint64_t, 64 >::set_word(uint64_t value);

1310 15 get_num_on_bits 0 4 1959 40 BitMask< uint64_t, 64 >::get_num_on_bits 0 1 357 0
64
inline int BitMask< uint64_t, 64 >::get_num_on_bits(void) const;

1311 16 get_num_off_bits 0 4 1959 41 BitMask< uint64_t, 64 >::get_num_off_bits 0 1 358 0
65
inline int BitMask< uint64_t, 64 >::get_num_off_bits(void) const;

1312 17 get_lowest_on_bit 0 4 1959 42 BitMask< uint64_t, 64 >::get_lowest_on_bit 0 1 359 0
66
inline int BitMask< uint64_t, 64 >::get_lowest_on_bit(void) const;

1313 18 get_lowest_off_bit 0 4 1959 43 BitMask< uint64_t, 64 >::get_lowest_off_bit 0 1 360 0
67
inline int BitMask< uint64_t, 64 >::get_lowest_off_bit(void) const;

1314 18 get_highest_on_bit 0 4 1959 43 BitMask< uint64_t, 64 >::get_highest_on_bit 0 1 361 0
67
inline int BitMask< uint64_t, 64 >::get_highest_on_bit(void) const;

1315 19 get_highest_off_bit 0 4 1959 44 BitMask< uint64_t, 64 >::get_highest_off_bit 0 1 362 0
68
inline int BitMask< uint64_t, 64 >::get_highest_off_bit(void) const;

1316 29 get_next_higher_different_bit 0 4 1959 54 BitMask< uint64_t, 64 >::get_next_higher_different_bit 0 1 363 0
85
inline int BitMask< uint64_t, 64 >::get_next_higher_different_bit(int low_bit) const;

1317 15 invert_in_place 0 4 1959 40 BitMask< uint64_t, 64 >::invert_in_place 0 1 364 0
59
inline void BitMask< uint64_t, 64 >::invert_in_place(void);

1318 18 has_bits_in_common 0 4 1959 43 BitMask< uint64_t, 64 >::has_bits_in_common 0 1 365 0
100
inline bool BitMask< uint64_t, 64 >::has_bits_in_common(BitMask< uint64_t, 64 > const &other) const;

1319 5 clear 0 4 1959 30 BitMask< uint64_t, 64 >::clear 0 1 366 0
49
inline void BitMask< uint64_t, 64 >::clear(void);

1320 6 output 0 4 1959 31 BitMask< uint64_t, 64 >::output 0 1 367 0
62
void BitMask< uint64_t, 64 >::output(std::ostream &out) const;

1321 13 output_binary 0 4 1959 38 BitMask< uint64_t, 64 >::output_binary 0 1 368 0
91
void BitMask< uint64_t, 64 >::output_binary(std::ostream &out, int spaces_every = 4) const;

1322 10 output_hex 0 4 1959 35 BitMask< uint64_t, 64 >::output_hex 0 1 369 0
88
void BitMask< uint64_t, 64 >::output_hex(std::ostream &out, int spaces_every = 4) const;

1323 5 write 0 4 1959 30 BitMask< uint64_t, 64 >::write 0 1 370 0
83
void BitMask< uint64_t, 64 >::write(std::ostream &out, int indent_level = 0) const;

1324 11 operator == 0 4 1959 36 BitMask< uint64_t, 64 >::operator == 0 1 371 0
93
inline bool BitMask< uint64_t, 64 >::operator ==(BitMask< uint64_t, 64 > const &other) const;

1325 11 operator != 0 4 1959 36 BitMask< uint64_t, 64 >::operator != 0 1 372 0
93
inline bool BitMask< uint64_t, 64 >::operator !=(BitMask< uint64_t, 64 > const &other) const;

1326 10 operator < 0 4 1959 35 BitMask< uint64_t, 64 >::operator < 0 1 373 0
92
inline bool BitMask< uint64_t, 64 >::operator <(BitMask< uint64_t, 64 > const &other) const;

1327 10 compare_to 0 4 1959 35 BitMask< uint64_t, 64 >::compare_to 0 1 374 0
91
inline int BitMask< uint64_t, 64 >::compare_to(BitMask< uint64_t, 64 > const &other) const;

1328 10 operator & 0 4 1959 35 BitMask< uint64_t, 64 >::operator & 0 1 375 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator &(BitMask< uint64_t, 64 > const &other) const;

1329 10 operator | 0 4 1959 35 BitMask< uint64_t, 64 >::operator | 0 1 376 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator |(BitMask< uint64_t, 64 > const &other) const;

1330 10 operator ^ 0 4 1959 35 BitMask< uint64_t, 64 >::operator ^ 0 1 377 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ^(BitMask< uint64_t, 64 > const &other) const;

1331 10 operator ~ 0 68 1959 35 BitMask< uint64_t, 64 >::operator ~ 0 1 378 0
79
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ~(void) const;

1332 11 operator << 0 4 1959 36 BitMask< uint64_t, 64 >::operator << 0 1 379 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator <<(int shift) const;

1333 11 operator >> 0 4 1959 36 BitMask< uint64_t, 64 >::operator >> 0 1 380 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator >>(int shift) const;

1334 11 operator &= 0 4 1959 36 BitMask< uint64_t, 64 >::operator &= 0 1 381 0
87
inline void BitMask< uint64_t, 64 >::operator &=(BitMask< uint64_t, 64 > const &other);

1335 11 operator |= 0 4 1959 36 BitMask< uint64_t, 64 >::operator |= 0 1 382 0
87
inline void BitMask< uint64_t, 64 >::operator |=(BitMask< uint64_t, 64 > const &other);

1336 11 operator ^= 0 4 1959 36 BitMask< uint64_t, 64 >::operator ^= 0 1 383 0
87
inline void BitMask< uint64_t, 64 >::operator ^=(BitMask< uint64_t, 64 > const &other);

1337 12 operator <<= 0 4 1959 37 BitMask< uint64_t, 64 >::operator <<= 0 1 384 0
61
inline void BitMask< uint64_t, 64 >::operator <<=(int shift);

1338 12 operator >>= 0 4 1959 37 BitMask< uint64_t, 64 >::operator >>= 0 1 385 0
61
inline void BitMask< uint64_t, 64 >::operator >>=(int shift);

1339 19 flood_down_in_place 0 4 1959 44 BitMask< uint64_t, 64 >::flood_down_in_place 0 1 386 0
63
inline void BitMask< uint64_t, 64 >::flood_down_in_place(void);

1340 17 flood_up_in_place 0 4 1959 42 BitMask< uint64_t, 64 >::flood_up_in_place 0 1 387 0
61
inline void BitMask< uint64_t, 64 >::flood_up_in_place(void);

1341 15 flood_bits_down 0 4 1959 40 BitMask< uint64_t, 64 >::flood_bits_down 0 1 388 0
84
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_down(void) const;

1342 13 flood_bits_up 0 4 1959 38 BitMask< uint64_t, 64 >::flood_bits_up 0 1 389 0
82
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_up(void) const;

1343 21 keep_next_highest_bit 0 4 1959 46 BitMask< uint64_t, 64 >::keep_next_highest_bit 0 3 390 391 392 0
309
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(BitMask< uint64_t, 64 > const &other) const;

1344 20 keep_next_lowest_bit 0 4 1959 45 BitMask< uint64_t, 64 >::keep_next_lowest_bit 0 3 393 394 395 0
306
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(BitMask< uint64_t, 64 > const &other) const;

1345 7 get_key 0 4 1959 32 BitMask< uint64_t, 64 >::get_key 0 1 396 0
56
inline int BitMask< uint64_t, 64 >::get_key(void) const;

1346 11 __nonzero__ 0 4 1959 36 BitMask< uint64_t, 64 >::__nonzero__ 0 1 397 0
61
inline bool BitMask< uint64_t, 64 >::__nonzero__(void) const;

1347 10 __reduce__ 0 4 1959 35 BitMask< uint64_t, 64 >::__reduce__ 0 1 398 0
68
PyObject *BitMask< uint64_t, 64 >::__reduce__(PyObject *self) const;

1348 14 get_class_type 0 4 1959 39 BitMask< uint64_t, 64 >::get_class_type 0 1 399 0
64
static TypeHandle BitMask< uint64_t, 64 >::get_class_type(void);

1349 8 ~BitMask 0 4 1959 33 BitMask< uint64_t, 64 >::~BitMask 0 0 0
40
BitMask< uint64_t, 64 >::~BitMask(void);

1350 8 BitArray 0 4 1962 18 BitArray::BitArray 0 4 400 401 402 403 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
190
inline BitArray::BitArray(void);
inline BitArray::BitArray(BitArray::WordType init_value);
BitArray::BitArray(SparseArray const &from);
inline BitArray::BitArray(BitArray const &) = default;

1351 6 all_on 0 4 1962 16 BitArray::all_on 0 1 404 69
/**
 * Returns a BitArray with an infinite array of bits, all on.
 */
46
static inline BitArray BitArray::all_on(void);

1352 7 all_off 0 4 1962 17 BitArray::all_off 0 1 405 53
/**
 * Returns a BitArray whose bits are all off.
 */
47
static inline BitArray BitArray::all_off(void);

1353 8 lower_on 0 4 1962 18 BitArray::lower_on 0 1 406 62
/**
 * Returns a BitArray whose lower on_bits bits are on.
 */
55
static inline BitArray BitArray::lower_on(int on_bits);

1354 3 bit 0 4 1962 13 BitArray::bit 0 1 407 61
/**
 * Returns a BitArray with only the indicated bit on.
 */
48
static inline BitArray BitArray::bit(int index);

1355 5 range 0 4 1962 15 BitArray::range 0 1 408 76
/**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */
62
static inline BitArray BitArray::range(int low_bit, int size);

1356 16 has_max_num_bits 0 4 1962 26 BitArray::has_max_num_bits 0 1 409 0
55
static constexpr bool BitArray::has_max_num_bits(void);

1357 16 get_max_num_bits 0 4 1962 26 BitArray::get_max_num_bits 0 1 410 0
54
static constexpr int BitArray::get_max_num_bits(void);

1358 21 get_num_bits_per_word 0 4 1962 31 BitArray::get_num_bits_per_word 0 1 411 0
59
static constexpr int BitArray::get_num_bits_per_word(void);

1359 12 get_num_bits 0 4 1962 22 BitArray::get_num_bits 0 1 412 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
54
inline std::size_t BitArray::get_num_bits(void) const;

1360 7 get_bit 0 4 1962 17 BitArray::get_bit 0 1 413 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
47
inline bool BitArray::get_bit(int index) const;

1361 7 set_bit 0 4 1962 17 BitArray::set_bit 0 1 414 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
41
inline void BitArray::set_bit(int index);

1362 9 clear_bit 0 4 1962 19 BitArray::clear_bit 0 1 415 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
43
inline void BitArray::clear_bit(int index);

1363 10 set_bit_to 0 4 1962 20 BitArray::set_bit_to 0 1 416 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
56
inline void BitArray::set_bit_to(int index, bool value);

1364 16 get_highest_bits 0 4 1962 26 BitArray::get_highest_bits 0 1 417 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
51
inline bool BitArray::get_highest_bits(void) const;

1365 7 is_zero 0 4 1962 17 BitArray::is_zero 0 1 418 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
35
bool BitArray::is_zero(void) const;

1366 9 is_all_on 0 4 1962 19 BitArray::is_all_on 0 1 419 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
37
bool BitArray::is_all_on(void) const;

1367 7 extract 0 4 1962 17 BitArray::extract 0 1 420 187
/**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */
73
inline BitArray::WordType BitArray::extract(int low_bit, int size) const;

1368 5 store 0 4 1962 15 BitArray::store 0 1 421 92
/**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */
77
inline void BitArray::store(BitArray::WordType value, int low_bit, int size);

1369 10 has_any_of 0 4 1962 20 BitArray::has_any_of 0 1 422 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
55
bool BitArray::has_any_of(int low_bit, int size) const;

1370 10 has_all_of 0 4 1962 20 BitArray::has_all_of 0 1 423 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
55
bool BitArray::has_all_of(int low_bit, int size) const;

1371 9 set_range 0 4 1962 19 BitArray::set_range 0 1 424 47
/**
 * Sets the indicated range of bits on.
 */
48
void BitArray::set_range(int low_bit, int size);

1372 11 clear_range 0 4 1962 21 BitArray::clear_range 0 1 425 48
/**
 * Sets the indicated range of bits off.
 */
50
void BitArray::clear_range(int low_bit, int size);

1373 12 set_range_to 0 4 1962 22 BitArray::set_range_to 0 1 426 64
/**
 * Sets the indicated range of bits to either on or off.
 */
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1374 15 get_num_on_bits 0 4 1962 25 BitArray::get_num_on_bits 0 1 427 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
42
int BitArray::get_num_on_bits(void) const;

1375 16 get_num_off_bits 0 4 1962 26 BitArray::get_num_off_bits 0 1 428 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
43
int BitArray::get_num_off_bits(void) const;

1376 17 get_lowest_on_bit 0 4 1962 27 BitArray::get_lowest_on_bit 0 1 429 101
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */
44
int BitArray::get_lowest_on_bit(void) const;

1377 18 get_lowest_off_bit 0 4 1962 28 BitArray::get_lowest_off_bit 0 1 430 101
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */
45
int BitArray::get_lowest_off_bit(void) const;

1378 18 get_highest_on_bit 0 4 1962 28 BitArray::get_highest_on_bit 0 1 431 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
45
int BitArray::get_highest_on_bit(void) const;

1379 19 get_highest_off_bit 0 4 1962 29 BitArray::get_highest_off_bit 0 1 432 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
46
int BitArray::get_highest_off_bit(void) const;

1380 29 get_next_higher_different_bit 0 4 1962 39 BitArray::get_next_higher_different_bit 0 1 433 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1381 13 get_num_words 0 4 1962 23 BitArray::get_num_words 0 1 434 75
/**
 * Returns the number of possibly-unique words stored in the array.
 */
55
inline std::size_t BitArray::get_num_words(void) const;

1382 8 get_word 0 4 1962 18 BitArray::get_word 0 1 435 175
/**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */
66
inline BitArray::MaskType BitArray::get_word(std::size_t n) const;

1383 8 set_word 0 4 1962 18 BitArray::set_word 0 1 436 113
/**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */
72
inline void BitArray::set_word(std::size_t n, BitArray::WordType value);

1384 15 invert_in_place 0 4 1962 25 BitArray::invert_in_place 0 1 437 90
/**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */
37
void BitArray::invert_in_place(void);

1385 18 has_bits_in_common 0 4 1962 28 BitArray::has_bits_in_common 0 1 438 178
/**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1386 5 clear 0 4 1962 15 BitArray::clear 0 1 439 49
/**
 * Sets all the bits in the BitArray off.
 */
34
inline void BitArray::clear(void);

1387 6 output 0 4 1962 16 BitArray::output 0 1 440 193
/**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */
47
void BitArray::output(std::ostream &out) const;

1388 13 output_binary 0 4 1962 23 BitArray::output_binary 0 1 441 83
/**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */
76
void BitArray::output_binary(std::ostream &out, int spaces_every = 4) const;

1389 10 output_hex 0 4 1962 20 BitArray::output_hex 0 1 442 93
/**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */
73
void BitArray::output_hex(std::ostream &out, int spaces_every = 4) const;

1390 5 write 0 4 1962 15 BitArray::write 0 1 443 99
/**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */
68
void BitArray::write(std::ostream &out, int indent_level = 0) const;

1391 11 operator == 0 4 1962 21 BitArray::operator == 0 1 444 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1392 11 operator != 0 4 1962 21 BitArray::operator != 0 1 445 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1393 10 operator < 0 4 1962 20 BitArray::operator < 0 1 446 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1394 10 compare_to 0 4 1962 20 BitArray::compare_to 0 1 447 233
/**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */
54
int BitArray::compare_to(BitArray const &other) const;

1395 10 operator & 0 4 1962 20 BitArray::operator & 0 1 448 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1396 10 operator | 0 4 1962 20 BitArray::operator | 0 1 449 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1397 10 operator ^ 0 4 1962 20 BitArray::operator ^ 0 1 450 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1398 10 operator ~ 0 68 1962 20 BitArray::operator ~ 0 1 451 0
49
inline BitArray BitArray::operator ~(void) const;

1399 11 operator << 0 4 1962 21 BitArray::operator << 0 1 452 0
55
inline BitArray BitArray::operator <<(int shift) const;

1400 11 operator >> 0 4 1962 21 BitArray::operator >> 0 1 453 0
55
inline BitArray BitArray::operator >>(int shift) const;

1401 11 operator &= 0 4 1962 21 BitArray::operator &= 0 1 454 0
50
void BitArray::operator &=(BitArray const &other);

1402 11 operator |= 0 4 1962 21 BitArray::operator |= 0 1 455 0
50
void BitArray::operator |=(BitArray const &other);

1403 11 operator ^= 0 4 1962 21 BitArray::operator ^= 0 1 456 0
50
void BitArray::operator ^=(BitArray const &other);

1404 12 operator <<= 0 4 1962 22 BitArray::operator <<= 0 1 457 0
39
void BitArray::operator <<=(int shift);

1405 12 operator >>= 0 4 1962 22 BitArray::operator >>= 0 1 458 0
39
void BitArray::operator >>=(int shift);

1406 12 __getstate__ 0 4 1962 22 BitArray::__getstate__ 0 1 459 0
45
PyObject *BitArray::__getstate__(void) const;

1407 12 __setstate__ 0 4 1962 22 BitArray::__setstate__ 0 1 460 0
45
void BitArray::__setstate__(PyObject *state);

1408 14 get_class_type 0 4 1962 24 BitArray::get_class_type 0 1 461 0
49
static TypeHandle BitArray::get_class_type(void);

1409 9 ~BitArray 0 4 1962 19 BitArray::~BitArray 0 0 0
26
BitArray::~BitArray(void);

1410 12 ButtonHandle 0 4 1964 26 ButtonHandle::ButtonHandle 0 4 462 463 464 465 758
// The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer!

/**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */

/**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */
219
inline ButtonHandle::ButtonHandle(void) = default;
constexpr ButtonHandle::ButtonHandle(int index);
ButtonHandle::ButtonHandle(std::string const &name);
inline ButtonHandle::ButtonHandle(ButtonHandle const &) = default;

1411 11 operator == 0 4 1964 25 ButtonHandle::operator == 0 1 466 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1412 11 operator != 0 4 1964 25 ButtonHandle::operator != 0 1 467 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1413 10 operator < 0 4 1964 24 ButtonHandle::operator < 0 1 468 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1414 11 operator <= 0 4 1964 25 ButtonHandle::operator <= 0 1 469 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1415 10 operator > 0 4 1964 24 ButtonHandle::operator > 0 1 470 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1416 11 operator >= 0 4 1964 25 ButtonHandle::operator >= 0 1 471 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1417 10 compare_to 0 4 1964 24 ButtonHandle::compare_to 0 1 472 209
/**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1418 8 get_hash 0 4 1964 22 ButtonHandle::get_hash 0 1 473 54
/**
 * Returns a hash code suitable for phash_map.
 */
54
inline std::size_t ButtonHandle::get_hash(void) const;

1419 8 get_name 0 4 1964 22 ButtonHandle::get_name 0 1 474 42
/**
 * Returns the name of the button.
 */
47
std::string ButtonHandle::get_name(void) const;

1420 20 has_ascii_equivalent 0 4 1964 34 ButtonHandle::has_ascii_equivalent 0 1 475 121
/**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1421 20 get_ascii_equivalent 0 4 1964 34 ButtonHandle::get_ascii_equivalent 0 1 476 109
/**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1422 9 get_alias 0 4 1964 23 ButtonHandle::get_alias 0 1 477 373
/**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */
49
ButtonHandle ButtonHandle::get_alias(void) const;

1423 7 matches 0 4 1964 21 ButtonHandle::matches 0 1 478 263
/**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1424 9 get_index 0 4 1964 23 ButtonHandle::get_index 0 1 479 363
/**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */
50
constexpr int ButtonHandle::get_index(void) const;

1425 6 output 0 4 1964 20 ButtonHandle::output 0 1 480 10
/**
 *
 */
58
inline void ButtonHandle::output(std::ostream &out) const;

1426 4 none 0 4 1964 18 ButtonHandle::none 0 1 481 0
55
static constexpr ButtonHandle ButtonHandle::none(void);

1427 22 operator typecast bool 0 132 1964 36 ButtonHandle::operator typecast bool 0 1 483 0
34
inline operator bool (void) const;

1428 14 get_class_type 0 4 1964 28 ButtonHandle::get_class_type 0 1 482 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1429 13 ~ButtonHandle 0 4 1964 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1430 10 get_button 0 4 1968 26 ButtonRegistry::get_button 0 1 485 150
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */
65
ButtonHandle ButtonRegistry::get_button(std::string const &name);

1431 11 find_button 0 4 1968 27 ButtonRegistry::find_button 0 1 486 144
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */
66
ButtonHandle ButtonRegistry::find_button(std::string const &name);

1432 17 find_ascii_button 0 4 1968 33 ButtonRegistry::find_ascii_button 0 1 487 169
/**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1433 5 write 0 4 1968 21 ButtonRegistry::write 0 1 488 10
/**
 *
 */
52
void ButtonRegistry::write(std::ostream &out) const;

1434 3 ptr 0 4 1968 19 ButtonRegistry::ptr 0 1 489 134
// ptr() returns the pointer to the global ButtonRegistry object.

/**
 * Returns the pointer to the global ButtonRegistry object.
 */
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1435 14 ButtonRegistry 0 4 1968 30 ButtonRegistry::ButtonRegistry 0 1 484 10
/**
 *
 */
72
inline ButtonRegistry::ButtonRegistry(ButtonRegistry const &) = default;

1436 15 ~ButtonRegistry 0 4 1968 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1437 15 get_num_buttons 0 4 1969 26 ButtonMap::get_num_buttons 0 1 492 76
/**
 * Returns the number of buttons that this button mapping specifies.
 */
58
inline std::size_t ButtonMap::get_num_buttons(void) const;

1438 14 get_raw_button 0 4 1969 25 ButtonMap::get_raw_button 0 1 493 76
/**
 * Returns the underlying raw button associated with the nth button.
 */
67
inline ButtonHandle ButtonMap::get_raw_button(std::size_t i) const;

1439 17 get_mapped_button 0 4 1969 28 ButtonMap::get_mapped_button 0 3 494 495 496 437
/**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */
229
inline ButtonHandle ButtonMap::get_mapped_button(std::size_t i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(std::string const &raw_name) const;

1440 23 get_mapped_button_label 0 4 1969 34 ButtonMap::get_mapped_button_label 0 3 497 498 499 837
/**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */
265
inline std::string const &ButtonMap::get_mapped_button_label(std::size_t i) const;
inline std::string const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline std::string const &ButtonMap::get_mapped_button_label(std::string const &raw_name) const;

1441 6 output 0 4 1969 17 ButtonMap::output 0 1 500 10
/**
 *
 */
48
void ButtonMap::output(std::ostream &out) const;

1442 5 write 0 4 1969 16 ButtonMap::write 0 1 501 10
/**
 *
 */
69
void ButtonMap::write(std::ostream &out, int indent_level = 0) const;

1443 14 get_class_type 0 4 1969 25 ButtonMap::get_class_type 0 1 502 0
50
static TypeHandle ButtonMap::get_class_type(void);

1444 9 ButtonMap 0 4 1969 20 ButtonMap::ButtonMap 0 2 490 491 0
102
inline ButtonMap::ButtonMap(void) = default;
inline ButtonMap::ButtonMap(ButtonMap const &) = default;

1445 10 ~ButtonMap 0 4 1969 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1446 6 output 0 6 1971 22 CallbackObject::output 0 1 504 10
/**
 *
 */
61
virtual void CallbackObject::output(std::ostream &out) const;

1447 4 make 0 4 1971 20 CallbackObject::make 0 1 505 0
76
static PointerTo< CallbackObject > CallbackObject::make(PyObject *function);

1448 14 get_class_type 0 4 1971 30 CallbackObject::get_class_type 0 1 506 0
55
static TypeHandle CallbackObject::get_class_type(void);

1449 14 CallbackObject 0 4 1971 30 CallbackObject::CallbackObject 0 1 503 10
/**
 *
 */
72
inline CallbackObject::CallbackObject(CallbackObject const &) = default;

1450 15 ~CallbackObject 0 4 1971 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1451 19 get_cache_ref_count 0 4 1972 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 507 47
/**
 * Returns the current reference count.
 */
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1452 9 cache_ref 0 4 1972 44 CachedTypedWritableReferenceCount::cache_ref 0 1 508 108
/**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1453 11 cache_unref 0 4 1972 46 CachedTypedWritableReferenceCount::cache_unref 0 1 509 202
/**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1454 24 test_ref_count_integrity 0 4 1972 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 510 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1455 14 get_class_type 0 4 1972 49 CachedTypedWritableReferenceCount::get_class_type 0 1 511 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1456 6 output 0 6 1973 20 CallbackData::output 0 1 512 10
/**
 *
 */
59
virtual void CallbackData::output(std::ostream &out) const;

1457 6 upcall 0 6 1973 20 CallbackData::upcall 0 1 513 159
/**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */
40
virtual void CallbackData::upcall(void);

1458 14 get_class_type 0 4 1973 28 CallbackData::get_class_type 0 1 514 0
53
static TypeHandle CallbackData::get_class_type(void);

1459 13 ~CallbackData 0 4 1973 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1460 20 PythonCallbackObject 0 4 1974 42 PythonCallbackObject::PythonCallbackObject 0 2 515 516 10
/**
 *
 */
177
PythonCallbackObject::PythonCallbackObject(PyObject *function = (& ::_Py_NoneStruct));
inline PythonCallbackObject::PythonCallbackObject(PythonCallbackObject const &) = default;

1461 12 operator new 0 4 1974 34 PythonCallbackObject::operator new 0 1 517 0
144
inline void *PythonCallbackObject::operator new(std::size_t size);
inline void *PythonCallbackObject::operator new(std::size_t size, void *ptr);

1462 15 operator delete 0 4 1974 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1463 12 validate_ptr 0 4 1974 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1464 12 set_function 0 4 1974 34 PythonCallbackObject::set_function 0 1 518 126
/**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */
60
void PythonCallbackObject::set_function(PyObject *function);

1465 12 get_function 0 4 1974 34 PythonCallbackObject::get_function 0 1 519 64
/**
 * Returns the function that is called for the callback.
 */
51
PyObject *PythonCallbackObject::get_function(void);

1466 14 get_class_type 0 4 1974 36 PythonCallbackObject::get_class_type 0 1 520 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1467 7 TimeVal 0 4 1975 16 TimeVal::TimeVal 0 2 521 522 10
/**
 *
 */
82
inline TimeVal::TimeVal(void);
inline TimeVal::TimeVal(TimeVal const &) = default;

1468 7 get_sec 0 4 1975 16 TimeVal::get_sec 0 1 523 10
/**
 *
 */
42
inline ulong TimeVal::get_sec(void) const;

1469 8 get_usec 0 4 1975 17 TimeVal::get_usec 0 1 524 10
/**
 *
 */
43
inline ulong TimeVal::get_usec(void) const;

1470 6 get_tv 0 20 1975 15 TimeVal::get_tv 0 0 32
getter for ulong TimeVal::tv[2];
35
ulong *TimeVal::get_tv(void) const;

1471 6 set_tv 0 36 1975 15 TimeVal::set_tv 0 0 32
setter for ulong TimeVal::tv[2];
37
void TimeVal::set_tv(ulong value[2]);

1472 8 ~TimeVal 0 4 1975 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1473 11 ClockObject 0 4 1979 24 ClockObject::ClockObject 0 2 525 526 22
/**
 *
 */

/**
 *
 */
126
ClockObject::ClockObject(ClockObject::Mode mode = ::ClockObject::M_normal);
ClockObject::ClockObject(ClockObject const &copy);

1474 8 set_mode 0 4 1979 21 ClockObject::set_mode 0 1 527 1841
/**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */
51
void ClockObject::set_mode(ClockObject::Mode mode);

1475 8 get_mode 0 4 1979 21 ClockObject::get_mode 0 1 528 66
/**
 * Returns the current mode of the clock.  See set_mode().
 */
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1476 14 get_frame_time 0 4 1979 27 ClockObject::get_frame_time 0 1 529 350
/**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */
103
inline double ClockObject::get_frame_time(Thread *current_thread = Thread::get_current_thread()) const;

1477 13 get_real_time 0 4 1979 26 ClockObject::get_real_time 0 1 530 434
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */
53
inline double ClockObject::get_real_time(void) const;

1478 13 get_long_time 0 4 1979 26 ClockObject::get_long_time 0 1 531 440
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */
53
inline double ClockObject::get_long_time(void) const;

1479 5 reset 0 4 1979 18 ClockObject::reset 0 1 532 75
/**
 * Simultaneously resets both the time and the frame count to zero.
 */
37
inline void ClockObject::reset(void);

1480 13 set_real_time 0 4 1979 26 ClockObject::set_real_time 0 1 533 316
/**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */
45
void ClockObject::set_real_time(double time);

1481 14 set_frame_time 0 4 1979 27 ClockObject::set_frame_time 0 1 534 215
/**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */
101
void ClockObject::set_frame_time(double time, Thread *current_thread = Thread::get_current_thread());

1482 15 set_frame_count 0 4 1979 28 ClockObject::set_frame_count 0 1 535 132
/**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */
106
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = Thread::get_current_thread());

1483 15 get_frame_count 0 4 1979 28 ClockObject::get_frame_count 0 1 536 195
/**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */
101
inline int ClockObject::get_frame_count(Thread *current_thread = Thread::get_current_thread()) const;

1484 18 get_net_frame_rate 0 4 1979 31 ClockObject::get_net_frame_rate 0 1 537 245
/**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */
107
inline double ClockObject::get_net_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1485 6 get_dt 0 4 1979 19 ClockObject::get_dt 0 1 538 130
/**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */
95
inline double ClockObject::get_dt(Thread *current_thread = Thread::get_current_thread()) const;

1486 6 set_dt 0 4 1979 19 ClockObject::set_dt 0 1 539 291
/**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */
36
void ClockObject::set_dt(double dt);

1487 14 set_frame_rate 0 4 1979 27 ClockObject::set_frame_rate 0 1 540 291
/**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */
52
void ClockObject::set_frame_rate(double frame_rate);

1488 10 get_max_dt 0 4 1979 23 ClockObject::get_max_dt 0 1 541 106
/**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */
50
inline double ClockObject::get_max_dt(void) const;

1489 10 set_max_dt 0 4 1979 23 ClockObject::set_max_dt 0 1 542 511
/**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */
51
inline void ClockObject::set_max_dt(double max_dt);

1490 18 get_degrade_factor 0 4 1979 31 ClockObject::get_degrade_factor 0 1 543 265
/**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
58
inline double ClockObject::get_degrade_factor(void) const;

1491 18 set_degrade_factor 0 4 1979 31 ClockObject::set_degrade_factor 0 1 544 262
/**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1492 31 set_average_frame_rate_interval 0 4 1979 44 ClockObject::set_average_frame_rate_interval 0 1 545 393
/**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1493 31 get_average_frame_rate_interval 0 4 1979 44 ClockObject::get_average_frame_rate_interval 0 1 546 162
/**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1494 22 get_average_frame_rate 0 4 1979 35 ClockObject::get_average_frame_rate 0 1 547 214
/**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */
104
double ClockObject::get_average_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1495 22 get_max_frame_duration 0 4 1979 35 ClockObject::get_max_frame_duration 0 1 548 105
/**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */
104
double ClockObject::get_max_frame_duration(Thread *current_thread = Thread::get_current_thread()) const;

1496 25 calc_frame_rate_deviation 0 4 1979 38 ClockObject::calc_frame_rate_deviation 0 1 549 539
/**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */
107
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = Thread::get_current_thread()) const;

1497 4 tick 0 4 1979 17 ClockObject::tick 0 1 550 285
/**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */
78
void ClockObject::tick(Thread *current_thread = Thread::get_current_thread());

1498 15 sync_frame_time 0 4 1979 28 ClockObject::sync_frame_time 0 1 551 417
/**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */
89
void ClockObject::sync_frame_time(Thread *current_thread = Thread::get_current_thread());

1499 12 check_errors 0 4 1979 25 ClockObject::check_errors 0 1 552 322
/**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */
62
inline bool ClockObject::check_errors(Thread *current_thread);

1500 16 get_global_clock 0 4 1979 29 ClockObject::get_global_clock 0 1 553 159
/**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */
63
static inline ClockObject *ClockObject::get_global_clock(void);

1501 14 get_class_type 0 4 1979 27 ClockObject::get_class_type 0 1 554 0
52
static TypeHandle ClockObject::get_class_type(void);

1502 24 parse_color_space_string 0 1 0 24 parse_color_space_string 0 1 953 0
60
ColorSpace parse_color_space_string(std::string const &str);

1503 18 format_color_space 0 1 0 18 format_color_space 0 1 954 0
46
std::string format_color_space(ColorSpace cs);

1504 14 get_model_path 0 1 0 14 get_model_path 0 1 955 0
47
ConfigVariableSearchPath &get_model_path(void);

1505 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 956 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1506 9 cache_ref 0 4 1983 28 CopyOnWriteObject::cache_ref 0 1 555 62
/**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */
53
inline void CopyOnWriteObject::cache_ref(void) const;

1507 11 cache_unref 0 4 1983 30 CopyOnWriteObject::cache_unref 0 1 556 64
/**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */
55
inline bool CopyOnWriteObject::cache_unref(void) const;

1508 14 get_class_type 0 4 1983 33 CopyOnWriteObject::get_class_type 0 1 557 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1509 18 ~CopyOnWriteObject 0 4 1983 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1510 22 upcast_to_DatagramSink 0 12 1984 38 DatagramBuffer::upcast_to_DatagramSink 0 1 561 42
upcast from DatagramBuffer to DatagramSink
59
DatagramSink *DatagramBuffer::upcast_to_DatagramSink(void);

1511 26 downcast_to_DatagramBuffer 0 12 1954 40 DatagramSink::downcast_to_DatagramBuffer 0 0 44
downcast from DatagramSink to DatagramBuffer
63
DatagramBuffer *DatagramSink::downcast_to_DatagramBuffer(void);

1512 27 upcast_to_DatagramGenerator 0 12 1984 43 DatagramBuffer::upcast_to_DatagramGenerator 0 1 562 47
upcast from DatagramBuffer to DatagramGenerator
69
DatagramGenerator *DatagramBuffer::upcast_to_DatagramGenerator(void);

1513 26 downcast_to_DatagramBuffer 0 12 1947 45 DatagramGenerator::downcast_to_DatagramBuffer 0 0 49
downcast from DatagramGenerator to DatagramBuffer
68
DatagramBuffer *DatagramGenerator::downcast_to_DatagramBuffer(void);

1514 14 DatagramBuffer 0 4 1984 30 DatagramBuffer::DatagramBuffer 0 2 558 559 104
/**
 * Initializes an empty datagram buffer.
 */

/**
 * Initializes the buffer with the given data.
 */
111
inline DatagramBuffer::DatagramBuffer(void);
inline explicit DatagramBuffer::DatagramBuffer(vector_uchar data);

1515 5 clear 0 4 1984 21 DatagramBuffer::clear 0 1 560 38
/**
 * Clears the internal buffer.
 */
40
inline void DatagramBuffer::clear(void);

1516 8 get_data 0 4 1984 24 DatagramBuffer::get_data 0 0 39
/**
 * Returns the internal buffer.
 */
64
inline vector_uchar const &DatagramBuffer::get_data(void) const;

1517 8 set_data 0 4 1984 24 DatagramBuffer::set_data 0 0 52
/**
 * Replaces the data in the internal buffer.
 */
56
inline void DatagramBuffer::set_data(vector_uchar data);

1518 15 ~DatagramBuffer 0 4 1984 31 DatagramBuffer::~DatagramBuffer 0 0 0
38
DatagramBuffer::~DatagramBuffer(void);

1519 17 DatagramInputFile 0 4 1988 36 DatagramInputFile::DatagramInputFile 0 1 563 10
/**
 *
 */
50
inline DatagramInputFile::DatagramInputFile(void);

1520 4 open 0 4 1988 23 DatagramInputFile::open 0 3 564 565 566 432
/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */
206
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(std::istream &in, Filename const &filename = Filename());

1521 10 get_stream 0 4 1988 29 DatagramInputFile::get_stream 0 1 567 61
/**
 * Returns the istream represented by the input file.
 */
57
inline std::istream &DatagramInputFile::get_stream(void);

1522 5 close 0 4 1988 24 DatagramInputFile::close 0 1 568 98
/**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */
36
void DatagramInputFile::close(void);

1523 11 read_header 0 4 1988 30 DatagramInputFile::read_header 0 0 257
/**
 * Reads a sequence of bytes from the beginning of the datagram file.  This
 * may be called any number of times after the file has been opened and before
 * the first datagram is read.  It may not be called once the first datagram
 * has been read.
 */
80
bool DatagramInputFile::read_header(std::string &header, std::size_t num_bytes);

1524 18 DatagramOutputFile 0 4 1989 38 DatagramOutputFile::DatagramOutputFile 0 1 569 10
/**
 *
 */
52
inline DatagramOutputFile::DatagramOutputFile(void);

1525 4 open 0 4 1989 24 DatagramOutputFile::open 0 3 570 571 572 434
/**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */

/**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */
210
bool DatagramOutputFile::open(FileReference const *file);
inline bool DatagramOutputFile::open(Filename const &filename);
bool DatagramOutputFile::open(std::ostream &out, Filename const &filename = Filename());

1526 5 close 0 4 1989 25 DatagramOutputFile::close 0 1 573 99
/**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */
37
void DatagramOutputFile::close(void);

1527 12 write_header 0 4 1989 32 DatagramOutputFile::write_header 0 1 574 256
/**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */
65
bool DatagramOutputFile::write_header(std::string const &header);

1528 10 get_stream 0 4 1989 30 DatagramOutputFile::get_stream 0 0 62
/**
 * Returns the ostream represented by the output file.
 */
58
inline std::ostream &DatagramOutputFile::get_stream(void);

1529 13 DoubleBitMask 0 4 1991 45 DoubleBitMask< BitMaskNative >::DoubleBitMask 0 3 575 576 577 0
245
constexpr DoubleBitMask< BitMaskNative >::DoubleBitMask(void) = default;
DoubleBitMask< BitMaskNative >::DoubleBitMask(PyObject *init_value);
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(DoubleBitMask< BitMaskNative > const &) = default;

1530 6 all_on 0 4 1991 38 DoubleBitMask< BitMaskNative >::all_on 0 1 578 0
90
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_on(void);

1531 7 all_off 0 4 1991 39 DoubleBitMask< BitMaskNative >::all_off 0 1 579 0
91
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_off(void);

1532 8 lower_on 0 4 1991 40 DoubleBitMask< BitMaskNative >::lower_on 0 1 580 0
99
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::lower_on(int on_bits);

1533 3 bit 0 4 1991 35 DoubleBitMask< BitMaskNative >::bit 0 1 581 0
92
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::bit(int index);

1534 5 range 0 4 1991 37 DoubleBitMask< BitMaskNative >::range 0 1 582 0
106
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::range(int low_bit, int size);

1535 16 has_max_num_bits 0 4 1991 48 DoubleBitMask< BitMaskNative >::has_max_num_bits 0 1 583 0
77
static constexpr bool DoubleBitMask< BitMaskNative >::has_max_num_bits(void);

1536 16 get_max_num_bits 0 4 1991 48 DoubleBitMask< BitMaskNative >::get_max_num_bits 0 1 584 0
76
static constexpr int DoubleBitMask< BitMaskNative >::get_max_num_bits(void);

1537 12 get_num_bits 0 4 1991 44 DoubleBitMask< BitMaskNative >::get_num_bits 0 1 585 0
71
constexpr int DoubleBitMask< BitMaskNative >::get_num_bits(void) const;

1538 7 get_bit 0 4 1991 39 DoubleBitMask< BitMaskNative >::get_bit 0 1 586 0
69
inline bool DoubleBitMask< BitMaskNative >::get_bit(int index) const;

1539 7 set_bit 0 4 1991 39 DoubleBitMask< BitMaskNative >::set_bit 0 1 587 0
63
inline void DoubleBitMask< BitMaskNative >::set_bit(int index);

1540 9 clear_bit 0 4 1991 41 DoubleBitMask< BitMaskNative >::clear_bit 0 1 588 0
65
inline void DoubleBitMask< BitMaskNative >::clear_bit(int index);

1541 10 set_bit_to 0 4 1991 42 DoubleBitMask< BitMaskNative >::set_bit_to 0 1 589 0
78
inline void DoubleBitMask< BitMaskNative >::set_bit_to(int index, bool value);

1542 7 is_zero 0 4 1991 39 DoubleBitMask< BitMaskNative >::is_zero 0 1 590 0
64
inline bool DoubleBitMask< BitMaskNative >::is_zero(void) const;

1543 9 is_all_on 0 4 1991 41 DoubleBitMask< BitMaskNative >::is_all_on 0 1 591 0
66
inline bool DoubleBitMask< BitMaskNative >::is_all_on(void) const;

1544 7 extract 0 4 1991 39 DoubleBitMask< BitMaskNative >::extract 0 1 592 0
85
inline uint64_t DoubleBitMask< BitMaskNative >::extract(int low_bit, int size) const;

1545 5 store 0 4 1991 37 DoubleBitMask< BitMaskNative >::store 0 1 593 0
89
inline void DoubleBitMask< BitMaskNative >::store(uint64_t value, int low_bit, int size);

1546 10 has_any_of 0 4 1991 42 DoubleBitMask< BitMaskNative >::has_any_of 0 1 594 0
84
inline bool DoubleBitMask< BitMaskNative >::has_any_of(int low_bit, int size) const;

1547 10 has_all_of 0 4 1991 42 DoubleBitMask< BitMaskNative >::has_all_of 0 1 595 0
84
inline bool DoubleBitMask< BitMaskNative >::has_all_of(int low_bit, int size) const;

1548 9 set_range 0 4 1991 41 DoubleBitMask< BitMaskNative >::set_range 0 1 596 0
77
inline void DoubleBitMask< BitMaskNative >::set_range(int low_bit, int size);

1549 11 clear_range 0 4 1991 43 DoubleBitMask< BitMaskNative >::clear_range 0 1 597 0
79
inline void DoubleBitMask< BitMaskNative >::clear_range(int low_bit, int size);

1550 12 set_range_to 0 4 1991 44 DoubleBitMask< BitMaskNative >::set_range_to 0 1 598 0
92
inline void DoubleBitMask< BitMaskNative >::set_range_to(bool value, int low_bit, int size);

1551 15 get_num_on_bits 0 4 1991 47 DoubleBitMask< BitMaskNative >::get_num_on_bits 0 1 599 0
71
inline int DoubleBitMask< BitMaskNative >::get_num_on_bits(void) const;

1552 16 get_num_off_bits 0 4 1991 48 DoubleBitMask< BitMaskNative >::get_num_off_bits 0 1 600 0
72
inline int DoubleBitMask< BitMaskNative >::get_num_off_bits(void) const;

1553 17 get_lowest_on_bit 0 4 1991 49 DoubleBitMask< BitMaskNative >::get_lowest_on_bit 0 1 601 0
73
inline int DoubleBitMask< BitMaskNative >::get_lowest_on_bit(void) const;

1554 18 get_lowest_off_bit 0 4 1991 50 DoubleBitMask< BitMaskNative >::get_lowest_off_bit 0 1 602 0
74
inline int DoubleBitMask< BitMaskNative >::get_lowest_off_bit(void) const;

1555 18 get_highest_on_bit 0 4 1991 50 DoubleBitMask< BitMaskNative >::get_highest_on_bit 0 1 603 0
74
inline int DoubleBitMask< BitMaskNative >::get_highest_on_bit(void) const;

1556 19 get_highest_off_bit 0 4 1991 51 DoubleBitMask< BitMaskNative >::get_highest_off_bit 0 1 604 0
75
inline int DoubleBitMask< BitMaskNative >::get_highest_off_bit(void) const;

1557 29 get_next_higher_different_bit 0 4 1991 61 DoubleBitMask< BitMaskNative >::get_next_higher_different_bit 0 1 605 0
92
inline int DoubleBitMask< BitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1558 15 invert_in_place 0 4 1991 47 DoubleBitMask< BitMaskNative >::invert_in_place 0 1 606 0
66
inline void DoubleBitMask< BitMaskNative >::invert_in_place(void);

1559 18 has_bits_in_common 0 4 1991 50 DoubleBitMask< BitMaskNative >::has_bits_in_common 0 1 607 0
114
inline bool DoubleBitMask< BitMaskNative >::has_bits_in_common(DoubleBitMask< BitMaskNative > const &other) const;

1560 5 clear 0 4 1991 37 DoubleBitMask< BitMaskNative >::clear 0 1 608 0
56
inline void DoubleBitMask< BitMaskNative >::clear(void);

1561 6 output 0 4 1991 38 DoubleBitMask< BitMaskNative >::output 0 1 609 0
69
void DoubleBitMask< BitMaskNative >::output(std::ostream &out) const;

1562 13 output_binary 0 4 1991 45 DoubleBitMask< BitMaskNative >::output_binary 0 1 610 0
98
void DoubleBitMask< BitMaskNative >::output_binary(std::ostream &out, int spaces_every = 4) const;

1563 10 output_hex 0 4 1991 42 DoubleBitMask< BitMaskNative >::output_hex 0 1 611 0
95
void DoubleBitMask< BitMaskNative >::output_hex(std::ostream &out, int spaces_every = 4) const;

1564 5 write 0 4 1991 37 DoubleBitMask< BitMaskNative >::write 0 1 612 0
90
void DoubleBitMask< BitMaskNative >::write(std::ostream &out, int indent_level = 0) const;

1565 11 operator == 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator == 0 1 613 0
107
inline bool DoubleBitMask< BitMaskNative >::operator ==(DoubleBitMask< BitMaskNative > const &other) const;

1566 11 operator != 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator != 0 1 614 0
107
inline bool DoubleBitMask< BitMaskNative >::operator !=(DoubleBitMask< BitMaskNative > const &other) const;

1567 10 operator < 0 4 1991 42 DoubleBitMask< BitMaskNative >::operator < 0 1 615 0
106
inline bool DoubleBitMask< BitMaskNative >::operator <(DoubleBitMask< BitMaskNative > const &other) const;

1568 10 compare_to 0 4 1991 42 DoubleBitMask< BitMaskNative >::compare_to 0 1 616 0
105
inline int DoubleBitMask< BitMaskNative >::compare_to(DoubleBitMask< BitMaskNative > const &other) const;

1569 10 operator & 0 4 1991 42 DoubleBitMask< BitMaskNative >::operator & 0 1 617 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator &(DoubleBitMask< BitMaskNative > const &other) const;

1570 10 operator | 0 4 1991 42 DoubleBitMask< BitMaskNative >::operator | 0 1 618 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator |(DoubleBitMask< BitMaskNative > const &other) const;

1571 10 operator ^ 0 4 1991 42 DoubleBitMask< BitMaskNative >::operator ^ 0 1 619 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ^(DoubleBitMask< BitMaskNative > const &other) const;

1572 10 operator ~ 0 68 1991 42 DoubleBitMask< BitMaskNative >::operator ~ 0 1 620 0
93
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ~(void) const;

1573 11 operator << 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator << 0 1 621 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator <<(int shift) const;

1574 11 operator >> 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator >> 0 1 622 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator >>(int shift) const;

1575 11 operator &= 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator &= 0 1 623 0
101
inline void DoubleBitMask< BitMaskNative >::operator &=(DoubleBitMask< BitMaskNative > const &other);

1576 11 operator |= 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator |= 0 1 624 0
101
inline void DoubleBitMask< BitMaskNative >::operator |=(DoubleBitMask< BitMaskNative > const &other);

1577 11 operator ^= 0 4 1991 43 DoubleBitMask< BitMaskNative >::operator ^= 0 1 625 0
101
inline void DoubleBitMask< BitMaskNative >::operator ^=(DoubleBitMask< BitMaskNative > const &other);

1578 12 operator <<= 0 4 1991 44 DoubleBitMask< BitMaskNative >::operator <<= 0 1 626 0
68
inline void DoubleBitMask< BitMaskNative >::operator <<=(int shift);

1579 12 operator >>= 0 4 1991 44 DoubleBitMask< BitMaskNative >::operator >>= 0 1 627 0
68
inline void DoubleBitMask< BitMaskNative >::operator >>=(int shift);

1580 10 __reduce__ 0 4 1991 42 DoubleBitMask< BitMaskNative >::__reduce__ 0 1 628 0
75
PyObject *DoubleBitMask< BitMaskNative >::__reduce__(PyObject *self) const;

1581 14 get_class_type 0 4 1991 46 DoubleBitMask< BitMaskNative >::get_class_type 0 1 629 0
71
static TypeHandle DoubleBitMask< BitMaskNative >::get_class_type(void);

1582 14 ~DoubleBitMask 0 4 1991 46 DoubleBitMask< BitMaskNative >::~DoubleBitMask 0 0 0
53
DoubleBitMask< BitMaskNative >::~DoubleBitMask(void);

1583 13 DoubleBitMask 0 4 1993 51 DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask 0 3 630 631 632 0
269
constexpr DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(void) = default;
DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(PyObject *init_value);
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(DoubleBitMask< DoubleBitMaskNative > const &) = default;

1584 6 all_on 0 4 1993 44 DoubleBitMask< DoubleBitMaskNative >::all_on 0 1 633 0
102
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_on(void);

1585 7 all_off 0 4 1993 45 DoubleBitMask< DoubleBitMaskNative >::all_off 0 1 634 0
103
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_off(void);

1586 8 lower_on 0 4 1993 46 DoubleBitMask< DoubleBitMaskNative >::lower_on 0 1 635 0
111
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::lower_on(int on_bits);

1587 3 bit 0 4 1993 41 DoubleBitMask< DoubleBitMaskNative >::bit 0 1 636 0
104
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::bit(int index);

1588 5 range 0 4 1993 43 DoubleBitMask< DoubleBitMaskNative >::range 0 1 637 0
118
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::range(int low_bit, int size);

1589 16 has_max_num_bits 0 4 1993 54 DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits 0 1 638 0
83
static constexpr bool DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits(void);

1590 16 get_max_num_bits 0 4 1993 54 DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits 0 1 639 0
82
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits(void);

1591 12 get_num_bits 0 4 1993 50 DoubleBitMask< DoubleBitMaskNative >::get_num_bits 0 1 640 0
77
constexpr int DoubleBitMask< DoubleBitMaskNative >::get_num_bits(void) const;

1592 7 get_bit 0 4 1993 45 DoubleBitMask< DoubleBitMaskNative >::get_bit 0 1 641 0
75
inline bool DoubleBitMask< DoubleBitMaskNative >::get_bit(int index) const;

1593 7 set_bit 0 4 1993 45 DoubleBitMask< DoubleBitMaskNative >::set_bit 0 1 642 0
69
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit(int index);

1594 9 clear_bit 0 4 1993 47 DoubleBitMask< DoubleBitMaskNative >::clear_bit 0 1 643 0
71
inline void DoubleBitMask< DoubleBitMaskNative >::clear_bit(int index);

1595 10 set_bit_to 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::set_bit_to 0 1 644 0
84
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit_to(int index, bool value);

1596 7 is_zero 0 4 1993 45 DoubleBitMask< DoubleBitMaskNative >::is_zero 0 1 645 0
70
inline bool DoubleBitMask< DoubleBitMaskNative >::is_zero(void) const;

1597 9 is_all_on 0 4 1993 47 DoubleBitMask< DoubleBitMaskNative >::is_all_on 0 1 646 0
72
inline bool DoubleBitMask< DoubleBitMaskNative >::is_all_on(void) const;

1598 7 extract 0 4 1993 45 DoubleBitMask< DoubleBitMaskNative >::extract 0 1 647 0
91
inline uint64_t DoubleBitMask< DoubleBitMaskNative >::extract(int low_bit, int size) const;

1599 5 store 0 4 1993 43 DoubleBitMask< DoubleBitMaskNative >::store 0 1 648 0
95
inline void DoubleBitMask< DoubleBitMaskNative >::store(uint64_t value, int low_bit, int size);

1600 10 has_any_of 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::has_any_of 0 1 649 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_any_of(int low_bit, int size) const;

1601 10 has_all_of 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::has_all_of 0 1 650 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_all_of(int low_bit, int size) const;

1602 9 set_range 0 4 1993 47 DoubleBitMask< DoubleBitMaskNative >::set_range 0 1 651 0
83
inline void DoubleBitMask< DoubleBitMaskNative >::set_range(int low_bit, int size);

1603 11 clear_range 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::clear_range 0 1 652 0
85
inline void DoubleBitMask< DoubleBitMaskNative >::clear_range(int low_bit, int size);

1604 12 set_range_to 0 4 1993 50 DoubleBitMask< DoubleBitMaskNative >::set_range_to 0 1 653 0
98
inline void DoubleBitMask< DoubleBitMaskNative >::set_range_to(bool value, int low_bit, int size);

1605 15 get_num_on_bits 0 4 1993 53 DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits 0 1 654 0
77
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits(void) const;

1606 16 get_num_off_bits 0 4 1993 54 DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits 0 1 655 0
78
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits(void) const;

1607 17 get_lowest_on_bit 0 4 1993 55 DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit 0 1 656 0
79
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit(void) const;

1608 18 get_lowest_off_bit 0 4 1993 56 DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit 0 1 657 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit(void) const;

1609 18 get_highest_on_bit 0 4 1993 56 DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit 0 1 658 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit(void) const;

1610 19 get_highest_off_bit 0 4 1993 57 DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit 0 1 659 0
81
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit(void) const;

1611 29 get_next_higher_different_bit 0 4 1993 67 DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit 0 1 660 0
98
inline int DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1612 15 invert_in_place 0 4 1993 53 DoubleBitMask< DoubleBitMaskNative >::invert_in_place 0 1 661 0
72
inline void DoubleBitMask< DoubleBitMaskNative >::invert_in_place(void);

1613 18 has_bits_in_common 0 4 1993 56 DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common 0 1 662 0
126
inline bool DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1614 5 clear 0 4 1993 43 DoubleBitMask< DoubleBitMaskNative >::clear 0 1 663 0
62
inline void DoubleBitMask< DoubleBitMaskNative >::clear(void);

1615 6 output 0 4 1993 44 DoubleBitMask< DoubleBitMaskNative >::output 0 1 664 0
75
void DoubleBitMask< DoubleBitMaskNative >::output(std::ostream &out) const;

1616 13 output_binary 0 4 1993 51 DoubleBitMask< DoubleBitMaskNative >::output_binary 0 1 665 0
104
void DoubleBitMask< DoubleBitMaskNative >::output_binary(std::ostream &out, int spaces_every = 4) const;

1617 10 output_hex 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::output_hex 0 1 666 0
101
void DoubleBitMask< DoubleBitMaskNative >::output_hex(std::ostream &out, int spaces_every = 4) const;

1618 5 write 0 4 1993 43 DoubleBitMask< DoubleBitMaskNative >::write 0 1 667 0
96
void DoubleBitMask< DoubleBitMaskNative >::write(std::ostream &out, int indent_level = 0) const;

1619 11 operator == 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator == 0 1 668 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator ==(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1620 11 operator != 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator != 0 1 669 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator !=(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1621 10 operator < 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::operator < 0 1 670 0
118
inline bool DoubleBitMask< DoubleBitMaskNative >::operator <(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1622 10 compare_to 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::compare_to 0 1 671 0
117
inline int DoubleBitMask< DoubleBitMaskNative >::compare_to(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1623 10 operator & 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::operator & 0 1 672 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator &(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1624 10 operator | 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::operator | 0 1 673 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator |(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1625 10 operator ^ 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::operator ^ 0 1 674 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ^(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1626 10 operator ~ 0 68 1993 48 DoubleBitMask< DoubleBitMaskNative >::operator ~ 0 1 675 0
105
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ~(void) const;

1627 11 operator << 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator << 0 1 676 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator <<(int shift) const;

1628 11 operator >> 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator >> 0 1 677 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator >>(int shift) const;

1629 11 operator &= 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator &= 0 1 678 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator &=(DoubleBitMask< DoubleBitMaskNative > const &other);

1630 11 operator |= 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator |= 0 1 679 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator |=(DoubleBitMask< DoubleBitMaskNative > const &other);

1631 11 operator ^= 0 4 1993 49 DoubleBitMask< DoubleBitMaskNative >::operator ^= 0 1 680 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator ^=(DoubleBitMask< DoubleBitMaskNative > const &other);

1632 12 operator <<= 0 4 1993 50 DoubleBitMask< DoubleBitMaskNative >::operator <<= 0 1 681 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator <<=(int shift);

1633 12 operator >>= 0 4 1993 50 DoubleBitMask< DoubleBitMaskNative >::operator >>= 0 1 682 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator >>=(int shift);

1634 10 __reduce__ 0 4 1993 48 DoubleBitMask< DoubleBitMaskNative >::__reduce__ 0 1 683 0
81
PyObject *DoubleBitMask< DoubleBitMaskNative >::__reduce__(PyObject *self) const;

1635 14 get_class_type 0 4 1993 52 DoubleBitMask< DoubleBitMaskNative >::get_class_type 0 1 684 0
77
static TypeHandle DoubleBitMask< DoubleBitMaskNative >::get_class_type(void);

1636 14 ~DoubleBitMask 0 4 1993 52 DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask 0 0 0
59
DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask(void);

1637 6 lstick 0 4 1996 21 GamepadButton::lstick 0 1 687 0
48
static ButtonHandle GamepadButton::lstick(void);

1638 6 rstick 0 4 1996 21 GamepadButton::rstick 0 1 688 0
48
static ButtonHandle GamepadButton::rstick(void);

1639 9 lshoulder 0 4 1996 24 GamepadButton::lshoulder 0 1 689 0
51
static ButtonHandle GamepadButton::lshoulder(void);

1640 9 rshoulder 0 4 1996 24 GamepadButton::rshoulder 0 1 690 0
51
static ButtonHandle GamepadButton::rshoulder(void);

1641 8 ltrigger 0 4 1996 23 GamepadButton::ltrigger 0 1 691 0
50
static ButtonHandle GamepadButton::ltrigger(void);

1642 8 rtrigger 0 4 1996 23 GamepadButton::rtrigger 0 1 692 0
50
static ButtonHandle GamepadButton::rtrigger(void);

1643 5 lgrip 0 4 1996 20 GamepadButton::lgrip 0 1 693 0
47
static ButtonHandle GamepadButton::lgrip(void);

1644 5 rgrip 0 4 1996 20 GamepadButton::rgrip 0 1 694 0
47
static ButtonHandle GamepadButton::rgrip(void);

1645 9 dpad_left 0 4 1996 24 GamepadButton::dpad_left 0 1 695 0
51
static ButtonHandle GamepadButton::dpad_left(void);

1646 10 dpad_right 0 4 1996 25 GamepadButton::dpad_right 0 1 696 0
52
static ButtonHandle GamepadButton::dpad_right(void);

1647 7 dpad_up 0 4 1996 22 GamepadButton::dpad_up 0 1 697 0
49
static ButtonHandle GamepadButton::dpad_up(void);

1648 9 dpad_down 0 4 1996 24 GamepadButton::dpad_down 0 1 698 0
51
static ButtonHandle GamepadButton::dpad_down(void);

1649 4 back 0 4 1996 19 GamepadButton::back 0 1 699 0
46
static ButtonHandle GamepadButton::back(void);

1650 5 guide 0 4 1996 20 GamepadButton::guide 0 1 700 0
47
static ButtonHandle GamepadButton::guide(void);

1651 5 start 0 4 1996 20 GamepadButton::start 0 1 701 0
47
static ButtonHandle GamepadButton::start(void);

1652 4 next 0 4 1996 19 GamepadButton::next 0 1 702 0
46
static ButtonHandle GamepadButton::next(void);

1653 8 previous 0 4 1996 23 GamepadButton::previous 0 1 703 0
50
static ButtonHandle GamepadButton::previous(void);

1654 6 face_a 0 4 1996 21 GamepadButton::face_a 0 1 704 0
48
static ButtonHandle GamepadButton::face_a(void);

1655 6 face_b 0 4 1996 21 GamepadButton::face_b 0 1 705 0
48
static ButtonHandle GamepadButton::face_b(void);

1656 6 face_c 0 4 1996 21 GamepadButton::face_c 0 1 706 0
48
static ButtonHandle GamepadButton::face_c(void);

1657 6 face_x 0 4 1996 21 GamepadButton::face_x 0 1 707 0
48
static ButtonHandle GamepadButton::face_x(void);

1658 6 face_y 0 4 1996 21 GamepadButton::face_y 0 1 708 0
48
static ButtonHandle GamepadButton::face_y(void);

1659 6 face_z 0 4 1996 21 GamepadButton::face_z 0 1 709 0
48
static ButtonHandle GamepadButton::face_z(void);

1660 6 face_1 0 4 1996 21 GamepadButton::face_1 0 1 710 0
48
static ButtonHandle GamepadButton::face_1(void);

1661 6 face_2 0 4 1996 21 GamepadButton::face_2 0 1 711 0
48
static ButtonHandle GamepadButton::face_2(void);

1662 7 trigger 0 4 1996 22 GamepadButton::trigger 0 1 712 74
// Flight stick buttons, takes zero-based index.  First is always trigger.
49
static ButtonHandle GamepadButton::trigger(void);

1663 8 joystick 0 4 1996 23 GamepadButton::joystick 0 1 713 169
/**
 * Returns the ButtonHandle associated with the particular numbered joystick
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
63
static ButtonHandle GamepadButton::joystick(int button_number);

1664 6 hat_up 0 4 1996 21 GamepadButton::hat_up 0 1 714 0
48
static ButtonHandle GamepadButton::hat_up(void);

1665 8 hat_down 0 4 1996 23 GamepadButton::hat_down 0 1 715 0
50
static ButtonHandle GamepadButton::hat_down(void);

1666 8 hat_left 0 4 1996 23 GamepadButton::hat_left 0 1 716 0
50
static ButtonHandle GamepadButton::hat_left(void);

1667 9 hat_right 0 4 1996 24 GamepadButton::hat_right 0 1 717 0
51
static ButtonHandle GamepadButton::hat_right(void);

1668 13 GamepadButton 0 4 1996 28 GamepadButton::GamepadButton 0 2 685 686 0
122
inline GamepadButton::GamepadButton(void) = default;
inline GamepadButton::GamepadButton(GamepadButton const &) = default;

1669 14 ~GamepadButton 0 4 1996 29 GamepadButton::~GamepadButton 0 0 0
36
GamepadButton::~GamepadButton(void);

1670 9 ascii_key 0 4 1997 25 KeyboardButton::ascii_key 0 1 720 144
/**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */
69
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);

1671 5 space 0 4 1997 21 KeyboardButton::space 0 1 721 0
48
static ButtonHandle KeyboardButton::space(void);

1672 9 backspace 0 4 1997 25 KeyboardButton::backspace 0 1 722 0
52
static ButtonHandle KeyboardButton::backspace(void);

1673 3 tab 0 4 1997 19 KeyboardButton::tab 0 1 723 0
46
static ButtonHandle KeyboardButton::tab(void);

1674 5 enter 0 4 1997 21 KeyboardButton::enter 0 1 724 0
48
static ButtonHandle KeyboardButton::enter(void);

1675 6 escape 0 4 1997 22 KeyboardButton::escape 0 1 725 0
49
static ButtonHandle KeyboardButton::escape(void);

1676 2 f1 0 4 1997 18 KeyboardButton::f1 0 1 726 0
45
static ButtonHandle KeyboardButton::f1(void);

1677 2 f2 0 4 1997 18 KeyboardButton::f2 0 1 727 0
45
static ButtonHandle KeyboardButton::f2(void);

1678 2 f3 0 4 1997 18 KeyboardButton::f3 0 1 728 0
45
static ButtonHandle KeyboardButton::f3(void);

1679 2 f4 0 4 1997 18 KeyboardButton::f4 0 1 729 0
45
static ButtonHandle KeyboardButton::f4(void);

1680 2 f5 0 4 1997 18 KeyboardButton::f5 0 1 730 0
45
static ButtonHandle KeyboardButton::f5(void);

1681 2 f6 0 4 1997 18 KeyboardButton::f6 0 1 731 0
45
static ButtonHandle KeyboardButton::f6(void);

1682 2 f7 0 4 1997 18 KeyboardButton::f7 0 1 732 0
45
static ButtonHandle KeyboardButton::f7(void);

1683 2 f8 0 4 1997 18 KeyboardButton::f8 0 1 733 0
45
static ButtonHandle KeyboardButton::f8(void);

1684 2 f9 0 4 1997 18 KeyboardButton::f9 0 1 734 0
45
static ButtonHandle KeyboardButton::f9(void);

1685 3 f10 0 4 1997 19 KeyboardButton::f10 0 1 735 0
46
static ButtonHandle KeyboardButton::f10(void);

1686 3 f11 0 4 1997 19 KeyboardButton::f11 0 1 736 0
46
static ButtonHandle KeyboardButton::f11(void);

1687 3 f12 0 4 1997 19 KeyboardButton::f12 0 1 737 0
46
static ButtonHandle KeyboardButton::f12(void);

1688 3 f13 0 4 1997 19 KeyboardButton::f13 0 1 738 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1689 3 f14 0 4 1997 19 KeyboardButton::f14 0 1 739 0
46
static ButtonHandle KeyboardButton::f14(void);

1690 3 f15 0 4 1997 19 KeyboardButton::f15 0 1 740 0
46
static ButtonHandle KeyboardButton::f15(void);

1691 3 f16 0 4 1997 19 KeyboardButton::f16 0 1 741 0
46
static ButtonHandle KeyboardButton::f16(void);

1692 4 left 0 4 1997 20 KeyboardButton::left 0 1 742 0
47
static ButtonHandle KeyboardButton::left(void);

1693 5 right 0 4 1997 21 KeyboardButton::right 0 1 743 0
48
static ButtonHandle KeyboardButton::right(void);

1694 2 up 0 4 1997 18 KeyboardButton::up 0 1 744 0
45
static ButtonHandle KeyboardButton::up(void);

1695 4 down 0 4 1997 20 KeyboardButton::down 0 1 745 0
47
static ButtonHandle KeyboardButton::down(void);

1696 7 page_up 0 4 1997 23 KeyboardButton::page_up 0 1 746 0
50
static ButtonHandle KeyboardButton::page_up(void);

1697 9 page_down 0 4 1997 25 KeyboardButton::page_down 0 1 747 0
52
static ButtonHandle KeyboardButton::page_down(void);

1698 4 home 0 4 1997 20 KeyboardButton::home 0 1 748 0
47
static ButtonHandle KeyboardButton::home(void);

1699 3 end 0 4 1997 19 KeyboardButton::end 0 1 749 0
46
static ButtonHandle KeyboardButton::end(void);

1700 6 insert 0 4 1997 22 KeyboardButton::insert 0 1 750 0
49
static ButtonHandle KeyboardButton::insert(void);

1701 3 del 0 4 1997 19 KeyboardButton::del 0 1 751 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1702 4 help 0 4 1997 20 KeyboardButton::help 0 1 752 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1703 4 menu 0 4 1997 20 KeyboardButton::menu 0 1 753 0
47
static ButtonHandle KeyboardButton::menu(void);

1704 5 shift 0 4 1997 21 KeyboardButton::shift 0 1 754 0
48
static ButtonHandle KeyboardButton::shift(void);

1705 7 control 0 4 1997 23 KeyboardButton::control 0 1 755 0
50
static ButtonHandle KeyboardButton::control(void);

1706 3 alt 0 4 1997 19 KeyboardButton::alt 0 1 756 0
46
static ButtonHandle KeyboardButton::alt(void);

1707 4 meta 0 4 1997 20 KeyboardButton::meta 0 1 757 0
47
static ButtonHandle KeyboardButton::meta(void);

1708 9 caps_lock 0 4 1997 25 KeyboardButton::caps_lock 0 1 758 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1709 10 shift_lock 0 4 1997 26 KeyboardButton::shift_lock 0 1 759 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1710 8 num_lock 0 4 1997 24 KeyboardButton::num_lock 0 1 760 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1711 11 scroll_lock 0 4 1997 27 KeyboardButton::scroll_lock 0 1 761 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1712 12 print_screen 0 4 1997 28 KeyboardButton::print_screen 0 1 762 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1713 5 pause 0 4 1997 21 KeyboardButton::pause 0 1 763 0
48
static ButtonHandle KeyboardButton::pause(void);

1714 6 lshift 0 4 1997 22 KeyboardButton::lshift 0 1 764 0
49
static ButtonHandle KeyboardButton::lshift(void);

1715 6 rshift 0 4 1997 22 KeyboardButton::rshift 0 1 765 0
49
static ButtonHandle KeyboardButton::rshift(void);

1716 8 lcontrol 0 4 1997 24 KeyboardButton::lcontrol 0 1 766 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1717 8 rcontrol 0 4 1997 24 KeyboardButton::rcontrol 0 1 767 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1718 4 lalt 0 4 1997 20 KeyboardButton::lalt 0 1 768 0
47
static ButtonHandle KeyboardButton::lalt(void);

1719 4 ralt 0 4 1997 20 KeyboardButton::ralt 0 1 769 0
47
static ButtonHandle KeyboardButton::ralt(void);

1720 5 lmeta 0 4 1997 21 KeyboardButton::lmeta 0 1 770 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1721 5 rmeta 0 4 1997 21 KeyboardButton::rmeta 0 1 771 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1722 14 KeyboardButton 0 4 1997 30 KeyboardButton::KeyboardButton 0 2 718 719 0
127
inline KeyboardButton::KeyboardButton(void) = default;
inline KeyboardButton::KeyboardButton(KeyboardButton const &) = default;

1723 15 ~KeyboardButton 0 4 1997 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1724 13 load_prc_file 0 1 0 13 load_prc_file 0 1 957 1206
/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */

/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */
52
ConfigPage *load_prc_file(Filename const &filename);

1725 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 958 794
/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */

/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */
81
ConfigPage *load_prc_file_data(std::string const &name, std::string const &data);

1726 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 959 0
39
bool unload_prc_file(ConfigPage *page);

1727 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 960 0
39
void hash_prc_variables(HashVal &hash);

1728 15 ModifierButtons 0 4 1998 32 ModifierButtons::ModifierButtons 0 2 772 773 22
/**
 *
 */

/**
 *
 */
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1729 16 ~ModifierButtons 0 4 1998 33 ModifierButtons::~ModifierButtons 0 0 10
/**
 *
 */
40
ModifierButtons::~ModifierButtons(void);

1730 10 operator = 0 4 1998 27 ModifierButtons::operator = 0 1 774 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1731 11 operator == 0 4 1998 28 ModifierButtons::operator == 0 1 775 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1732 11 operator != 0 4 1998 28 ModifierButtons::operator != 0 1 776 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1733 10 operator < 0 4 1998 27 ModifierButtons::operator < 0 1 777 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1734 10 operator & 0 4 1998 27 ModifierButtons::operator & 0 1 778 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1735 10 operator | 0 4 1998 27 ModifierButtons::operator | 0 1 779 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1736 11 operator &= 0 4 1998 28 ModifierButtons::operator &= 0 1 780 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1737 11 operator |= 0 4 1998 28 ModifierButtons::operator |= 0 1 781 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1738 15 set_button_list 0 4 1998 32 ModifierButtons::set_button_list 0 1 782 374
/**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1739 7 matches 0 4 1998 24 ModifierButtons::matches 0 1 783 232
/**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1740 10 add_button 0 4 1998 27 ModifierButtons::add_button 0 1 784 248
/**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */
54
bool ModifierButtons::add_button(ButtonHandle button);

1741 10 has_button 0 4 1998 27 ModifierButtons::has_button 0 1 785 109
/**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1742 13 remove_button 0 4 1998 30 ModifierButtons::remove_button 0 1 786 313
/**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */
57
bool ModifierButtons::remove_button(ButtonHandle button);

1743 15 get_num_buttons 0 4 1998 32 ModifierButtons::get_num_buttons 0 1 787 143
/**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */
56
inline int ModifierButtons::get_num_buttons(void) const;

1744 10 get_button 0 4 1998 27 ModifierButtons::get_button 0 1 788 185
/**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1745 11 button_down 0 4 1998 28 ModifierButtons::button_down 0 1 789 305
/**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
55
bool ModifierButtons::button_down(ButtonHandle button);

1746 9 button_up 0 4 1998 26 ModifierButtons::button_up 0 1 790 306
/**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
53
bool ModifierButtons::button_up(ButtonHandle button);

1747 14 all_buttons_up 0 4 1998 31 ModifierButtons::all_buttons_up 0 1 791 66
/**
 * Marks all monitored buttons as being in the "up" state.
 */
50
inline void ModifierButtons::all_buttons_up(void);

1748 7 is_down 0 4 1998 24 ModifierButtons::is_down 0 2 792 793 264
/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */

/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1749 11 is_any_down 0 4 1998 28 ModifierButtons::is_any_down 0 1 794 109
/**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */
53
inline bool ModifierButtons::is_any_down(void) const;

1750 10 get_prefix 0 4 1998 27 ModifierButtons::get_prefix 0 1 795 150
/**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */
52
std::string ModifierButtons::get_prefix(void) const;

1751 6 output 0 4 1998 23 ModifierButtons::output 0 1 796 69
/**
 * Writes a one-line summary of the buttons known to be down.
 */
54
void ModifierButtons::output(std::ostream &out) const;

1752 5 write 0 4 1998 22 ModifierButtons::write 0 1 797 123
/**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */
53
void ModifierButtons::write(std::ostream &out) const;

1753 6 button 0 4 1999 19 MouseButton::button 0 1 800 166
/**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
59
static ButtonHandle MouseButton::button(int button_number);

1754 3 one 0 4 1999 16 MouseButton::one 0 1 801 75
/**
 * Returns the ButtonHandle associated with the first mouse button.
 */
43
static ButtonHandle MouseButton::one(void);

1755 3 two 0 4 1999 16 MouseButton::two 0 1 802 76
/**
 * Returns the ButtonHandle associated with the second mouse button.
 */
43
static ButtonHandle MouseButton::two(void);

1756 5 three 0 4 1999 18 MouseButton::three 0 1 803 75
/**
 * Returns the ButtonHandle associated with the third mouse button.
 */
45
static ButtonHandle MouseButton::three(void);

1757 4 four 0 4 1999 17 MouseButton::four 0 1 804 76
/**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */
44
static ButtonHandle MouseButton::four(void);

1758 4 five 0 4 1999 17 MouseButton::five 0 1 805 75
/**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */
44
static ButtonHandle MouseButton::five(void);

1759 8 wheel_up 0 4 1999 21 MouseButton::wheel_up 0 1 806 98
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */
48
static ButtonHandle MouseButton::wheel_up(void);

1760 10 wheel_down 0 4 1999 23 MouseButton::wheel_down 0 1 807 100
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */
50
static ButtonHandle MouseButton::wheel_down(void);

1761 10 wheel_left 0 4 1999 23 MouseButton::wheel_left 0 1 808 148
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
50
static ButtonHandle MouseButton::wheel_left(void);

1762 11 wheel_right 0 4 1999 24 MouseButton::wheel_right 0 1 809 149
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
51
static ButtonHandle MouseButton::wheel_right(void);

1763 15 is_mouse_button 0 4 1999 28 MouseButton::is_mouse_button 0 1 810 117
/**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1764 11 MouseButton 0 4 1999 24 MouseButton::MouseButton 0 2 798 799 0
112
inline MouseButton::MouseButton(void) = default;
inline MouseButton::MouseButton(MouseButton const &) = default;

1765 12 ~MouseButton 0 4 1999 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1766 5 get_x 0 4 2001 18 PointerData::get_x 0 1 813 10
/**
 *
 */
45
inline double PointerData::get_x(void) const;

1767 5 get_y 0 4 2001 18 PointerData::get_y 0 1 814 10
/**
 *
 */
45
inline double PointerData::get_y(void) const;

1768 13 get_in_window 0 4 2001 26 PointerData::get_in_window 0 1 815 157
/**
 * If this returns false, the pointer is not currently present in the window
 * and the values returned by get_x() and get_y() may not be meaningful.
 */
51
inline bool PointerData::get_in_window(void) const;

1769 8 get_type 0 4 2001 21 PointerData::get_type 0 0 47
/**
 * Returns the type of pointing device.
 */
53
inline PointerType PointerData::get_type(void) const;

1770 6 get_id 0 4 2001 19 PointerData::get_id 0 0 273
/**
 * Returns a unique identifier for this pointer.  This is for tracking
 * individual fingers.  This value should not be assumed to have a specific
 * meaning other than that there will not be two different pointers active
 * simultaneously with the same identifier.
 */
43
inline int PointerData::get_id(void) const;

1771 12 get_pressure 0 4 2001 25 PointerData::get_pressure 0 0 119
/**
 * Returns the pressure of the pointer.  For mice, this will be 1.0 if any
 * button is pressed, 0.0 otherwise.
 */
52
inline double PointerData::get_pressure(void) const;

1772 11 PointerData 0 4 2001 24 PointerData::PointerData 0 2 811 812 0
112
inline PointerData::PointerData(void) = default;
inline PointerData::PointerData(PointerData const &) = default;

1773 12 ~PointerData 0 4 2001 25 PointerData::~PointerData 0 0 0
32
PointerData::~PointerData(void);

1774 18 get_node_ref_count 0 4 2003 44 NodeCachedReferenceCount::get_node_ref_count 0 1 816 47
/**
 * Returns the current reference count.
 */
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1775 8 node_ref 0 4 2003 34 NodeCachedReferenceCount::node_ref 0 1 817 349
/**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1776 10 node_unref 0 4 2003 36 NodeCachedReferenceCount::node_unref 0 1 818 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1777 24 test_ref_count_integrity 0 4 2003 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 819 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1778 19 get_referenced_bits 0 4 2003 45 NodeCachedReferenceCount::get_referenced_bits 0 1 820 293
/**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1779 14 get_class_type 0 4 2003 40 NodeCachedReferenceCount::get_class_type 0 1 821 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1780 11 SparseArray 0 4 2005 24 SparseArray::SparseArray 0 3 822 823 824 22
/**
 *
 */

/**
 *
 */
150
inline SparseArray::SparseArray(void);
SparseArray::SparseArray(BitArray const &from);
inline SparseArray::SparseArray(SparseArray const &) = default;

1781 6 all_on 0 4 2005 19 SparseArray::all_on 0 1 825 72
/**
 * Returns a SparseArray with an infinite array of bits, all on.
 */
52
static inline SparseArray SparseArray::all_on(void);

1782 7 all_off 0 4 2005 20 SparseArray::all_off 0 1 826 56
/**
 * Returns a SparseArray whose bits are all off.
 */
53
static inline SparseArray SparseArray::all_off(void);

1783 8 lower_on 0 4 2005 21 SparseArray::lower_on 0 1 827 65
/**
 * Returns a SparseArray whose lower on_bits bits are on.
 */
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1784 3 bit 0 4 2005 16 SparseArray::bit 0 1 828 64
/**
 * Returns a SparseArray with only the indicated bit on.
 */
54
static inline SparseArray SparseArray::bit(int index);

1785 5 range 0 4 2005 18 SparseArray::range 0 1 829 79
/**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1786 16 has_max_num_bits 0 4 2005 29 SparseArray::has_max_num_bits 0 1 830 393
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */
55
static inline bool SparseArray::has_max_num_bits(void);

1787 16 get_max_num_bits 0 4 2005 29 SparseArray::get_max_num_bits 0 1 831 428
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */
54
static inline int SparseArray::get_max_num_bits(void);

1788 12 get_num_bits 0 4 2005 25 SparseArray::get_num_bits 0 1 832 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
49
inline int SparseArray::get_num_bits(void) const;

1789 7 get_bit 0 4 2005 20 SparseArray::get_bit 0 1 833 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
50
inline bool SparseArray::get_bit(int index) const;

1790 7 set_bit 0 4 2005 20 SparseArray::set_bit 0 1 834 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
44
inline void SparseArray::set_bit(int index);

1791 9 clear_bit 0 4 2005 22 SparseArray::clear_bit 0 1 835 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
46
inline void SparseArray::clear_bit(int index);

1792 10 set_bit_to 0 4 2005 23 SparseArray::set_bit_to 0 1 836 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
59
inline void SparseArray::set_bit_to(int index, bool value);

1793 16 get_highest_bits 0 4 2005 29 SparseArray::get_highest_bits 0 1 837 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
54
inline bool SparseArray::get_highest_bits(void) const;

1794 7 is_zero 0 4 2005 20 SparseArray::is_zero 0 1 838 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
45
inline bool SparseArray::is_zero(void) const;

1795 9 is_all_on 0 4 2005 22 SparseArray::is_all_on 0 1 839 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
47
inline bool SparseArray::is_all_on(void) const;

1796 10 has_any_of 0 4 2005 23 SparseArray::has_any_of 0 1 840 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1797 10 has_all_of 0 4 2005 23 SparseArray::has_all_of 0 1 841 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1798 9 set_range 0 4 2005 22 SparseArray::set_range 0 1 842 47
/**
 * Sets the indicated range of bits on.
 */
58
inline void SparseArray::set_range(int low_bit, int size);

1799 11 clear_range 0 4 2005 24 SparseArray::clear_range 0 1 843 48
/**
 * Sets the indicated range of bits off.
 */
60
inline void SparseArray::clear_range(int low_bit, int size);

1800 12 set_range_to 0 4 2005 25 SparseArray::set_range_to 0 1 844 64
/**
 * Sets the indicated range of bits to either on or off.
 */
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1801 15 get_num_on_bits 0 4 2005 28 SparseArray::get_num_on_bits 0 1 845 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
45
int SparseArray::get_num_on_bits(void) const;

1802 16 get_num_off_bits 0 4 2005 29 SparseArray::get_num_off_bits 0 1 846 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
46
int SparseArray::get_num_off_bits(void) const;

1803 17 get_lowest_on_bit 0 4 2005 30 SparseArray::get_lowest_on_bit 0 1 847 146
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */
47
int SparseArray::get_lowest_on_bit(void) const;

1804 18 get_lowest_off_bit 0 4 2005 31 SparseArray::get_lowest_off_bit 0 1 848 146
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */
48
int SparseArray::get_lowest_off_bit(void) const;

1805 18 get_highest_on_bit 0 4 2005 31 SparseArray::get_highest_on_bit 0 1 849 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
48
int SparseArray::get_highest_on_bit(void) const;

1806 19 get_highest_off_bit 0 4 2005 32 SparseArray::get_highest_off_bit 0 1 850 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
49
int SparseArray::get_highest_off_bit(void) const;

1807 29 get_next_higher_different_bit 0 4 2005 42 SparseArray::get_next_higher_different_bit 0 1 851 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1808 15 invert_in_place 0 4 2005 28 SparseArray::invert_in_place 0 1 852 93
/**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */
47
inline void SparseArray::invert_in_place(void);

1809 18 has_bits_in_common 0 4 2005 31 SparseArray::has_bits_in_common 0 1 853 181
/**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1810 5 clear 0 4 2005 18 SparseArray::clear 0 1 854 52
/**
 * Sets all the bits in the SparseArray off.
 */
37
inline void SparseArray::clear(void);

1811 6 output 0 4 2005 19 SparseArray::output 0 1 855 10
/**
 *
 */
50
void SparseArray::output(std::ostream &out) const;

1812 11 operator == 0 4 2005 24 SparseArray::operator == 0 1 856 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1813 11 operator != 0 4 2005 24 SparseArray::operator != 0 1 857 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1814 10 operator < 0 4 2005 23 SparseArray::operator < 0 1 858 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1815 10 compare_to 0 4 2005 23 SparseArray::compare_to 0 1 859 242
/**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */
60
int SparseArray::compare_to(SparseArray const &other) const;

1816 10 operator & 0 4 2005 23 SparseArray::operator & 0 1 860 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1817 10 operator | 0 4 2005 23 SparseArray::operator | 0 1 861 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1818 10 operator ^ 0 4 2005 23 SparseArray::operator ^ 0 1 862 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1819 10 operator ~ 0 68 2005 23 SparseArray::operator ~ 0 1 863 0
55
inline SparseArray SparseArray::operator ~(void) const;

1820 11 operator << 0 4 2005 24 SparseArray::operator << 0 1 864 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1821 11 operator >> 0 4 2005 24 SparseArray::operator >> 0 1 865 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1822 11 operator &= 0 4 2005 24 SparseArray::operator &= 0 1 866 0
56
void SparseArray::operator &=(SparseArray const &other);

1823 11 operator |= 0 4 2005 24 SparseArray::operator |= 0 1 867 0
56
void SparseArray::operator |=(SparseArray const &other);

1824 11 operator ^= 0 4 2005 24 SparseArray::operator ^= 0 1 868 0
56
void SparseArray::operator ^=(SparseArray const &other);

1825 12 operator <<= 0 4 2005 25 SparseArray::operator <<= 0 1 869 0
49
inline void SparseArray::operator <<=(int shift);

1826 12 operator >>= 0 4 2005 25 SparseArray::operator >>= 0 1 870 0
49
inline void SparseArray::operator >>=(int shift);

1827 10 is_inverse 0 4 2005 23 SparseArray::is_inverse 0 1 871 330
/**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */
48
inline bool SparseArray::is_inverse(void) const;

1828 17 get_num_subranges 0 4 2005 30 SparseArray::get_num_subranges 0 1 872 237
/**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */
62
inline std::size_t SparseArray::get_num_subranges(void) const;

1829 18 get_subrange_begin 0 4 2005 31 SparseArray::get_subrange_begin 0 1 873 94
/**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */
64
inline int SparseArray::get_subrange_begin(std::size_t n) const;

1830 16 get_subrange_end 0 4 2005 29 SparseArray::get_subrange_end 0 1 874 104
/**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */
62
inline int SparseArray::get_subrange_end(std::size_t n) const;

1831 12 __getstate__ 0 4 2005 25 SparseArray::__getstate__ 0 1 875 0
48
PyObject *SparseArray::__getstate__(void) const;

1832 12 __setstate__ 0 4 2005 25 SparseArray::__setstate__ 0 1 876 0
48
void SparseArray::__setstate__(PyObject *state);

1833 14 get_class_type 0 4 2005 27 SparseArray::get_class_type 0 1 877 0
52
static TypeHandle SparseArray::get_class_type(void);

1834 12 ~SparseArray 0 4 2005 25 SparseArray::~SparseArray 0 0 0
32
SparseArray::~SparseArray(void);

1835 14 get_value_type 0 6 2006 30 ParamValueBase::get_value_type 0 1 878 52
/**
 * Returns the type of the underlying value.
 */
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1836 6 output 0 6 2006 22 ParamValueBase::output 0 1 879 0
65
virtual void ParamValueBase::output(std::ostream &out) const = 0;

1837 14 get_class_type 0 4 2006 30 ParamValueBase::get_class_type 0 1 880 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1838 18 ParamTypedRefCount 0 4 2007 38 ParamTypedRefCount::ParamTypedRefCount 0 1 881 10
/**
 *
 */
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1839 9 get_value 0 4 2007 29 ParamTypedRefCount::get_value 0 1 882 55
/**
 * Retrieves the value stored in the parameter.
 */
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1840 14 get_class_type 0 4 2007 34 ParamTypedRefCount::get_class_type 0 1 883 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1841 10 ParamValue 0 4 2009 32 ParamValue< string >::ParamValue 0 1 884 0
66
inline ParamValue< string >::ParamValue(std::string const &value);

1842 9 set_value 0 4 2009 31 ParamValue< string >::set_value 0 1 885 0
134
inline void ParamValue< string >::set_value(std::string const &value);
inline void ParamValue< string >::set_value(Type const &value);

1843 9 get_value 0 4 2009 31 ParamValue< string >::get_value 0 1 886 0
70
inline std::string const &ParamValue< string >::get_value(void) const;

1844 14 get_class_type 0 4 2009 36 ParamValue< string >::get_class_type 0 1 887 0
61
static TypeHandle ParamValue< string >::get_class_type(void);

1845 10 ParamValue 0 4 2012 33 ParamValue< wstring >::ParamValue 0 1 888 0
68
inline ParamValue< wstring >::ParamValue(std::wstring const &value);

1846 9 set_value 0 4 2012 32 ParamValue< wstring >::set_value 0 1 889 0
137
inline void ParamValue< wstring >::set_value(std::wstring const &value);
inline void ParamValue< wstring >::set_value(Type const &value);

1847 9 get_value 0 4 2012 32 ParamValue< wstring >::get_value 0 1 890 0
72
inline std::wstring const &ParamValue< wstring >::get_value(void) const;

1848 14 get_class_type 0 4 2012 37 ParamValue< wstring >::get_class_type 0 1 891 0
62
static TypeHandle ParamValue< wstring >::get_class_type(void);

1849 10 ParamValue 0 4 2014 36 ParamValue< LVecBase2d >::ParamValue 0 1 892 0
69
inline ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1850 9 set_value 0 4 2014 35 ParamValue< LVecBase2d >::set_value 0 1 893 0
141
inline void ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);
inline void ParamValue< LVecBase2d >::set_value(Type const &value);

1851 9 get_value 0 4 2014 35 ParamValue< LVecBase2d >::get_value 0 1 894 0
73
inline LVecBase2d const &ParamValue< LVecBase2d >::get_value(void) const;

1852 14 get_class_type 0 4 2014 40 ParamValue< LVecBase2d >::get_class_type 0 1 895 0
65
static TypeHandle ParamValue< LVecBase2d >::get_class_type(void);

1853 10 ParamValue 0 4 2016 36 ParamValue< LVecBase2f >::ParamValue 0 1 896 0
69
inline ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1854 9 set_value 0 4 2016 35 ParamValue< LVecBase2f >::set_value 0 1 897 0
141
inline void ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);
inline void ParamValue< LVecBase2f >::set_value(Type const &value);

1855 9 get_value 0 4 2016 35 ParamValue< LVecBase2f >::get_value 0 1 898 0
73
inline LVecBase2f const &ParamValue< LVecBase2f >::get_value(void) const;

1856 14 get_class_type 0 4 2016 40 ParamValue< LVecBase2f >::get_class_type 0 1 899 0
65
static TypeHandle ParamValue< LVecBase2f >::get_class_type(void);

1857 10 ParamValue 0 4 2018 36 ParamValue< LVecBase2i >::ParamValue 0 1 900 0
69
inline ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1858 9 set_value 0 4 2018 35 ParamValue< LVecBase2i >::set_value 0 1 901 0
141
inline void ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);
inline void ParamValue< LVecBase2i >::set_value(Type const &value);

1859 9 get_value 0 4 2018 35 ParamValue< LVecBase2i >::get_value 0 1 902 0
73
inline LVecBase2i const &ParamValue< LVecBase2i >::get_value(void) const;

1860 14 get_class_type 0 4 2018 40 ParamValue< LVecBase2i >::get_class_type 0 1 903 0
65
static TypeHandle ParamValue< LVecBase2i >::get_class_type(void);

1861 10 ParamValue 0 4 2020 36 ParamValue< LVecBase3d >::ParamValue 0 1 904 0
69
inline ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1862 9 set_value 0 4 2020 35 ParamValue< LVecBase3d >::set_value 0 1 905 0
141
inline void ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);
inline void ParamValue< LVecBase3d >::set_value(Type const &value);

1863 9 get_value 0 4 2020 35 ParamValue< LVecBase3d >::get_value 0 1 906 0
73
inline LVecBase3d const &ParamValue< LVecBase3d >::get_value(void) const;

1864 14 get_class_type 0 4 2020 40 ParamValue< LVecBase3d >::get_class_type 0 1 907 0
65
static TypeHandle ParamValue< LVecBase3d >::get_class_type(void);

1865 10 ParamValue 0 4 2022 36 ParamValue< LVecBase3f >::ParamValue 0 1 908 0
69
inline ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1866 9 set_value 0 4 2022 35 ParamValue< LVecBase3f >::set_value 0 1 909 0
141
inline void ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);
inline void ParamValue< LVecBase3f >::set_value(Type const &value);

1867 9 get_value 0 4 2022 35 ParamValue< LVecBase3f >::get_value 0 1 910 0
73
inline LVecBase3f const &ParamValue< LVecBase3f >::get_value(void) const;

1868 14 get_class_type 0 4 2022 40 ParamValue< LVecBase3f >::get_class_type 0 1 911 0
65
static TypeHandle ParamValue< LVecBase3f >::get_class_type(void);

1869 10 ParamValue 0 4 2024 36 ParamValue< LVecBase3i >::ParamValue 0 1 912 0
69
inline ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1870 9 set_value 0 4 2024 35 ParamValue< LVecBase3i >::set_value 0 1 913 0
141
inline void ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);
inline void ParamValue< LVecBase3i >::set_value(Type const &value);

1871 9 get_value 0 4 2024 35 ParamValue< LVecBase3i >::get_value 0 1 914 0
73
inline LVecBase3i const &ParamValue< LVecBase3i >::get_value(void) const;

1872 14 get_class_type 0 4 2024 40 ParamValue< LVecBase3i >::get_class_type 0 1 915 0
65
static TypeHandle ParamValue< LVecBase3i >::get_class_type(void);

1873 10 ParamValue 0 4 2026 36 ParamValue< LVecBase4d >::ParamValue 0 1 916 0
69
inline ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1874 9 set_value 0 4 2026 35 ParamValue< LVecBase4d >::set_value 0 1 917 0
141
inline void ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);
inline void ParamValue< LVecBase4d >::set_value(Type const &value);

1875 9 get_value 0 4 2026 35 ParamValue< LVecBase4d >::get_value 0 1 918 0
73
inline LVecBase4d const &ParamValue< LVecBase4d >::get_value(void) const;

1876 14 get_class_type 0 4 2026 40 ParamValue< LVecBase4d >::get_class_type 0 1 919 0
65
static TypeHandle ParamValue< LVecBase4d >::get_class_type(void);

1877 10 ParamValue 0 4 2028 36 ParamValue< LVecBase4f >::ParamValue 0 1 920 0
69
inline ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1878 9 set_value 0 4 2028 35 ParamValue< LVecBase4f >::set_value 0 1 921 0
141
inline void ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);
inline void ParamValue< LVecBase4f >::set_value(Type const &value);

1879 9 get_value 0 4 2028 35 ParamValue< LVecBase4f >::get_value 0 1 922 0
73
inline LVecBase4f const &ParamValue< LVecBase4f >::get_value(void) const;

1880 14 get_class_type 0 4 2028 40 ParamValue< LVecBase4f >::get_class_type 0 1 923 0
65
static TypeHandle ParamValue< LVecBase4f >::get_class_type(void);

1881 10 ParamValue 0 4 2030 36 ParamValue< LVecBase4i >::ParamValue 0 1 924 0
69
inline ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1882 9 set_value 0 4 2030 35 ParamValue< LVecBase4i >::set_value 0 1 925 0
141
inline void ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);
inline void ParamValue< LVecBase4i >::set_value(Type const &value);

1883 9 get_value 0 4 2030 35 ParamValue< LVecBase4i >::get_value 0 1 926 0
73
inline LVecBase4i const &ParamValue< LVecBase4i >::get_value(void) const;

1884 14 get_class_type 0 4 2030 40 ParamValue< LVecBase4i >::get_class_type 0 1 927 0
65
static TypeHandle ParamValue< LVecBase4i >::get_class_type(void);

1885 10 ParamValue 0 4 2032 35 ParamValue< LMatrix3d >::ParamValue 0 1 928 0
67
inline ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1886 9 set_value 0 4 2032 34 ParamValue< LMatrix3d >::set_value 0 1 929 0
138
inline void ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);
inline void ParamValue< LMatrix3d >::set_value(Type const &value);

1887 9 get_value 0 4 2032 34 ParamValue< LMatrix3d >::get_value 0 1 930 0
71
inline LMatrix3d const &ParamValue< LMatrix3d >::get_value(void) const;

1888 14 get_class_type 0 4 2032 39 ParamValue< LMatrix3d >::get_class_type 0 1 931 0
64
static TypeHandle ParamValue< LMatrix3d >::get_class_type(void);

1889 10 ParamValue 0 4 2034 35 ParamValue< LMatrix3f >::ParamValue 0 1 932 0
67
inline ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1890 9 set_value 0 4 2034 34 ParamValue< LMatrix3f >::set_value 0 1 933 0
138
inline void ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);
inline void ParamValue< LMatrix3f >::set_value(Type const &value);

1891 9 get_value 0 4 2034 34 ParamValue< LMatrix3f >::get_value 0 1 934 0
71
inline LMatrix3f const &ParamValue< LMatrix3f >::get_value(void) const;

1892 14 get_class_type 0 4 2034 39 ParamValue< LMatrix3f >::get_class_type 0 1 935 0
64
static TypeHandle ParamValue< LMatrix3f >::get_class_type(void);

1893 10 ParamValue 0 4 2036 35 ParamValue< LMatrix4d >::ParamValue 0 1 936 0
67
inline ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1894 9 set_value 0 4 2036 34 ParamValue< LMatrix4d >::set_value 0 1 937 0
138
inline void ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);
inline void ParamValue< LMatrix4d >::set_value(Type const &value);

1895 9 get_value 0 4 2036 34 ParamValue< LMatrix4d >::get_value 0 1 938 0
71
inline LMatrix4d const &ParamValue< LMatrix4d >::get_value(void) const;

1896 14 get_class_type 0 4 2036 39 ParamValue< LMatrix4d >::get_class_type 0 1 939 0
64
static TypeHandle ParamValue< LMatrix4d >::get_class_type(void);

1897 10 ParamValue 0 4 2038 35 ParamValue< LMatrix4f >::ParamValue 0 1 940 0
67
inline ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1898 9 set_value 0 4 2038 34 ParamValue< LMatrix4f >::set_value 0 1 941 0
138
inline void ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);
inline void ParamValue< LMatrix4f >::set_value(Type const &value);

1899 9 get_value 0 4 2038 34 ParamValue< LMatrix4f >::get_value 0 1 942 0
71
inline LMatrix4f const &ParamValue< LMatrix4f >::get_value(void) const;

1900 14 get_class_type 0 4 2038 39 ParamValue< LMatrix4f >::get_class_type 0 1 943 0
64
static TypeHandle ParamValue< LMatrix4f >::get_class_type(void);

1901 14 get_class_type 0 4 2045 36 WritableConfigurable::get_class_type 0 1 944 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1902 21 ~WritableConfigurable 0 4 2045 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1903 17 UniqueIdAllocator 0 4 2046 36 UniqueIdAllocator::UniqueIdAllocator 0 2 945 946 56
/**
 * Create a free id pool in the range [min:max].
 */
165
explicit UniqueIdAllocator::UniqueIdAllocator(uint32_t min = 0, uint32_t max = 20);
inline UniqueIdAllocator::UniqueIdAllocator(UniqueIdAllocator const &) = default;

1904 18 ~UniqueIdAllocator 0 4 2046 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 10
/**
 *
 */
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1905 8 allocate 0 4 2046 27 UniqueIdAllocator::allocate 0 1 947 134
/**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */
43
uint32_t UniqueIdAllocator::allocate(void);

1906 18 initial_reserve_id 0 4 2046 37 UniqueIdAllocator::initial_reserve_id 0 1 948 518
/**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */
56
void UniqueIdAllocator::initial_reserve_id(uint32_t id);

1907 4 free 0 4 2046 23 UniqueIdAllocator::free 0 1 949 112
/**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */
45
void UniqueIdAllocator::free(uint32_t index);

1908 13 fraction_used 0 4 2046 32 UniqueIdAllocator::fraction_used 0 1 950 117
/**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */
57
PN_stdfloat UniqueIdAllocator::fraction_used(void) const;

1909 6 output 0 4 2046 25 UniqueIdAllocator::output 0 1 951 42
/**
 * ...intended for debugging only.
 */
56
void UniqueIdAllocator::output(std::ostream &out) const;

1910 5 write 0 4 2046 24 UniqueIdAllocator::write 0 1 952 42
/**
 * ...intended for debugging only.
 */
55
void UniqueIdAllocator::write(std::ostream &out) const;

1911 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 961 203
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */
98
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, vector_uchar const &data);

1912 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 962 398
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */
127
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, vector_uchar const &data);

962
1 0 0 7 8 2050 978 0 0 1 4 copy 1 2048  
2 0 0 7 8 2050 978 0 0 1 4 copy 1 2051  
3 0 0 4 9 2053 0 0 0 1 4 this 3 2050  
4 0 0 6 10 2054 0 0 0 1 4 this 3 2048  
5 0 0 6 11 2055 0 0 0 2 4 this 3 2048  1 n 1 2054  
6 0 0 6 12 2055 0 0 0 2 4 this 3 2048  1 n 1 2054  
7 0 0 6 13 1949 0 0 0 1 4 this 3 2048  
8 0 0 6 14 1949 0 0 0 3 4 this 3 2048  1 n 1 2054  5 count 1 2054  
9 0 0 6 15 1920 0 0 0 1 4 this 3 2048  
10 0 0 6 16 1920 0 0 0 1 4 this 3 2048  
11 0 0 6 17 2054 0 0 0 2 4 this 3 2048  6 param0 0 2055  
12 0 0 6 18 1920 0 0 0 3 4 this 3 2048  4 view 1 2057  5 flags 1 1920  
13 0 0 4 19 2053 0 0 0 2 4 this 3 2048  4 view 1 2057  
14 0 0 4 5 2053 0 0 0 1 4 this 3 2060  
15 0 0 4 6 2053 0 0 0 2 4 this 3 2061  3 out 1 2063  
16 0 0 7 22 2064 998 0 0 1 4 copy 1 2051  
17 0 0 7 22 2064 998 0 0 1 6 source 1 1949  
18 0 0 7 22 2064 998 0 0 1 11 type_handle 1 2065  
19 0 0 7 23 2064 998 0 0 2 1 n 1 2054  11 type_handle 1 2065  
20 0 0 4 24 2053 0 0 0 1 4 this 3 2064  
21 0 0 6 25 2054 0 0 0 1 4 this 3 2051  
22 0 0 4 26 2053 0 0 0 2 4 this 3 2064  1 x 1 2055  
23 0 0 4 27 2053 0 0 0 1 4 this 3 2064  
24 0 0 6 28 2055 0 0 0 2 4 this 3 2051  1 n 1 2054  
25 0 0 4 29 2053 0 0 0 3 4 this 3 2064  1 n 1 2054  5 value 1 2055  
26 0 0 6 30 2055 0 0 0 2 4 this 3 2051  1 n 1 2054  
27 0 0 4 31 2053 0 0 0 3 4 this 3 2064  1 n 1 2054  5 value 1 2055  
28 0 0 6 32 1949 0 0 0 1 4 this 3 2051  
29 0 0 4 33 2053 0 0 0 2 4 this 3 2064  4 data 1 1949  
30 0 0 6 34 1949 0 0 0 3 4 this 3 2051  1 n 1 2054  5 count 1 2054  
31 0 0 4 35 2053 0 0 0 4 4 this 3 2064  1 n 1 2054  5 count 1 2054  4 data 1 2067  
32 0 0 6 36 1920 0 0 0 1 4 this 3 2051  
33 0 0 6 37 1920 0 0 0 1 4 this 3 2051  
34 0 0 6 38 2054 0 0 0 2 4 this 3 2051  6 param0 0 2055  
35 0 0 6 39 1920 0 0 0 3 4 this 3 2064  4 view 1 2057  5 flags 1 1920  
36 0 0 4 40 2053 0 0 0 2 4 this 3 2051  4 view 1 2057  
37 0 0 4 44 2053 0 0 69 /**
 * Runs the entire animation from beginning to end and stops.
 */ 1 4 this 3 2068  
38 0 0 4 44 2053 0 0 406 /**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */ 3 4 this 3 2068  4 from 1 1919  2 to 1 1919  
39 0 0 4 45 2053 0 0 169 /**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */ 2 4 this 3 2068  7 restart 1 1921  
40 0 0 4 45 2053 0 0 221 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 4 4 this 3 2068  7 restart 1 1921  4 from 1 1919  2 to 1 1919  
41 0 0 4 46 2053 0 0 224 /**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 2 4 this 3 2068  7 restart 1 1921  
42 0 0 4 46 2053 0 0 143 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */ 4 4 this 3 2068  7 restart 1 1921  4 from 1 1919  2 to 1 1919  
43 0 0 4 47 2053 0 0 130 /**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */ 1 4 this 3 2068  
44 0 0 4 48 2053 0 0 72 /**
 * Sets the animation to the indicated frame and holds it there.
 */ 2 4 this 3 2068  5 frame 1 1919  
45 0 0 4 49 2053 0 0 243 /**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */ 2 4 this 3 2068  9 play_rate 1 1919  
46 0 0 6 50 1919 0 0 79 /**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */ 1 4 this 3 2069  
47 0 0 6 51 1919 0 0 234 /**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */ 1 4 this 3 2069  
48 0 0 6 52 1920 0 0 278 /**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */ 1 4 this 3 2069  
49 0 0 6 53 1920 0 0 116 /**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */ 1 4 this 3 2069  
50 0 0 6 54 1920 0 0 330 /**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */ 1 4 this 3 2069  
51 0 0 6 55 1919 0 0 314 /**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */ 1 4 this 3 2069  
52 0 0 6 56 1920 0 0 372 /**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */ 1 4 this 3 2069  
53 0 0 6 57 1919 0 0 490 /**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */ 1 4 this 3 2069  
54 0 0 6 58 1921 0 0 208 /**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */ 1 4 this 3 2069  
55 0 0 4 59 2053 0 0 10 /**
 *
 */ 2 4 this 3 2069  3 out 1 2063  
56 0 0 7 72 2065 0 0 0 0 
57 0 0 7 75 2071 1037 0 55 /**
 * Creates an UpdateSeq in the 'initial' state.
 */ 0 
58 0 0 7 75 2071 1037 0 10 /**
 *
 */ 1 4 copy 1 2072  
59 0 0 7 76 2071 1037 0 0 0 
60 0 0 7 77 2071 1037 0 0 0 
61 0 0 7 78 2071 1037 0 0 0 
62 0 0 6 79 2071 0 0 10 /**
 *
 */ 2 4 this 3 2071  4 copy 1 2072  
63 0 0 4 80 2053 0 0 55 /**
 * Resets the UpdateSeq to the 'initial' state.
 */ 1 4 this 3 2071  
64 0 0 6 81 1921 0 0 67 /**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */ 1 4 this 3 2072  
65 0 0 6 82 1921 0 0 63 /**
 * Returns true if the UpdateSeq is in the 'old' state.
 */ 1 4 this 3 2072  
66 0 0 6 83 1921 0 0 65 /**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */ 1 4 this 3 2072  
67 0 0 6 84 1921 0 0 105 /**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */ 1 4 this 3 2072  
68 0 0 6 85 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
69 0 0 6 86 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
70 0 0 6 87 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
71 0 0 6 88 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
72 0 0 6 89 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
73 0 0 6 90 1921 0 0 0 2 4 this 3 2072  5 other 1 2072  
74 0 0 7 91 2071 1037 0 0 1 4 this 3 2071  
75 0 0 7 92 2071 1037 0 0 2 4 this 3 2071  6 param0 0 1920  
76 0 0 6 93 1924 0 0 107 /**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */ 1 4 this 3 2072  
77 0 0 4 98 2053 0 0 10 /**
 *
 */ 2 4 this 3 2072  3 out 1 2063  
78 0 0 4 102 2053 0 0 308 /**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */ 3 4 this 3 1936  4 scan 1 2074  7 manager 1 2076  
79 0 0 4 103 2053 0 0 345 /**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */ 1 4 this 3 1936  
80 0 0 7 104 2071 1037 0 140 /**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */ 1 4 this 3 2077  
81 0 0 6 105 1949 0 0 0 1 4 this 3 2077  
82 0 0 6 106 1949 0 0 0 2 4 this 3 2077  7 pickler 1 1949  
83 0 0 6 107 1986 0 0 423 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a bytes object.  Returns an empty bytes
 * object on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 1 4 this 3 2077  
84 0 0 6 107 1921 0 0 429 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 3 4 this 3 2077  4 data 1 2079  6 writer 1 2080  
85 0 0 7 109 2065 0 0 0 0 
86 0 0 7 116 2081 1052 0 491 /**
 * Reads the bytes created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on those bytes.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */ 2 4 data 1 1986  6 reader 1 2076  
87 0 0 7 117 2065 0 0 0 0 
88 0 0 6 111 1936 0 0 0 1 4 this 3 2081  
89 0 0 7 114 2082 0 0 0 1 4 this 3 2081  
90 0 0 7 126 2085 1057 0 179 /**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */ 1 4 this 3 2083  
91 0 0 6 127 1921 0 0 0 2 4 this 3 2083  5 other 1 2083  
92 0 0 6 128 2086 0 0 237 /**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */ 1 4 this 3 2083  
93 0 0 6 129 2086 0 0 230 /**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */ 1 4 this 3 2083  
94 0 0 6 130 1935 0 0 204 /**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */ 1 4 this 3 2083  
95 0 0 6 131 1935 0 0 84 /**
 * Returns the time at which this particular record was recorded or updated.
 */ 1 4 this 3 2083  
96 0 0 6 139 1920 0 0 75 /**
 * Returns the number of source files that contribute to the cache.
 */ 1 4 this 3 2083  
97 0 0 6 140 2086 0 0 94 /**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */ 2 4 this 3 2083  1 n 1 1920  
98 0 0 6 141 1921 0 0 124 /**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */ 1 4 this 3 2083  
99 0 0 4 142 2053 0 0 80 /**
 * Empties the list of files that contribute to the data in this record.
 */ 1 4 this 3 2085  
100 0 0 4 143 2053 0 0 225 /**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */ 2 4 this 3 2085  8 pathname 1 2086  
101 0 0 4 143 2053 0 0 82 /**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */ 2 4 this 3 2085  4 file 1 2087  
102 0 0 6 144 1921 0 0 130 /**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */ 1 4 this 3 2083  
103 0 0 4 145 2053 0 0 147 /**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */ 1 4 this 3 2085  
104 0 0 6 146 1936 0 0 139 /**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */ 1 4 this 3 2083  
105 0 0 4 148 2053 0 0 104 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */ 2 4 this 3 2085  3 ptr 1 1936  
106 0 0 4 148 2053 0 0 573 /**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */ 3 4 this 3 2085  3 ptr 1 1936  7 ref_ptr 1 2082  
107 0 0 4 148 2053 0 0 115 /**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */ 3 4 this 3 2085  3 ptr 1 1936  5 dummy 1 1920  
108 0 0 4 148 2053 0 0 118 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */ 2 4 this 3 2085  3 ptr 1 2081  
109 0 0 4 151 2053 0 0 10 /**
 *
 */ 2 4 this 3 2083  3 out 1 2063  
110 0 0 4 152 2053 0 0 10 /**
 *
 */ 3 4 this 3 2083  3 out 1 2063  12 indent_level 1 1920  
111 0 0 7 153 2065 0 0 0 0 
112 0 0 7 120 2081 1052 0 0 1 4 this 3 2085  
113 0 0 7 155 2090 1078 0 10 /**
 *
 */ 0 
114 0 0 4 157 2053 0 0 347 /**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 2 4 this 3 2090  4 flag 1 1921  
115 0 0 6 158 1921 0 0 381 /**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 1 4 this 3 2091  
116 0 0 4 159 2053 0 0 118 /**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */ 2 4 this 3 2090  4 flag 1 1921  
117 0 0 6 160 1921 0 0 172 /**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2091  
118 0 0 4 161 2053 0 0 101 /**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */ 2 4 this 3 2090  4 flag 1 1921  
119 0 0 6 162 1921 0 0 174 /**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2091  
120 0 0 4 163 2053 0 0 722 /**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */ 2 4 this 3 2090  4 flag 1 1921  
121 0 0 6 164 1921 0 0 202 /**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2091  
122 0 0 4 165 2053 0 0 184 /**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */ 2 4 this 3 2090  4 flag 1 1921  
123 0 0 6 166 1921 0 0 196 /**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 2091  
124 0 0 4 167 2053 0 0 372 /**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */ 2 4 this 3 2090  4 root 1 2086  
125 0 0 7 168 2093 0 0 75 /**
 * Returns the current root pathname of the cache.  See set_root().
 */ 1 4 this 3 2091  
126 0 0 4 169 2053 0 0 86 /**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */ 2 4 this 3 2090  10 flush_time 1 1920  
127 0 0 6 170 1920 0 0 84 /**
 * Returns the time in seconds between automatic flushes of the cache index.
 */ 1 4 this 3 2091  
128 0 0 4 171 2053 0 0 430 /**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */ 2 4 this 3 2090  10 max_kbytes 1 1920  
129 0 0 6 172 1920 0 0 121 /**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */ 1 4 this 3 2091  
130 0 0 4 173 2053 0 0 252 /**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */ 2 4 this 3 2090  2 ro 1 1921  
131 0 0 6 174 1921 0 0 230 /**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */ 1 4 this 3 2091  
132 0 0 7 175 2085 1057 0 782 /**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */ 3 4 this 3 2090  15 source_filename 1 2086  15 cache_extension 1 2067  
133 0 0 6 176 1921 0 0 212 /**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */ 2 4 this 3 2090  6 record 1 2085  
134 0 0 4 177 2053 0 0 92 /**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */ 1 4 this 3 2090  
135 0 0 4 178 2053 0 0 48 /**
 * Ensures the index is written to disk.
 */ 1 4 this 3 2090  
136 0 0 4 179 2053 0 0 63 /**
 * Writes the contents of the index to standard output.
 */ 3 4 this 3 2091  3 out 1 2063  12 indent_level 1 1920  
137 0 0 6 180 2090 0 0 124 /**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */ 0 
138 0 0 4 181 2053 0 0 84 /**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */ 0 
139 0 0 4 182 2053 0 0 75 /**
 * If there is a global BamCache object, calls flush_index() on it.
 */ 0 
140 0 0 7 196 2094 1106 0 0 0 
141 0 0 7 196 2094 1106 0 0 1 6 param0 0 2095  
142 0 0 7 201 2098 1117 0 0 1 6 param0 0 2097  
143 0 0 7 201 2098 1117 0 10 /**
 *
 */ 1 5 flags 1 1920  
144 0 0 7 201 2098 1117 0 10 /**
 *
 */ 2 5 flags 1 1920  13 texture_flags 1 1920  
145 0 0 4 202 2053 0 0 10 /**
 *
 */ 2 4 this 3 2098  5 flags 1 1920  
146 0 0 6 203 1920 0 0 10 /**
 *
 */ 1 4 this 3 2097  
147 0 0 4 205 2053 0 0 10 /**
 *
 */ 2 4 this 3 2098  5 flags 1 1920  
148 0 0 6 206 1920 0 0 10 /**
 *
 */ 1 4 this 3 2097  
149 0 0 4 207 2053 0 0 459 /**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */ 2 4 this 3 2098  9 num_views 1 1920  
150 0 0 6 208 1920 0 0 39 /**
 * See set_texture_num_views().
 */ 1 4 this 3 2097  
151 0 0 4 211 2053 0 0 209 /**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */ 2 4 this 3 2098  5 scale 1 1922  
152 0 0 6 212 1922 0 0 40 /**
 * See set_auto_texture_scale().
 */ 1 4 this 3 2097  
153 0 0 4 214 2053 0 0 10 /**
 *
 */ 2 4 this 3 2097  3 out 1 2063  
154 0 0 7 217 2076 1119 0 38 // The primary interface for a caller. 1 6 source 1 1946  
155 0 0 4 219 2053 0 0 142 /**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */ 2 4 this 3 2076  6 source 1 1946  
156 0 0 6 220 1946 0 0 100 /**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */ 1 4 this 3 2076  
157 0 0 6 221 1921 0 0 210 /**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */ 1 4 this 3 2076  
158 0 0 4 222 2053 0 0 1007 /**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */ 4 4 this 3 2076  3 obj 1 1936  4 name 1 2067  4 data 1 2099  
159 0 0 7 223 2099 0 0 173 /**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */ 3 4 this 3 2101  3 obj 1 1936  4 name 1 2067  
160 0 0 6 224 2086 0 0 199 /**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */ 1 4 this 3 2101  
161 0 0 6 225 2097 0 0 98 /**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */ 1 4 this 3 2101  
162 0 0 4 226 2053 0 0 58 /**
 * Specifies the LoaderOptions for this BamReader.
 */ 2 4 this 3 2076  7 options 1 2097  
163 0 0 6 227 1936 0 0 1059 /**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */ 1 4 this 3 2076  
164 0 0 6 228 1921 0 0 138 /**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */ 1 4 this 3 2101  
165 0 0 6 229 1921 0 0 565 /**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */ 1 4 this 3 2076  
166 0 0 6 230 1921 0 0 406 /**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */ 3 4 this 3 2076  12 orig_pointer 1 2077  11 new_pointer 1 2077  
167 0 0 6 231 1920 0 0 81 /**
 * Returns the major version number of the Bam file currently being read.
 */ 1 4 this 3 2101  
168 0 0 6 232 1920 0 0 81 /**
 * Returns the minor version number of the Bam file currently being read.
 */ 1 4 this 3 2101  
169 0 0 6 233 1939 0 0 254 /**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */ 1 4 this 3 2101  
170 0 0 6 234 1921 0 0 220 /**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */ 1 4 this 3 2101  
171 0 0 6 235 1920 0 0 174 /**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */ 1 4 this 3 2101  
172 0 0 6 236 1920 0 0 184 /**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */ 1 4 this 3 2101  
173 0 0 6 237 1949 0 0 0 1 4 this 3 2101  
174 0 0 4 250 2053 0 0 0 2 6 handle 1 2065  4 func 1 1949  
175 0 0 7 252 2080 1141 0 0 1 6 param0 0 2103  
176 0 0 7 252 2080 1141 0 10 /**
 *
 */ 1 6 target 1 1953  
177 0 0 4 254 2053 0 0 153 /**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */ 2 4 this 3 2080  6 target 1 1953  
178 0 0 6 255 1953 0 0 100 /**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */ 1 4 this 3 2080  
179 0 0 6 256 1921 0 0 220 /**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */ 1 4 this 3 2080  
180 0 0 6 257 2086 0 0 197 /**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */ 1 4 this 3 2103  
181 0 0 6 258 1921 0 0 736 /**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */ 2 4 this 3 2080  3 obj 1 2077  
182 0 0 6 259 1921 0 0 170 /**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */ 2 4 this 3 2103  3 obj 1 2077  
183 0 0 4 260 2053 0 0 85 /**
 * Ensures that all data written thus far is manifested on the output stream.
 */ 1 4 this 3 2080  
184 0 0 6 261 1920 0 0 84 /**
 * Returns the major version number of the Bam file currently being written.
 */ 1 4 this 3 2103  
185 0 0 6 262 1920 0 0 84 /**
 * Returns the minor version number of the Bam file currently being written.
 */ 1 4 this 3 2103  
186 0 0 4 263 2053 0 0 232 /**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */ 2 4 this 3 2080  9 minor_ver 1 1920  
187 0 0 6 264 1939 0 0 257 /**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */ 1 4 this 3 2103  
188 0 0 6 265 1921 0 0 248 /**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */ 1 4 this 3 2103  
189 0 0 6 266 1941 0 0 196 /**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 1 4 this 3 2103  
190 0 0 4 267 2053 0 0 187 /**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 2 4 this 3 2080  17 file_texture_mode 1 1941  
191 0 0 6 268 1936 0 0 165 /**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */ 1 4 this 3 2103  
192 0 0 4 269 2053 0 0 160 /**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */ 2 4 this 3 2080  9 root_node 1 1936  
193 0 0 7 279 2105 1221 0 0 0 
194 0 0 7 279 2105 1221 0 0 1 6 param0 0 2106  
195 0 0 7 279 2105 1221 0 0 1 10 init_value 1 2108  
196 0 0 7 280 2105 1221 0 0 0 
197 0 0 7 281 2105 1221 0 0 0 
198 0 0 7 282 2105 1221 0 0 1 7 on_bits 1 1920  
199 0 0 7 283 2105 1221 0 0 1 5 index 1 1920  
200 0 0 7 284 2105 1221 0 0 2 7 low_bit 1 1920  4 size 1 1920  
201 0 0 6 285 1921 0 0 0 0 
202 0 0 6 286 1920 0 0 0 0 
203 0 0 6 287 1920 0 0 0 1 4 this 3 2106  
204 0 0 6 288 1921 0 0 0 2 4 this 3 2106  5 index 1 1920  
205 0 0 4 289 2053 0 0 0 2 4 this 3 2105  5 index 1 1920  
206 0 0 4 290 2053 0 0 0 2 4 this 3 2105  5 index 1 1920  
207 0 0 4 291 2053 0 0 0 3 4 this 3 2105  5 index 1 1920  5 value 1 1921  
208 0 0 6 292 1921 0 0 0 1 4 this 3 2106  
209 0 0 6 293 1921 0 0 0 1 4 this 3 2106  
210 0 0 6 294 2108 0 0 0 3 4 this 3 2106  7 low_bit 1 1920  4 size 1 1920  
211 0 0 4 295 2053 0 0 0 4 4 this 3 2105  5 value 1 2108  7 low_bit 1 1920  4 size 1 1920  
212 0 0 6 296 1921 0 0 0 3 4 this 3 2106  7 low_bit 1 1920  4 size 1 1920  
213 0 0 6 297 1921 0 0 0 3 4 this 3 2106  7 low_bit 1 1920  4 size 1 1920  
214 0 0 4 298 2053 0 0 0 3 4 this 3 2105  7 low_bit 1 1920  4 size 1 1920  
215 0 0 4 299 2053 0 0 0 3 4 this 3 2105  7 low_bit 1 1920  4 size 1 1920  
216 0 0 4 300 2053 0 0 0 4 4 this 3 2105  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
217 0 0 6 301 2108 0 0 0 1 4 this 3 2106  
218 0 0 4 302 2053 0 0 0 2 4 this 3 2105  5 value 1 2108  
219 0 0 6 303 1920 0 0 0 1 4 this 3 2106  
220 0 0 6 304 1920 0 0 0 1 4 this 3 2106  
221 0 0 6 305 1920 0 0 0 1 4 this 3 2106  
222 0 0 6 306 1920 0 0 0 1 4 this 3 2106  
223 0 0 6 307 1920 0 0 0 1 4 this 3 2106  
224 0 0 6 308 1920 0 0 0 1 4 this 3 2106  
225 0 0 6 309 1920 0 0 0 2 4 this 3 2106  7 low_bit 1 1920  
226 0 0 4 310 2053 0 0 0 1 4 this 3 2105  
227 0 0 6 311 1921 0 0 0 2 4 this 3 2106  5 other 1 2106  
228 0 0 4 312 2053 0 0 0 1 4 this 3 2105  
229 0 0 4 313 2053 0 0 0 2 4 this 3 2106  3 out 1 2063  
230 0 0 4 314 2053 0 0 0 3 4 this 3 2106  3 out 1 2063  12 spaces_every 1 1920  
231 0 0 4 315 2053 0 0 0 3 4 this 3 2106  3 out 1 2063  12 spaces_every 1 1920  
232 0 0 4 316 2053 0 0 0 3 4 this 3 2106  3 out 1 2063  12 indent_level 1 1920  
233 0 0 6 317 1921 0 0 0 2 4 this 3 2106  5 other 1 2106  
234 0 0 6 318 1921 0 0 0 2 4 this 3 2106  5 other 1 2106  
235 0 0 6 319 1921 0 0 0 2 4 this 3 2106  5 other 1 2106  
236 0 0 6 320 1920 0 0 0 2 4 this 3 2106  5 other 1 2106  
237 0 0 7 321 2105 1221 0 0 2 4 this 3 2106  5 other 1 2106  
238 0 0 7 322 2105 1221 0 0 2 4 this 3 2106  5 other 1 2106  
239 0 0 7 323 2105 1221 0 0 2 4 this 3 2106  5 other 1 2106  
240 0 0 7 324 2105 1221 0 0 1 4 this 3 2106  
241 0 0 7 325 2105 1221 0 0 2 4 this 3 2106  5 shift 1 1920  
242 0 0 7 326 2105 1221 0 0 2 4 this 3 2106  5 shift 1 1920  
243 0 0 6 327 2105 0 0 0 2 4 this 3 2105  5 other 1 2106  
244 0 0 6 328 2105 0 0 0 2 4 this 3 2105  5 other 1 2106  
245 0 0 6 329 2105 0 0 0 2 4 this 3 2105  5 other 1 2106  
246 0 0 6 330 2105 0 0 0 2 4 this 3 2105  5 shift 1 1920  
247 0 0 6 331 2105 0 0 0 2 4 this 3 2105  5 shift 1 1920  
248 0 0 4 332 2053 0 0 0 1 4 this 3 2105  
249 0 0 4 333 2053 0 0 0 1 4 this 3 2105  
250 0 0 7 334 2105 1221 0 0 1 4 this 3 2106  
251 0 0 7 335 2105 1221 0 0 1 4 this 3 2106  
252 0 0 7 336 2105 1221 0 0 1 4 this 3 2106  
253 0 0 7 336 2105 1221 0 0 2 4 this 3 2106  5 other 1 2106  
254 0 0 7 336 2105 1221 0 0 2 4 this 3 2106  5 index 1 1920  
255 0 0 7 337 2105 1221 0 0 1 4 this 3 2106  
256 0 0 7 337 2105 1221 0 0 2 4 this 3 2106  5 other 1 2106  
257 0 0 7 337 2105 1221 0 0 2 4 this 3 2106  5 index 1 1920  
258 0 0 6 338 1920 0 0 0 1 4 this 3 2106  
259 0 0 6 339 1921 0 0 0 1 4 this 3 2106  
260 0 0 6 340 1949 0 0 0 1 4 this 3 2106  
261 0 0 7 341 2065 0 0 0 0 
262 0 0 7 345 2109 1285 0 0 0 
263 0 0 7 345 2109 1285 0 0 1 6 param0 0 2110  
264 0 0 7 345 2109 1285 0 0 1 10 init_value 1 2112  
265 0 0 7 346 2109 1285 0 0 0 
266 0 0 7 347 2109 1285 0 0 0 
267 0 0 7 348 2109 1285 0 0 1 7 on_bits 1 1920  
268 0 0 7 349 2109 1285 0 0 1 5 index 1 1920  
269 0 0 7 350 2109 1285 0 0 2 7 low_bit 1 1920  4 size 1 1920  
270 0 0 6 351 1921 0 0 0 0 
271 0 0 6 352 1920 0 0 0 0 
272 0 0 6 353 1920 0 0 0 1 4 this 3 2110  
273 0 0 6 354 1921 0 0 0 2 4 this 3 2110  5 index 1 1920  
274 0 0 4 355 2053 0 0 0 2 4 this 3 2109  5 index 1 1920  
275 0 0 4 356 2053 0 0 0 2 4 this 3 2109  5 index 1 1920  
276 0 0 4 357 2053 0 0 0 3 4 this 3 2109  5 index 1 1920  5 value 1 1921  
277 0 0 6 358 1921 0 0 0 1 4 this 3 2110  
278 0 0 6 359 1921 0 0 0 1 4 this 3 2110  
279 0 0 6 360 2112 0 0 0 3 4 this 3 2110  7 low_bit 1 1920  4 size 1 1920  
280 0 0 4 361 2053 0 0 0 4 4 this 3 2109  5 value 1 2112  7 low_bit 1 1920  4 size 1 1920  
281 0 0 6 362 1921 0 0 0 3 4 this 3 2110  7 low_bit 1 1920  4 size 1 1920  
282 0 0 6 363 1921 0 0 0 3 4 this 3 2110  7 low_bit 1 1920  4 size 1 1920  
283 0 0 4 364 2053 0 0 0 3 4 this 3 2109  7 low_bit 1 1920  4 size 1 1920  
284 0 0 4 365 2053 0 0 0 3 4 this 3 2109  7 low_bit 1 1920  4 size 1 1920  
285 0 0 4 366 2053 0 0 0 4 4 this 3 2109  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
286 0 0 6 367 2112 0 0 0 1 4 this 3 2110  
287 0 0 4 368 2053 0 0 0 2 4 this 3 2109  5 value 1 2112  
288 0 0 6 369 1920 0 0 0 1 4 this 3 2110  
289 0 0 6 370 1920 0 0 0 1 4 this 3 2110  
290 0 0 6 371 1920 0 0 0 1 4 this 3 2110  
291 0 0 6 372 1920 0 0 0 1 4 this 3 2110  
292 0 0 6 373 1920 0 0 0 1 4 this 3 2110  
293 0 0 6 374 1920 0 0 0 1 4 this 3 2110  
294 0 0 6 375 1920 0 0 0 2 4 this 3 2110  7 low_bit 1 1920  
295 0 0 4 376 2053 0 0 0 1 4 this 3 2109  
296 0 0 6 377 1921 0 0 0 2 4 this 3 2110  5 other 1 2110  
297 0 0 4 378 2053 0 0 0 1 4 this 3 2109  
298 0 0 4 379 2053 0 0 0 2 4 this 3 2110  3 out 1 2063  
299 0 0 4 380 2053 0 0 0 3 4 this 3 2110  3 out 1 2063  12 spaces_every 1 1920  
300 0 0 4 381 2053 0 0 0 3 4 this 3 2110  3 out 1 2063  12 spaces_every 1 1920  
301 0 0 4 382 2053 0 0 0 3 4 this 3 2110  3 out 1 2063  12 indent_level 1 1920  
302 0 0 6 383 1921 0 0 0 2 4 this 3 2110  5 other 1 2110  
303 0 0 6 384 1921 0 0 0 2 4 this 3 2110  5 other 1 2110  
304 0 0 6 385 1921 0 0 0 2 4 this 3 2110  5 other 1 2110  
305 0 0 6 386 1920 0 0 0 2 4 this 3 2110  5 other 1 2110  
306 0 0 7 387 2109 1285 0 0 2 4 this 3 2110  5 other 1 2110  
307 0 0 7 388 2109 1285 0 0 2 4 this 3 2110  5 other 1 2110  
308 0 0 7 389 2109 1285 0 0 2 4 this 3 2110  5 other 1 2110  
309 0 0 7 390 2109 1285 0 0 1 4 this 3 2110  
310 0 0 7 391 2109 1285 0 0 2 4 this 3 2110  5 shift 1 1920  
311 0 0 7 392 2109 1285 0 0 2 4 this 3 2110  5 shift 1 1920  
312 0 0 6 393 2109 0 0 0 2 4 this 3 2109  5 other 1 2110  
313 0 0 6 394 2109 0 0 0 2 4 this 3 2109  5 other 1 2110  
314 0 0 6 395 2109 0 0 0 2 4 this 3 2109  5 other 1 2110  
315 0 0 6 396 2109 0 0 0 2 4 this 3 2109  5 shift 1 1920  
316 0 0 6 397 2109 0 0 0 2 4 this 3 2109  5 shift 1 1920  
317 0 0 4 398 2053 0 0 0 1 4 this 3 2109  
318 0 0 4 399 2053 0 0 0 1 4 this 3 2109  
319 0 0 7 400 2109 1285 0 0 1 4 this 3 2110  
320 0 0 7 401 2109 1285 0 0 1 4 this 3 2110  
321 0 0 7 402 2109 1285 0 0 1 4 this 3 2110  
322 0 0 7 402 2109 1285 0 0 2 4 this 3 2110  5 other 1 2110  
323 0 0 7 402 2109 1285 0 0 2 4 this 3 2110  5 index 1 1920  
324 0 0 7 403 2109 1285 0 0 1 4 this 3 2110  
325 0 0 7 403 2109 1285 0 0 2 4 this 3 2110  5 other 1 2110  
326 0 0 7 403 2109 1285 0 0 2 4 this 3 2110  5 index 1 1920  
327 0 0 6 404 1920 0 0 0 1 4 this 3 2110  
328 0 0 6 405 1921 0 0 0 1 4 this 3 2110  
329 0 0 6 406 1949 0 0 0 1 4 this 3 2110  
330 0 0 7 407 2065 0 0 0 0 
331 0 0 7 411 2114 1349 0 0 0 
332 0 0 7 411 2114 1349 0 0 1 6 param0 0 2115  
333 0 0 7 411 2114 1349 0 0 1 10 init_value 1 2117  
334 0 0 7 412 2114 1349 0 0 0 
335 0 0 7 413 2114 1349 0 0 0 
336 0 0 7 414 2114 1349 0 0 1 7 on_bits 1 1920  
337 0 0 7 415 2114 1349 0 0 1 5 index 1 1920  
338 0 0 7 416 2114 1349 0 0 2 7 low_bit 1 1920  4 size 1 1920  
339 0 0 6 417 1921 0 0 0 0 
340 0 0 6 418 1920 0 0 0 0 
341 0 0 6 419 1920 0 0 0 1 4 this 3 2115  
342 0 0 6 420 1921 0 0 0 2 4 this 3 2115  5 index 1 1920  
343 0 0 4 421 2053 0 0 0 2 4 this 3 2114  5 index 1 1920  
344 0 0 4 422 2053 0 0 0 2 4 this 3 2114  5 index 1 1920  
345 0 0 4 423 2053 0 0 0 3 4 this 3 2114  5 index 1 1920  5 value 1 1921  
346 0 0 6 424 1921 0 0 0 1 4 this 3 2115  
347 0 0 6 425 1921 0 0 0 1 4 this 3 2115  
348 0 0 6 426 2117 0 0 0 3 4 this 3 2115  7 low_bit 1 1920  4 size 1 1920  
349 0 0 4 427 2053 0 0 0 4 4 this 3 2114  5 value 1 2117  7 low_bit 1 1920  4 size 1 1920  
350 0 0 6 428 1921 0 0 0 3 4 this 3 2115  7 low_bit 1 1920  4 size 1 1920  
351 0 0 6 429 1921 0 0 0 3 4 this 3 2115  7 low_bit 1 1920  4 size 1 1920  
352 0 0 4 430 2053 0 0 0 3 4 this 3 2114  7 low_bit 1 1920  4 size 1 1920  
353 0 0 4 431 2053 0 0 0 3 4 this 3 2114  7 low_bit 1 1920  4 size 1 1920  
354 0 0 4 432 2053 0 0 0 4 4 this 3 2114  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
355 0 0 6 433 2117 0 0 0 1 4 this 3 2115  
356 0 0 4 434 2053 0 0 0 2 4 this 3 2114  5 value 1 2117  
357 0 0 6 435 1920 0 0 0 1 4 this 3 2115  
358 0 0 6 436 1920 0 0 0 1 4 this 3 2115  
359 0 0 6 437 1920 0 0 0 1 4 this 3 2115  
360 0 0 6 438 1920 0 0 0 1 4 this 3 2115  
361 0 0 6 439 1920 0 0 0 1 4 this 3 2115  
362 0 0 6 440 1920 0 0 0 1 4 this 3 2115  
363 0 0 6 441 1920 0 0 0 2 4 this 3 2115  7 low_bit 1 1920  
364 0 0 4 442 2053 0 0 0 1 4 this 3 2114  
365 0 0 6 443 1921 0 0 0 2 4 this 3 2115  5 other 1 2115  
366 0 0 4 444 2053 0 0 0 1 4 this 3 2114  
367 0 0 4 445 2053 0 0 0 2 4 this 3 2115  3 out 1 2063  
368 0 0 4 446 2053 0 0 0 3 4 this 3 2115  3 out 1 2063  12 spaces_every 1 1920  
369 0 0 4 447 2053 0 0 0 3 4 this 3 2115  3 out 1 2063  12 spaces_every 1 1920  
370 0 0 4 448 2053 0 0 0 3 4 this 3 2115  3 out 1 2063  12 indent_level 1 1920  
371 0 0 6 449 1921 0 0 0 2 4 this 3 2115  5 other 1 2115  
372 0 0 6 450 1921 0 0 0 2 4 this 3 2115  5 other 1 2115  
373 0 0 6 451 1921 0 0 0 2 4 this 3 2115  5 other 1 2115  
374 0 0 6 452 1920 0 0 0 2 4 this 3 2115  5 other 1 2115  
375 0 0 7 453 2114 1349 0 0 2 4 this 3 2115  5 other 1 2115  
376 0 0 7 454 2114 1349 0 0 2 4 this 3 2115  5 other 1 2115  
377 0 0 7 455 2114 1349 0 0 2 4 this 3 2115  5 other 1 2115  
378 0 0 7 456 2114 1349 0 0 1 4 this 3 2115  
379 0 0 7 457 2114 1349 0 0 2 4 this 3 2115  5 shift 1 1920  
380 0 0 7 458 2114 1349 0 0 2 4 this 3 2115  5 shift 1 1920  
381 0 0 6 459 2114 0 0 0 2 4 this 3 2114  5 other 1 2115  
382 0 0 6 460 2114 0 0 0 2 4 this 3 2114  5 other 1 2115  
383 0 0 6 461 2114 0 0 0 2 4 this 3 2114  5 other 1 2115  
384 0 0 6 462 2114 0 0 0 2 4 this 3 2114  5 shift 1 1920  
385 0 0 6 463 2114 0 0 0 2 4 this 3 2114  5 shift 1 1920  
386 0 0 4 464 2053 0 0 0 1 4 this 3 2114  
387 0 0 4 465 2053 0 0 0 1 4 this 3 2114  
388 0 0 7 466 2114 1349 0 0 1 4 this 3 2115  
389 0 0 7 467 2114 1349 0 0 1 4 this 3 2115  
390 0 0 7 468 2114 1349 0 0 1 4 this 3 2115  
391 0 0 7 468 2114 1349 0 0 2 4 this 3 2115  5 other 1 2115  
392 0 0 7 468 2114 1349 0 0 2 4 this 3 2115  5 index 1 1920  
393 0 0 7 469 2114 1349 0 0 1 4 this 3 2115  
394 0 0 7 469 2114 1349 0 0 2 4 this 3 2115  5 other 1 2115  
395 0 0 7 469 2114 1349 0 0 2 4 this 3 2115  5 index 1 1920  
396 0 0 6 470 1920 0 0 0 1 4 this 3 2115  
397 0 0 6 471 1921 0 0 0 1 4 this 3 2115  
398 0 0 6 472 1949 0 0 0 1 4 this 3 2115  
399 0 0 7 473 2065 0 0 0 0 
400 0 0 7 479 2118 1409 0 10 /**
 *
 */ 0 
401 0 0 7 479 2118 1409 0 0 1 6 param0 0 2119  
402 0 0 7 479 2118 1409 0 10 /**
 *
 */ 1 10 init_value 1 2121  
403 0 0 7 479 2118 1409 0 10 /**
 *
 */ 1 4 from 1 2122  
404 0 0 7 480 2118 1409 0 69 /**
 * Returns a BitArray with an infinite array of bits, all on.
 */ 0 
405 0 0 7 481 2118 1409 0 53 /**
 * Returns a BitArray whose bits are all off.
 */ 0 
406 0 0 7 482 2118 1409 0 62 /**
 * Returns a BitArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1920  
407 0 0 7 483 2118 1409 0 61 /**
 * Returns a BitArray with only the indicated bit on.
 */ 1 5 index 1 1920  
408 0 0 7 484 2118 1409 0 76 /**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1920  4 size 1 1920  
409 0 0 6 485 1921 0 0 0 0 
410 0 0 6 486 1920 0 0 0 0 
411 0 0 6 487 1920 0 0 0 0 
412 0 0 6 488 2124 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2119  
413 0 0 6 489 1921 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2119  5 index 1 1920  
414 0 0 4 490 2053 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2118  5 index 1 1920  
415 0 0 4 491 2053 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2118  5 index 1 1920  
416 0 0 4 492 2053 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2118  5 index 1 1920  5 value 1 1921  
417 0 0 6 493 1921 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2119  
418 0 0 6 494 1921 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2119  
419 0 0 6 495 1921 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2119  
420 0 0 6 496 2121 0 0 187 /**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */ 3 4 this 3 2119  7 low_bit 1 1920  4 size 1 1920  
421 0 0 4 497 2053 0 0 92 /**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */ 4 4 this 3 2118  5 value 1 2121  7 low_bit 1 1920  4 size 1 1920  
422 0 0 6 498 1921 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2119  7 low_bit 1 1920  4 size 1 1920  
423 0 0 6 499 1921 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2119  7 low_bit 1 1920  4 size 1 1920  
424 0 0 4 500 2053 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2118  7 low_bit 1 1920  4 size 1 1920  
425 0 0 4 501 2053 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2118  7 low_bit 1 1920  4 size 1 1920  
426 0 0 4 502 2053 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2118  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
427 0 0 6 503 1920 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2119  
428 0 0 6 504 1920 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2119  
429 0 0 6 505 1920 0 0 101 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */ 1 4 this 3 2119  
430 0 0 6 506 1920 0 0 101 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */ 1 4 this 3 2119  
431 0 0 6 507 1920 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2119  
432 0 0 6 508 1920 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2119  
433 0 0 6 509 1920 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2119  7 low_bit 1 1920  
434 0 0 6 510 2124 0 0 75 /**
 * Returns the number of possibly-unique words stored in the array.
 */ 1 4 this 3 2119  
435 0 0 7 511 2126 0 0 175 /**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */ 2 4 this 3 2119  1 n 1 2124  
436 0 0 4 512 2053 0 0 113 /**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */ 3 4 this 3 2118  1 n 1 2124  5 value 1 2121  
437 0 0 4 513 2053 0 0 90 /**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2118  
438 0 0 6 514 1921 0 0 178 /**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2119  5 other 1 2119  
439 0 0 4 515 2053 0 0 49 /**
 * Sets all the bits in the BitArray off.
 */ 1 4 this 3 2118  
440 0 0 4 516 2053 0 0 193 /**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */ 2 4 this 3 2119  3 out 1 2063  
441 0 0 4 517 2053 0 0 83 /**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */ 3 4 this 3 2119  3 out 1 2063  12 spaces_every 1 1920  
442 0 0 4 518 2053 0 0 93 /**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */ 3 4 this 3 2119  3 out 1 2063  12 spaces_every 1 1920  
443 0 0 4 519 2053 0 0 99 /**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */ 3 4 this 3 2119  3 out 1 2063  12 indent_level 1 1920  
444 0 0 6 520 1921 0 0 0 2 4 this 3 2119  5 other 1 2119  
445 0 0 6 521 1921 0 0 0 2 4 this 3 2119  5 other 1 2119  
446 0 0 6 522 1921 0 0 0 2 4 this 3 2119  5 other 1 2119  
447 0 0 6 523 1920 0 0 233 /**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */ 2 4 this 3 2119  5 other 1 2119  
448 0 0 7 524 2118 1409 0 0 2 4 this 3 2119  5 other 1 2119  
449 0 0 7 525 2118 1409 0 0 2 4 this 3 2119  5 other 1 2119  
450 0 0 7 526 2118 1409 0 0 2 4 this 3 2119  5 other 1 2119  
451 0 0 7 527 2118 1409 0 0 1 4 this 3 2119  
452 0 0 7 528 2118 1409 0 0 2 4 this 3 2119  5 shift 1 1920  
453 0 0 7 529 2118 1409 0 0 2 4 this 3 2119  5 shift 1 1920  
454 0 0 6 530 2118 0 0 0 2 4 this 3 2118  5 other 1 2119  
455 0 0 6 531 2118 0 0 0 2 4 this 3 2118  5 other 1 2119  
456 0 0 6 532 2118 0 0 0 2 4 this 3 2118  5 other 1 2119  
457 0 0 6 533 2118 0 0 0 2 4 this 3 2118  5 shift 1 1920  
458 0 0 6 534 2118 0 0 0 2 4 this 3 2118  5 shift 1 1920  
459 0 0 6 535 1949 0 0 0 1 4 this 3 2119  
460 0 0 4 536 2053 0 0 0 2 4 this 3 2118  5 state 1 1949  
461 0 0 7 537 2065 0 0 0 0 
462 0 0 7 540 2127 1429 0 259 // The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer! 0 
463 0 0 7 540 2127 1429 0 0 1 6 param0 0 2128  
464 0 0 7 540 2127 1429 0 154 /**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */ 1 5 index 1 1920  
465 0 0 7 540 2127 1429 0 341 /**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */ 1 4 name 1 2067  
466 0 0 6 541 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
467 0 0 6 542 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
468 0 0 6 543 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
469 0 0 6 544 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
470 0 0 6 545 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
471 0 0 6 546 1921 0 0 0 2 4 this 3 2128  5 other 1 2128  
472 0 0 6 547 1920 0 0 209 /**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2128  5 other 1 2128  
473 0 0 6 548 2124 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2128  
474 0 0 6 549 2067 0 0 42 /**
 * Returns the name of the button.
 */ 1 4 this 3 2128  
475 0 0 6 550 1921 0 0 121 /**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */ 1 4 this 3 2128  
476 0 0 6 551 1967 0 0 109 /**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */ 1 4 this 3 2128  
477 0 0 7 552 2127 1429 0 373 /**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */ 1 4 this 3 2128  
478 0 0 6 553 1921 0 0 263 /**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */ 2 4 this 3 2128  5 other 1 2128  
479 0 0 6 554 1920 0 0 363 /**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */ 1 4 this 3 2128  
480 0 0 4 555 2053 0 0 10 /**
 *
 */ 2 4 this 3 2128  3 out 1 2063  
481 0 0 7 556 2127 1429 0 0 0 
482 0 0 7 565 2065 0 0 0 0 
483 0 0 6 557 1921 0 0 0 1 4 this 3 2128  
484 0 0 7 573 2132 1436 0 0 1 6 param0 0 2130  
485 0 0 7 568 2127 1429 0 150 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */ 2 4 this 3 2132  4 name 1 2067  
486 0 0 7 569 2127 1429 0 144 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */ 2 4 this 3 2132  4 name 1 2067  
487 0 0 7 570 2127 1429 0 169 /**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */ 2 4 this 3 2130  16 ascii_equivalent 1 1967  
488 0 0 4 571 2053 0 0 10 /**
 *
 */ 2 4 this 3 2130  3 out 1 2063  
489 0 0 6 572 2132 0 0 67 /**
 * Returns the pointer to the global ButtonRegistry object.
 */ 0 
490 0 0 7 584 2133 1445 0 0 0 
491 0 0 7 584 2133 1445 0 0 1 6 param0 0 2134  
492 0 0 6 577 2124 0 0 76 /**
 * Returns the number of buttons that this button mapping specifies.
 */ 1 4 this 3 2134  
493 0 0 7 578 2127 1429 0 76 /**
 * Returns the underlying raw button associated with the nth button.
 */ 2 4 this 3 2134  1 i 1 2124  
494 0 0 7 579 2127 1429 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2134  3 raw 1 2127  
495 0 0 7 579 2127 1429 0 101 /**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */ 2 4 this 3 2134  1 i 1 2124  
496 0 0 7 579 2127 1429 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2134  8 raw_name 1 2067  
497 0 0 6 580 2067 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2134  3 raw 1 2127  
498 0 0 6 580 2067 0 0 127 /**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */ 2 4 this 3 2134  1 i 1 2124  
499 0 0 6 580 2067 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2134  8 raw_name 1 2067  
500 0 0 4 581 2053 0 0 10 /**
 *
 */ 2 4 this 3 2134  3 out 1 2063  
501 0 0 4 582 2053 0 0 10 /**
 *
 */ 3 4 this 3 2134  3 out 1 2063  12 indent_level 1 1920  
502 0 0 7 583 2065 0 0 0 0 
503 0 0 7 590 2138 1450 0 0 1 6 param0 0 2136  
504 0 0 4 587 2053 0 0 10 /**
 *
 */ 2 4 this 3 2136  3 out 1 2063  
505 0 0 7 588 2138 1450 0 0 1 8 function 1 1949  
506 0 0 7 589 2065 0 0 0 0 
507 0 0 6 593 1920 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2139  
508 0 0 4 594 2053 0 0 108 /**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2139  
509 0 0 6 595 1921 0 0 202 /**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2139  
510 0 0 6 596 1921 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2139  
511 0 0 7 598 2065 0 0 0 0 
512 0 0 4 600 2053 0 0 10 /**
 *
 */ 2 4 this 3 2141  3 out 1 2063  
513 0 0 4 601 2053 0 0 159 /**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */ 1 4 this 3 2143  
514 0 0 7 602 2065 0 0 0 0 
515 0 0 7 605 2144 1450 0 10 /**
 *
 */ 1 8 function 1 1949  
516 0 0 7 605 2144 1450 0 0 1 6 param0 0 2145  
517 0 0 4 606 2053 0 0 0 2 4 this 3 2144  4 size 1 2124  
518 0 0 4 609 2053 0 0 126 /**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */ 2 4 this 3 2144  8 function 1 1949  
519 0 0 6 610 1949 0 0 64 /**
 * Returns the function that is called for the callback.
 */ 1 4 this 3 2144  
520 0 0 7 612 2065 0 0 0 0 
521 0 0 7 614 2147 1472 0 10 /**
 *
 */ 0 
522 0 0 7 614 2147 1472 0 0 1 6 param0 0 2148  
523 0 0 6 615 1977 0 0 10 /**
 *
 */ 1 4 this 3 2148  
524 0 0 6 616 1977 0 0 10 /**
 *
 */ 1 4 this 3 2148  
525 0 0 7 626 2152 0 0 10 /**
 *
 */ 1 4 copy 1 2150  
526 0 0 7 626 2152 0 0 10 /**
 *
 */ 1 4 mode 1 1980  
527 0 0 4 627 2053 0 0 1841 /**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */ 2 4 this 3 2152  4 mode 1 1980  
528 0 0 6 628 1980 0 0 66 /**
 * Returns the current mode of the clock.  See set_mode().
 */ 1 4 this 3 2150  
529 0 0 6 630 1919 0 0 350 /**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
530 0 0 6 631 1919 0 0 434 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */ 1 4 this 3 2150  
531 0 0 6 632 1919 0 0 440 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */ 1 4 this 3 2150  
532 0 0 4 633 2053 0 0 75 /**
 * Simultaneously resets both the time and the frame count to zero.
 */ 1 4 this 3 2152  
533 0 0 4 634 2053 0 0 316 /**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */ 2 4 this 3 2152  4 time 1 1919  
534 0 0 4 635 2053 0 0 215 /**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */ 3 4 this 3 2152  4 time 1 1919  14 current_thread 1 2153  
535 0 0 4 636 2053 0 0 132 /**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */ 3 4 this 3 2152  11 frame_count 1 1920  14 current_thread 1 2153  
536 0 0 6 637 1920 0 0 195 /**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
537 0 0 6 638 1919 0 0 245 /**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
538 0 0 6 643 1919 0 0 130 /**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */ 2 4 this 3 2150  14 current_thread 1 2153  
539 0 0 4 644 2053 0 0 291 /**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */ 2 4 this 3 2152  2 dt 1 1919  
540 0 0 4 645 2053 0 0 291 /**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */ 2 4 this 3 2152  10 frame_rate 1 1919  
541 0 0 6 647 1919 0 0 106 /**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */ 1 4 this 3 2150  
542 0 0 4 648 2053 0 0 511 /**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */ 2 4 this 3 2152  6 max_dt 1 1919  
543 0 0 6 650 1919 0 0 265 /**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 1 4 this 3 2150  
544 0 0 4 651 2053 0 0 262 /**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 2 4 this 3 2152  14 degrade_factor 1 1919  
545 0 0 4 653 2053 0 0 393 /**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */ 2 4 this 3 2152  4 time 1 1919  
546 0 0 6 654 1919 0 0 162 /**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */ 1 4 this 3 2150  
547 0 0 6 656 1919 0 0 214 /**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
548 0 0 6 657 1919 0 0 105 /**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
549 0 0 6 658 1919 0 0 539 /**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */ 2 4 this 3 2150  14 current_thread 1 2153  
550 0 0 4 661 2053 0 0 285 /**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */ 2 4 this 3 2152  14 current_thread 1 2153  
551 0 0 4 662 2053 0 0 417 /**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */ 2 4 this 3 2152  14 current_thread 1 2153  
552 0 0 6 663 1921 0 0 322 /**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */ 2 4 this 3 2152  14 current_thread 1 2153  
553 0 0 7 664 2152 0 0 159 /**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */ 0 
554 0 0 7 665 2065 0 0 0 0 
555 0 0 4 673 2053 0 0 62 /**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */ 1 4 this 3 2155  
556 0 0 6 674 1921 0 0 64 /**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */ 1 4 this 3 2155  
557 0 0 7 675 2065 0 0 0 0 
558 0 0 7 682 2157 1518 0 48 /**
 * Initializes an empty datagram buffer.
 */ 0 
559 0 0 7 682 2157 1518 0 54 /**
 * Initializes the buffer with the given data.
 */ 1 4 data 1 1986  
560 0 0 4 683 2053 0 0 38 /**
 * Clears the internal buffer.
 */ 1 4 this 3 2157  
561 0 0 6 678 1953 0 0 0 1 4 this 3 2157  
562 0 0 6 680 1946 0 0 0 1 4 this 3 2157  
563 0 0 7 692 2158 0 0 10 /**
 *
 */ 0 
564 0 0 6 693 1921 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2158  4 file 1 2159  
565 0 0 6 693 1921 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2158  8 filename 1 2086  
566 0 0 6 693 1921 0 0 230 /**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2158  2 in 1 2162  8 filename 1 2086  
567 0 0 6 694 2162 0 0 61 /**
 * Returns the istream represented by the input file.
 */ 1 4 this 3 2158  
568 0 0 4 695 2053 0 0 98 /**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */ 1 4 this 3 2158  
569 0 0 7 698 2164 0 0 10 /**
 *
 */ 0 
570 0 0 6 699 1921 0 0 102 /**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */ 2 4 this 3 2164  4 file 1 2159  
571 0 0 6 699 1921 0 0 99 /**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2164  8 filename 1 2086  
572 0 0 6 699 1921 0 0 229 /**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2164  3 out 1 2063  8 filename 1 2086  
573 0 0 4 700 2053 0 0 99 /**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */ 1 4 this 3 2164  
574 0 0 6 701 1921 0 0 256 /**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */ 2 4 this 3 2164  6 header 1 2067  
575 0 0 7 706 2165 1582 0 0 0 
576 0 0 7 706 2165 1582 0 0 1 6 param0 0 2166  
577 0 0 7 706 2165 1582 0 0 1 10 init_value 1 1949  
578 0 0 7 707 2165 1582 0 0 0 
579 0 0 7 708 2165 1582 0 0 0 
580 0 0 7 709 2165 1582 0 0 1 7 on_bits 1 1920  
581 0 0 7 710 2165 1582 0 0 1 5 index 1 1920  
582 0 0 7 711 2165 1582 0 0 2 7 low_bit 1 1920  4 size 1 1920  
583 0 0 6 712 1921 0 0 0 0 
584 0 0 6 713 1920 0 0 0 0 
585 0 0 6 714 1920 0 0 0 1 4 this 3 2166  
586 0 0 6 715 1921 0 0 0 2 4 this 3 2166  5 index 1 1920  
587 0 0 4 716 2053 0 0 0 2 4 this 3 2165  5 index 1 1920  
588 0 0 4 717 2053 0 0 0 2 4 this 3 2165  5 index 1 1920  
589 0 0 4 718 2053 0 0 0 3 4 this 3 2165  5 index 1 1920  5 value 1 1921  
590 0 0 6 719 1921 0 0 0 1 4 this 3 2166  
591 0 0 6 720 1921 0 0 0 1 4 this 3 2166  
592 0 0 6 721 2117 0 0 0 3 4 this 3 2166  7 low_bit 1 1920  4 size 1 1920  
593 0 0 4 722 2053 0 0 0 4 4 this 3 2165  5 value 1 2117  7 low_bit 1 1920  4 size 1 1920  
594 0 0 6 723 1921 0 0 0 3 4 this 3 2166  7 low_bit 1 1920  4 size 1 1920  
595 0 0 6 724 1921 0 0 0 3 4 this 3 2166  7 low_bit 1 1920  4 size 1 1920  
596 0 0 4 725 2053 0 0 0 3 4 this 3 2165  7 low_bit 1 1920  4 size 1 1920  
597 0 0 4 726 2053 0 0 0 3 4 this 3 2165  7 low_bit 1 1920  4 size 1 1920  
598 0 0 4 727 2053 0 0 0 4 4 this 3 2165  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
599 0 0 6 728 1920 0 0 0 1 4 this 3 2166  
600 0 0 6 729 1920 0 0 0 1 4 this 3 2166  
601 0 0 6 730 1920 0 0 0 1 4 this 3 2166  
602 0 0 6 731 1920 0 0 0 1 4 this 3 2166  
603 0 0 6 732 1920 0 0 0 1 4 this 3 2166  
604 0 0 6 733 1920 0 0 0 1 4 this 3 2166  
605 0 0 6 734 1920 0 0 0 2 4 this 3 2166  7 low_bit 1 1920  
606 0 0 4 735 2053 0 0 0 1 4 this 3 2165  
607 0 0 6 736 1921 0 0 0 2 4 this 3 2166  5 other 1 2166  
608 0 0 4 737 2053 0 0 0 1 4 this 3 2165  
609 0 0 4 738 2053 0 0 0 2 4 this 3 2166  3 out 1 2063  
610 0 0 4 739 2053 0 0 0 3 4 this 3 2166  3 out 1 2063  12 spaces_every 1 1920  
611 0 0 4 740 2053 0 0 0 3 4 this 3 2166  3 out 1 2063  12 spaces_every 1 1920  
612 0 0 4 741 2053 0 0 0 3 4 this 3 2166  3 out 1 2063  12 indent_level 1 1920  
613 0 0 6 742 1921 0 0 0 2 4 this 3 2166  5 other 1 2166  
614 0 0 6 743 1921 0 0 0 2 4 this 3 2166  5 other 1 2166  
615 0 0 6 744 1921 0 0 0 2 4 this 3 2166  5 other 1 2166  
616 0 0 6 745 1920 0 0 0 2 4 this 3 2166  5 other 1 2166  
617 0 0 7 746 2165 1582 0 0 2 4 this 3 2166  5 other 1 2166  
618 0 0 7 747 2165 1582 0 0 2 4 this 3 2166  5 other 1 2166  
619 0 0 7 748 2165 1582 0 0 2 4 this 3 2166  5 other 1 2166  
620 0 0 7 749 2165 1582 0 0 1 4 this 3 2166  
621 0 0 7 750 2165 1582 0 0 2 4 this 3 2166  5 shift 1 1920  
622 0 0 7 751 2165 1582 0 0 2 4 this 3 2166  5 shift 1 1920  
623 0 0 6 752 2165 0 0 0 2 4 this 3 2165  5 other 1 2166  
624 0 0 6 753 2165 0 0 0 2 4 this 3 2165  5 other 1 2166  
625 0 0 6 754 2165 0 0 0 2 4 this 3 2165  5 other 1 2166  
626 0 0 6 755 2165 0 0 0 2 4 this 3 2165  5 shift 1 1920  
627 0 0 6 756 2165 0 0 0 2 4 this 3 2165  5 shift 1 1920  
628 0 0 6 757 1949 0 0 0 1 4 this 3 2166  
629 0 0 7 758 2065 0 0 0 0 
630 0 0 7 762 2168 1636 0 0 0 
631 0 0 7 762 2168 1636 0 0 1 6 param0 0 2169  
632 0 0 7 762 2168 1636 0 0 1 10 init_value 1 1949  
633 0 0 7 763 2168 1636 0 0 0 
634 0 0 7 764 2168 1636 0 0 0 
635 0 0 7 765 2168 1636 0 0 1 7 on_bits 1 1920  
636 0 0 7 766 2168 1636 0 0 1 5 index 1 1920  
637 0 0 7 767 2168 1636 0 0 2 7 low_bit 1 1920  4 size 1 1920  
638 0 0 6 768 1921 0 0 0 0 
639 0 0 6 769 1920 0 0 0 0 
640 0 0 6 770 1920 0 0 0 1 4 this 3 2169  
641 0 0 6 771 1921 0 0 0 2 4 this 3 2169  5 index 1 1920  
642 0 0 4 772 2053 0 0 0 2 4 this 3 2168  5 index 1 1920  
643 0 0 4 773 2053 0 0 0 2 4 this 3 2168  5 index 1 1920  
644 0 0 4 774 2053 0 0 0 3 4 this 3 2168  5 index 1 1920  5 value 1 1921  
645 0 0 6 775 1921 0 0 0 1 4 this 3 2169  
646 0 0 6 776 1921 0 0 0 1 4 this 3 2169  
647 0 0 6 777 2117 0 0 0 3 4 this 3 2169  7 low_bit 1 1920  4 size 1 1920  
648 0 0 4 778 2053 0 0 0 4 4 this 3 2168  5 value 1 2117  7 low_bit 1 1920  4 size 1 1920  
649 0 0 6 779 1921 0 0 0 3 4 this 3 2169  7 low_bit 1 1920  4 size 1 1920  
650 0 0 6 780 1921 0 0 0 3 4 this 3 2169  7 low_bit 1 1920  4 size 1 1920  
651 0 0 4 781 2053 0 0 0 3 4 this 3 2168  7 low_bit 1 1920  4 size 1 1920  
652 0 0 4 782 2053 0 0 0 3 4 this 3 2168  7 low_bit 1 1920  4 size 1 1920  
653 0 0 4 783 2053 0 0 0 4 4 this 3 2168  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
654 0 0 6 784 1920 0 0 0 1 4 this 3 2169  
655 0 0 6 785 1920 0 0 0 1 4 this 3 2169  
656 0 0 6 786 1920 0 0 0 1 4 this 3 2169  
657 0 0 6 787 1920 0 0 0 1 4 this 3 2169  
658 0 0 6 788 1920 0 0 0 1 4 this 3 2169  
659 0 0 6 789 1920 0 0 0 1 4 this 3 2169  
660 0 0 6 790 1920 0 0 0 2 4 this 3 2169  7 low_bit 1 1920  
661 0 0 4 791 2053 0 0 0 1 4 this 3 2168  
662 0 0 6 792 1921 0 0 0 2 4 this 3 2169  5 other 1 2169  
663 0 0 4 793 2053 0 0 0 1 4 this 3 2168  
664 0 0 4 794 2053 0 0 0 2 4 this 3 2169  3 out 1 2063  
665 0 0 4 795 2053 0 0 0 3 4 this 3 2169  3 out 1 2063  12 spaces_every 1 1920  
666 0 0 4 796 2053 0 0 0 3 4 this 3 2169  3 out 1 2063  12 spaces_every 1 1920  
667 0 0 4 797 2053 0 0 0 3 4 this 3 2169  3 out 1 2063  12 indent_level 1 1920  
668 0 0 6 798 1921 0 0 0 2 4 this 3 2169  5 other 1 2169  
669 0 0 6 799 1921 0 0 0 2 4 this 3 2169  5 other 1 2169  
670 0 0 6 800 1921 0 0 0 2 4 this 3 2169  5 other 1 2169  
671 0 0 6 801 1920 0 0 0 2 4 this 3 2169  5 other 1 2169  
672 0 0 7 802 2168 1636 0 0 2 4 this 3 2169  5 other 1 2169  
673 0 0 7 803 2168 1636 0 0 2 4 this 3 2169  5 other 1 2169  
674 0 0 7 804 2168 1636 0 0 2 4 this 3 2169  5 other 1 2169  
675 0 0 7 805 2168 1636 0 0 1 4 this 3 2169  
676 0 0 7 806 2168 1636 0 0 2 4 this 3 2169  5 shift 1 1920  
677 0 0 7 807 2168 1636 0 0 2 4 this 3 2169  5 shift 1 1920  
678 0 0 6 808 2168 0 0 0 2 4 this 3 2168  5 other 1 2169  
679 0 0 6 809 2168 0 0 0 2 4 this 3 2168  5 other 1 2169  
680 0 0 6 810 2168 0 0 0 2 4 this 3 2168  5 other 1 2169  
681 0 0 6 811 2168 0 0 0 2 4 this 3 2168  5 shift 1 1920  
682 0 0 6 812 2168 0 0 0 2 4 this 3 2168  5 shift 1 1920  
683 0 0 6 813 1949 0 0 0 1 4 this 3 2169  
684 0 0 7 814 2065 0 0 0 0 
685 0 0 7 850 2171 1669 0 0 0 
686 0 0 7 850 2171 1669 0 0 1 6 param0 0 2172  
687 0 0 7 819 2127 1429 0 0 0 
688 0 0 7 820 2127 1429 0 0 0 
689 0 0 7 821 2127 1429 0 0 0 
690 0 0 7 822 2127 1429 0 0 0 
691 0 0 7 823 2127 1429 0 0 0 
692 0 0 7 824 2127 1429 0 0 0 
693 0 0 7 825 2127 1429 0 0 0 
694 0 0 7 826 2127 1429 0 0 0 
695 0 0 7 827 2127 1429 0 0 0 
696 0 0 7 828 2127 1429 0 0 0 
697 0 0 7 829 2127 1429 0 0 0 
698 0 0 7 830 2127 1429 0 0 0 
699 0 0 7 831 2127 1429 0 0 0 
700 0 0 7 832 2127 1429 0 0 0 
701 0 0 7 833 2127 1429 0 0 0 
702 0 0 7 834 2127 1429 0 0 0 
703 0 0 7 835 2127 1429 0 0 0 
704 0 0 7 836 2127 1429 0 0 0 
705 0 0 7 837 2127 1429 0 0 0 
706 0 0 7 838 2127 1429 0 0 0 
707 0 0 7 839 2127 1429 0 0 0 
708 0 0 7 840 2127 1429 0 0 0 
709 0 0 7 841 2127 1429 0 0 0 
710 0 0 7 842 2127 1429 0 0 0 
711 0 0 7 843 2127 1429 0 0 0 
712 0 0 7 844 2127 1429 0 74 // Flight stick buttons, takes zero-based index.  First is always trigger. 0 
713 0 0 7 845 2127 1429 0 169 /**
 * Returns the ButtonHandle associated with the particular numbered joystick
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1920  
714 0 0 7 846 2127 1429 0 0 0 
715 0 0 7 847 2127 1429 0 0 0 
716 0 0 7 848 2127 1429 0 0 0 
717 0 0 7 849 2127 1429 0 0 0 
718 0 0 7 905 2174 1723 0 0 0 
719 0 0 7 905 2174 1723 0 0 1 6 param0 0 2175  
720 0 0 7 853 2127 1429 0 144 /**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */ 1 16 ascii_equivalent 1 1967  
721 0 0 7 854 2127 1429 0 0 0 
722 0 0 7 855 2127 1429 0 0 0 
723 0 0 7 856 2127 1429 0 0 0 
724 0 0 7 857 2127 1429 0 0 0 
725 0 0 7 858 2127 1429 0 0 0 
726 0 0 7 859 2127 1429 0 0 0 
727 0 0 7 860 2127 1429 0 0 0 
728 0 0 7 861 2127 1429 0 0 0 
729 0 0 7 862 2127 1429 0 0 0 
730 0 0 7 863 2127 1429 0 0 0 
731 0 0 7 864 2127 1429 0 0 0 
732 0 0 7 865 2127 1429 0 0 0 
733 0 0 7 866 2127 1429 0 0 0 
734 0 0 7 867 2127 1429 0 0 0 
735 0 0 7 868 2127 1429 0 0 0 
736 0 0 7 869 2127 1429 0 0 0 
737 0 0 7 870 2127 1429 0 0 0 
738 0 0 7 871 2127 1429 0 59 // PC keyboards don't have these four buttons, but Macs do. 0 
739 0 0 7 872 2127 1429 0 0 0 
740 0 0 7 873 2127 1429 0 0 0 
741 0 0 7 874 2127 1429 0 0 0 
742 0 0 7 875 2127 1429 0 0 0 
743 0 0 7 876 2127 1429 0 0 0 
744 0 0 7 877 2127 1429 0 0 0 
745 0 0 7 878 2127 1429 0 0 0 
746 0 0 7 879 2127 1429 0 0 0 
747 0 0 7 880 2127 1429 0 0 0 
748 0 0 7 881 2127 1429 0 0 0 
749 0 0 7 882 2127 1429 0 0 0 
750 0 0 7 883 2127 1429 0 0 0 
751 0 0 7 884 2127 1429 0 27 // delete is a C++ keyword. 0 
752 0 0 7 885 2127 1429 0 27 // delete is a C++ keyword. 0 
753 0 0 7 886 2127 1429 0 0 0 
754 0 0 7 887 2127 1429 0 0 0 
755 0 0 7 888 2127 1429 0 0 0 
756 0 0 7 889 2127 1429 0 0 0 
757 0 0 7 890 2127 1429 0 0 0 
758 0 0 7 891 2127 1429 0 0 0 
759 0 0 7 892 2127 1429 0 0 0 
760 0 0 7 893 2127 1429 0 0 0 
761 0 0 7 894 2127 1429 0 0 0 
762 0 0 7 895 2127 1429 0 0 0 
763 0 0 7 896 2127 1429 0 0 0 
764 0 0 7 897 2127 1429 0 0 0 
765 0 0 7 898 2127 1429 0 0 0 
766 0 0 7 899 2127 1429 0 0 0 
767 0 0 7 900 2127 1429 0 0 0 
768 0 0 7 901 2127 1429 0 0 0 
769 0 0 7 902 2127 1429 0 0 0 
770 0 0 7 903 2127 1429 0 0 0 
771 0 0 7 904 2127 1429 0 0 0 
772 0 0 7 912 2177 1729 0 10 /**
 *
 */ 0 
773 0 0 7 912 2177 1729 0 10 /**
 *
 */ 1 4 copy 1 2178  
774 0 0 6 914 2177 0 0 0 2 4 this 3 2177  4 copy 1 2178  
775 0 0 6 915 1921 0 0 0 2 4 this 3 2178  5 other 1 2178  
776 0 0 6 916 1921 0 0 0 2 4 this 3 2178  5 other 1 2178  
777 0 0 6 917 1921 0 0 0 2 4 this 3 2178  5 other 1 2178  
778 0 0 7 918 2177 1729 0 0 2 4 this 3 2178  5 other 1 2178  
779 0 0 7 919 2177 1729 0 0 2 4 this 3 2178  5 other 1 2178  
780 0 0 6 920 2177 0 0 0 2 4 this 3 2177  5 other 1 2178  
781 0 0 6 921 2177 0 0 0 2 4 this 3 2177  5 other 1 2178  
782 0 0 4 922 2053 0 0 374 /**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */ 2 4 this 3 2177  5 other 1 2178  
783 0 0 6 923 1921 0 0 232 /**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */ 2 4 this 3 2178  5 other 1 2178  
784 0 0 6 924 1921 0 0 248 /**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */ 2 4 this 3 2177  6 button 1 2127  
785 0 0 6 925 1921 0 0 109 /**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */ 2 4 this 3 2178  6 button 1 2127  
786 0 0 6 926 1921 0 0 313 /**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */ 2 4 this 3 2177  6 button 1 2127  
787 0 0 6 927 1920 0 0 143 /**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */ 1 4 this 3 2178  
788 0 0 7 928 2127 1429 0 185 /**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */ 2 4 this 3 2178  5 index 1 1920  
789 0 0 6 931 1921 0 0 305 /**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2177  6 button 1 2127  
790 0 0 6 932 1921 0 0 306 /**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2177  6 button 1 2127  
791 0 0 4 933 2053 0 0 66 /**
 * Marks all monitored buttons as being in the "up" state.
 */ 1 4 this 3 2177  
792 0 0 6 934 1921 0 0 157 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */ 2 4 this 3 2178  6 button 1 2127  
793 0 0 6 934 1921 0 0 105 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */ 2 4 this 3 2178  5 index 1 1920  
794 0 0 6 935 1921 0 0 109 /**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */ 1 4 this 3 2178  
795 0 0 6 936 2067 0 0 150 /**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */ 1 4 this 3 2178  
796 0 0 4 937 2053 0 0 69 /**
 * Writes a one-line summary of the buttons known to be down.
 */ 2 4 this 3 2178  3 out 1 2063  
797 0 0 4 938 2053 0 0 123 /**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */ 2 4 this 3 2178  3 out 1 2063  
798 0 0 7 951 2180 1765 0 0 0 
799 0 0 7 951 2180 1765 0 0 1 6 param0 0 2181  
800 0 0 7 940 2127 1429 0 166 /**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1920  
801 0 0 7 941 2127 1429 0 75 /**
 * Returns the ButtonHandle associated with the first mouse button.
 */ 0 
802 0 0 7 942 2127 1429 0 76 /**
 * Returns the ButtonHandle associated with the second mouse button.
 */ 0 
803 0 0 7 943 2127 1429 0 75 /**
 * Returns the ButtonHandle associated with the third mouse button.
 */ 0 
804 0 0 7 944 2127 1429 0 76 /**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */ 0 
805 0 0 7 945 2127 1429 0 75 /**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */ 0 
806 0 0 7 946 2127 1429 0 98 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */ 0 
807 0 0 7 947 2127 1429 0 100 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */ 0 
808 0 0 7 948 2127 1429 0 148 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
809 0 0 7 949 2127 1429 0 149 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
810 0 0 6 950 1921 0 0 117 /**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */ 1 6 button 1 2127  
811 0 0 7 967 2183 1773 0 0 0 
812 0 0 7 967 2183 1773 0 0 1 6 param0 0 2184  
813 0 0 6 955 1919 0 0 10 /**
 *
 */ 1 4 this 3 2184  
814 0 0 6 956 1919 0 0 10 /**
 *
 */ 1 4 this 3 2184  
815 0 0 6 957 1921 0 0 157 /**
 * If this returns false, the pointer is not currently present in the window
 * and the values returned by get_x() and get_y() may not be meaningful.
 */ 1 4 this 3 2184  
816 0 0 6 971 1920 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2186  
817 0 0 4 972 2053 0 0 349 /**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2186  
818 0 0 6 973 1921 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2186  
819 0 0 6 974 1921 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2186  
820 0 0 6 976 1920 0 0 293 /**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */ 1 4 this 3 2186  
821 0 0 7 977 2065 0 0 0 0 
822 0 0 7 979 2188 1834 0 10 /**
 *
 */ 0 
823 0 0 7 979 2188 1834 0 10 /**
 *
 */ 1 4 from 1 2119  
824 0 0 7 979 2188 1834 0 0 1 6 param0 0 2122  
825 0 0 7 980 2188 1834 0 72 /**
 * Returns a SparseArray with an infinite array of bits, all on.
 */ 0 
826 0 0 7 981 2188 1834 0 56 /**
 * Returns a SparseArray whose bits are all off.
 */ 0 
827 0 0 7 982 2188 1834 0 65 /**
 * Returns a SparseArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1920  
828 0 0 7 983 2188 1834 0 64 /**
 * Returns a SparseArray with only the indicated bit on.
 */ 1 5 index 1 1920  
829 0 0 7 984 2188 1834 0 79 /**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1920  4 size 1 1920  
830 0 0 6 985 1921 0 0 393 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */ 0 
831 0 0 6 986 1920 0 0 428 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */ 0 
832 0 0 6 987 1920 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2122  
833 0 0 6 988 1921 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2122  5 index 1 1920  
834 0 0 4 989 2053 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2188  5 index 1 1920  
835 0 0 4 990 2053 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2188  5 index 1 1920  
836 0 0 4 991 2053 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2188  5 index 1 1920  5 value 1 1921  
837 0 0 6 992 1921 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2122  
838 0 0 6 993 1921 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2122  
839 0 0 6 994 1921 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2122  
840 0 0 6 995 1921 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2122  7 low_bit 1 1920  4 size 1 1920  
841 0 0 6 996 1921 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2122  7 low_bit 1 1920  4 size 1 1920  
842 0 0 4 997 2053 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2188  7 low_bit 1 1920  4 size 1 1920  
843 0 0 4 998 2053 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2188  7 low_bit 1 1920  4 size 1 1920  
844 0 0 4 999 2053 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2188  5 value 1 1921  7 low_bit 1 1920  4 size 1 1920  
845 0 0 6 1000 1920 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2122  
846 0 0 6 1001 1920 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2122  
847 0 0 6 1002 1920 0 0 146 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2122  
848 0 0 6 1003 1920 0 0 146 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2122  
849 0 0 6 1004 1920 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2122  
850 0 0 6 1005 1920 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2122  
851 0 0 6 1006 1920 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2122  7 low_bit 1 1920  
852 0 0 4 1007 2053 0 0 93 /**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2188  
853 0 0 6 1008 1921 0 0 181 /**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2122  5 other 1 2122  
854 0 0 4 1009 2053 0 0 52 /**
 * Sets all the bits in the SparseArray off.
 */ 1 4 this 3 2188  
855 0 0 4 1010 2053 0 0 10 /**
 *
 */ 2 4 this 3 2122  3 out 1 2063  
856 0 0 6 1011 1921 0 0 0 2 4 this 3 2122  5 other 1 2122  
857 0 0 6 1012 1921 0 0 0 2 4 this 3 2122  5 other 1 2122  
858 0 0 6 1013 1921 0 0 0 2 4 this 3 2122  5 other 1 2122  
859 0 0 6 1014 1920 0 0 242 /**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */ 2 4 this 3 2122  5 other 1 2122  
860 0 0 7 1015 2188 1834 0 0 2 4 this 3 2122  5 other 1 2122  
861 0 0 7 1016 2188 1834 0 0 2 4 this 3 2122  5 other 1 2122  
862 0 0 7 1017 2188 1834 0 0 2 4 this 3 2122  5 other 1 2122  
863 0 0 7 1018 2188 1834 0 0 1 4 this 3 2122  
864 0 0 7 1019 2188 1834 0 0 2 4 this 3 2122  5 shift 1 1920  
865 0 0 7 1020 2188 1834 0 0 2 4 this 3 2122  5 shift 1 1920  
866 0 0 6 1021 2188 0 0 0 2 4 this 3 2188  5 other 1 2122  
867 0 0 6 1022 2188 0 0 0 2 4 this 3 2188  5 other 1 2122  
868 0 0 6 1023 2188 0 0 0 2 4 this 3 2188  5 other 1 2122  
869 0 0 6 1024 2188 0 0 0 2 4 this 3 2188  5 shift 1 1920  
870 0 0 6 1025 2188 0 0 0 2 4 this 3 2188  5 shift 1 1920  
871 0 0 6 1026 1921 0 0 330 /**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */ 1 4 this 3 2122  
872 0 0 6 1027 2124 0 0 237 /**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */ 1 4 this 3 2122  
873 0 0 6 1028 1920 0 0 94 /**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2122  1 n 1 2124  
874 0 0 6 1029 1920 0 0 104 /**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2122  1 n 1 2124  
875 0 0 6 1030 1949 0 0 0 1 4 this 3 2122  
876 0 0 4 1031 2053 0 0 0 2 4 this 3 2188  5 state 1 1949  
877 0 0 7 1032 2065 0 0 0 0 
878 0 0 7 1035 2065 0 0 52 /**
 * Returns the type of the underlying value.
 */ 1 4 this 3 2189  
879 0 0 4 1036 2053 0 0 0 2 4 this 3 2189  3 out 1 2063  
880 0 0 7 1037 2065 0 0 0 0 
881 0 0 7 1039 2193 1052 0 10 /**
 *
 */ 1 5 value 1 2191  
882 0 0 7 1040 2008 0 0 55 /**
 * Retrieves the value stored in the parameter.
 */ 1 4 this 3 2194  
883 0 0 7 1043 2065 0 0 0 0 
884 0 0 7 1045 2196 1052 0 0 1 5 value 1 2067  
885 0 0 4 1046 2053 0 0 0 2 4 this 3 2196  5 value 1 2067  
886 0 0 6 1047 2067 0 0 0 1 4 this 3 2197  
887 0 0 7 1051 2065 0 0 0 0 
888 0 0 7 1054 2199 1052 0 0 1 5 value 1 2067  
889 0 0 4 1055 2053 0 0 0 2 4 this 3 2199  5 value 1 2067  
890 0 0 6 1056 2067 0 0 0 1 4 this 3 2200  
891 0 0 7 1058 2065 0 0 0 0 
892 0 0 7 1061 2205 1052 0 0 1 5 value 1 2202  
893 0 0 4 1062 2053 0 0 0 2 4 this 3 2205  5 value 1 2202  
894 0 0 6 1063 2202 0 0 0 1 4 this 3 2206  
895 0 0 7 1065 2065 0 0 0 0 
896 0 0 7 1068 2211 1052 0 0 1 5 value 1 2208  
897 0 0 4 1069 2053 0 0 0 2 4 this 3 2211  5 value 1 2208  
898 0 0 6 1070 2208 0 0 0 1 4 this 3 2212  
899 0 0 7 1072 2065 0 0 0 0 
900 0 0 7 1075 2217 1052 0 0 1 5 value 1 2214  
901 0 0 4 1076 2053 0 0 0 2 4 this 3 2217  5 value 1 2214  
902 0 0 6 1077 2214 0 0 0 1 4 this 3 2218  
903 0 0 7 1079 2065 0 0 0 0 
904 0 0 7 1082 2223 1052 0 0 1 5 value 1 2220  
905 0 0 4 1083 2053 0 0 0 2 4 this 3 2223  5 value 1 2220  
906 0 0 6 1084 2220 0 0 0 1 4 this 3 2224  
907 0 0 7 1086 2065 0 0 0 0 
908 0 0 7 1089 2229 1052 0 0 1 5 value 1 2226  
909 0 0 4 1090 2053 0 0 0 2 4 this 3 2229  5 value 1 2226  
910 0 0 6 1091 2226 0 0 0 1 4 this 3 2230  
911 0 0 7 1093 2065 0 0 0 0 
912 0 0 7 1096 2235 1052 0 0 1 5 value 1 2232  
913 0 0 4 1097 2053 0 0 0 2 4 this 3 2235  5 value 1 2232  
914 0 0 6 1098 2232 0 0 0 1 4 this 3 2236  
915 0 0 7 1100 2065 0 0 0 0 
916 0 0 7 1103 2241 1052 0 0 1 5 value 1 2238  
917 0 0 4 1104 2053 0 0 0 2 4 this 3 2241  5 value 1 2238  
918 0 0 6 1105 2238 0 0 0 1 4 this 3 2242  
919 0 0 7 1107 2065 0 0 0 0 
920 0 0 7 1110 2247 1052 0 0 1 5 value 1 2244  
921 0 0 4 1111 2053 0 0 0 2 4 this 3 2247  5 value 1 2244  
922 0 0 6 1112 2244 0 0 0 1 4 this 3 2248  
923 0 0 7 1114 2065 0 0 0 0 
924 0 0 7 1117 2253 1052 0 0 1 5 value 1 2250  
925 0 0 4 1118 2053 0 0 0 2 4 this 3 2253  5 value 1 2250  
926 0 0 6 1119 2250 0 0 0 1 4 this 3 2254  
927 0 0 7 1121 2065 0 0 0 0 
928 0 0 7 1124 2259 1052 0 0 1 5 value 1 2256  
929 0 0 4 1125 2053 0 0 0 2 4 this 3 2259  5 value 1 2256  
930 0 0 6 1126 2256 0 0 0 1 4 this 3 2260  
931 0 0 7 1128 2065 0 0 0 0 
932 0 0 7 1131 2265 1052 0 0 1 5 value 1 2262  
933 0 0 4 1132 2053 0 0 0 2 4 this 3 2265  5 value 1 2262  
934 0 0 6 1133 2262 0 0 0 1 4 this 3 2266  
935 0 0 7 1135 2065 0 0 0 0 
936 0 0 7 1138 2271 1052 0 0 1 5 value 1 2268  
937 0 0 4 1139 2053 0 0 0 2 4 this 3 2271  5 value 1 2268  
938 0 0 6 1140 2268 0 0 0 1 4 this 3 2272  
939 0 0 7 1142 2065 0 0 0 0 
940 0 0 7 1145 2277 1052 0 0 1 5 value 1 2274  
941 0 0 4 1146 2053 0 0 0 2 4 this 3 2277  5 value 1 2274  
942 0 0 6 1147 2274 0 0 0 1 4 this 3 2278  
943 0 0 7 1149 2065 0 0 0 0 
944 0 0 7 1157 2065 0 0 0 0 
945 0 0 7 1160 2282 1904 0 0 1 6 param0 0 2280  
946 0 0 7 1160 2282 1904 0 56 /**
 * Create a free id pool in the range [min:max].
 */ 2 3 min 1 2112  3 max 1 2112  
947 0 0 6 1162 2112 0 0 134 /**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */ 1 4 this 3 2282  
948 0 0 4 1163 2053 0 0 518 /**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */ 2 4 this 3 2282  2 id 1 2112  
949 0 0 4 1164 2053 0 0 112 /**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */ 2 4 this 3 2282  5 index 1 2112  
950 0 0 6 1165 2283 0 0 117 /**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */ 1 4 this 3 2280  
951 0 0 4 1166 2053 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2280  3 out 1 2063  
952 0 0 4 1167 2053 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2280  3 out 1 2063  
953 0 0 6 668 1982 0 0 0 1 3 str 1 2067  
954 0 0 6 669 2067 0 0 0 1 2 cs 1 1982  
955 0 0 6 670 2285 0 0 0 0 
956 0 0 6 671 2285 0 0 0 0 
957 0 0 6 907 2287 0 0 602 /**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */ 1 8 filename 1 2086  
958 0 0 6 908 2287 0 0 396 /**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */ 2 4 name 1 2067  4 data 1 2067  
959 0 0 6 909 1921 0 0 0 1 4 page 1 2287  
960 0 0 4 910 2053 0 0 0 1 4 hash 1 2289  
961 0 0 6 1168 1949 0 0 203 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */ 2 10 this_class 1 1949  4 data 1 1986  
962 0 0 6 1169 1949 0 0 398 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */ 3 9 unpickler 1 1949  10 this_class 1 1949  4 data 1 1986  
378
1913 29 ConstPointerToArray< ushort > 0 141313 29 ConstPointerToArray< ushort > 29 ConstPointerToArray< ushort > 0 0 0 1 966 978 0 11 967 968 969 970 971 972 973 974 975 976 977 0 0 1 0 1914 0 0 0 0 0

1914 28 PointerToArrayBase< ushort > 0 26625 28 PointerToArrayBase< ushort > 28 PointerToArrayBase< ushort > 0 0 0 0 965 0 0 0 0 1 0 1915 0 0 0 0 0

1915 49 PointerToBase< ReferenceCountedVector< ushort > > 0 43009 49 PointerToBase< ReferenceCountedVector< ushort > > 49 PointerToBase< ReferenceCountedVector< ushort > > 0 0 0 0 0 0 2 963 964 0 0 1 0 1916 0 0 0 0 0

1916 13 PointerToVoid 0 2048 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1917 24 PointerToArray< ushort > 0 141313 24 PointerToArray< ushort > 24 PointerToArray< ushort > 0 0 0 1 979 998 0 18 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 0 0 1 0 1914 0 0 0 0 0

1918 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 999 9 2291 2292 2293 2294 2295 2296 2297 2298 2299 17 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 0 0 0 0 0 226
/**
 * This is the fundamental interface for things that have a play/loop/stop
 * type interface for frame-based animation, such as animated characters.
 * This is the base class for AnimControl and other, similar classes.
 */

1919 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1920 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1921 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1922 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1923 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 1017 1037 1 2300 19 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 0 0 0 0 0 761
/**
 * This is a sequence number that increments monotonically.  It can be used to
 * track cache updates, or serve as a kind of timestamp for any changing
 * properties.
 *
 * A special class is used instead of simply an int, so we can elegantly
 * handle such things as wraparound and special cases.  There are two special
 * cases.  Firstly, a sequence number is 'initial' when it is first created.
 * This sequence is older than any other sequence number.  Secondly, a
 * sequence number may be explicitly set to 'old'.  This is older than any
 * other sequence number except 'initial'.  Finally, we have the explicit
 * number 'fresh', which is newer than any other sequence number.  All other
 * sequences are numeric and are monotonically increasing.
 */

1924 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 1925 0 1926 0 0 0 0 0 0 0 0 0 0

1925 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

1926 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1927 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 8 1038 1039 1040 1041 1042 1043 1044 1045 0 0 1 0 1928 0 0 0 0 135
/**
 * Base class for objects that can be written to and read from Bam files.
 *
 * See also TypedObject for detailed instructions.
 */

1928 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1929 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1052 0 2 1050 1051 0 0 2 3 1927 1046 1047 3 1930 1048 1049 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1930 14 ReferenceCount 0 2048 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1931 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1057 5 2301 2302 2303 2304 2305 19 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 0 0 2 3 1929 1053 1054 3 1932 1055 1056 0 0 231
/**
 * An instance of this class is written to the front of a Bam or Txo file to
 * make the file a cached instance of some other loadable resource.  This
 * record contains information needed to test the validity of the cache.
 */

1932 14 LinkedListNode 0 1050624 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 468
/**
 * This just stores the pointers to implement a doubly-linked list of some
 * kind of object.  There are occasions when a hand-rolled linked list is more
 * appropriate than an STL container.
 *
 * Typically, each node of the linked list, as well as the root of the list,
 * will inherit from this class.
 *
 * Note that this class is not inherently thread-safe; derived classes are
 * responsible for protecting any calls into it within mutexes, if necessary.
 */

1933 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1934 0 0 0 0 0 0 0 0 0 0

1934 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1935 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1926 0 0 0 0 0 0 0 0 0 0

1936 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1927 0 0 0 0 0 0 0 0 0 0

1937 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1077 1078 9 2306 2307 2308 2309 2310 2311 2312 2313 2314 26 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 0 0 0 0 0 615
/**
 * This class maintains a cache of Bam and/or Txo objects generated from model
 * files and texture images (as well as possibly other kinds of loadable
 * objects that can be stored in bam file format).
 *
 * This class also maintains a persistent index that lists all of the cached
 * objects (see BamCacheIndex). We go through some considerable effort to make
 * sure this index gets saved correctly to disk, even in the presence of
 * multiple different processes writing to the same index, and without relying
 * too heavily on low-level os-provided file locks (which work poorly with C++
 * iostreams).
 */

1938 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 1 1105 1106 0 0 0 0 0 0 3 1939 1940 1941 104
/**
 * This class exists just to provide scoping for the enums shared by BamReader
 * and BamWriter.
 */

1939 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1938 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 365
/**
   * This defines an enumerated type used to represent the endianness of
   * certain numeric values stored in a Bam file.  It really has only two
   * possible values, either BE_bigendian or BE_littleendian; but through a
   * preprocessor trick we also add BE_native, which is the same numerically
   * as whichever value the hardware supports natively.
   */

1940 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1938 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 107
// Indicates an object definition, and will always be eventually paired
// with a BOC_pop (which does not).
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 105
// Includes an object definition but does not push the level; it is
// associated with the current level.
2 10 BOC_remove 20 BamEnums::BOC_remove 65
// Lists object IDs that have been deallocated on the sender end.
3 13 BOC_file_data 23 BamEnums::BOC_file_data 137
// May appear at any level and indicates the following datagram contains
// auxiliary file data that may be referenced by a later object.
4 0 107
/**
   * This is the code written along with each object.  It is used to control
   * object scoping.
   */

1941 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1938 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 73
// This enum is used to control how textures are written to a bam stream.

1942 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1107 1117 4 2315 2316 2317 2318 9 1108 1109 1110 1111 1112 1113 1114 1115 1116 0 0 0 0 2 1943 1944 65
/**
 * Specifies parameters that may be passed to the loader.
 */

1943 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1942 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1944 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1942 0 0 0 0 0 0 0 0 0 8 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 20 TF_allow_compression 35 LoaderOptions::TF_allow_compression 33
// Consider compressing RAM image
512 0 35
// Flags for loading texture files.

1945 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1118 1119 6 2319 2320 2321 2322 2323 2324 20 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 0 0 1 0 1938 0 0 0 0 1311
/**
 * This is the fundamental interface for extracting binary objects from a Bam
 * file, as generated by a BamWriter.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects
 * within the Bam file; the BamReader automatically manages these (with help
 * from code within each class) and restores the pointers correctly.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramGenerator of some kind, which is simply a
 * linear source of Datagrams.  It is probably from a disk file, but it might
 * conceivably be streamed directly from a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1946 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1947 0 0 0 0 0 0 0 0 0 0

1947 17 DatagramGenerator 0 2048 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1948 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1942 0 0 0 0 0 0 0 0 0 0

1949 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1950 0 0 0 0 0 0 0 0 0 0

1950 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1951 0 0 0 0 0 0 0 0 0 0

1951 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1952 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1140 1141 6 2325 2326 2327 2328 2329 2330 16 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 0 0 1 0 1938 0 0 0 0 1376
/**
 * This is the fundamental interface for writing binary objects to a Bam file,
 * to be extracted later by a BamReader.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects; the
 * BamWriter automatically manages these (with help from code within each
 * class) and writes all referenced objects to the file in such a way that the
 * pointers may be correctly restored later.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramSink of some kind, which simply accepts a
 * linear stream of Datagrams.  It is probably written to a disk file, but it
 * might conceivably be streamed directly to a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1953 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1954 0 0 0 0 0 0 0 0 0 0

1954 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1955 23 BitMask< uint16_t, 16 > 0 141313 23 BitMask< uint16_t, 16 > 23 BitMask< uint16_t, 16 > 0 0 0 1 1158 1221 0 62 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 0 0 0 0 0 0

1956 9 BitMask16 0 2105345 9 BitMask16 9 BitMask16 0 0 1955 0 0 0 0 0 0 0 0 0 0

1957 23 BitMask< uint32_t, 32 > 0 141313 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 1 1222 1285 0 62 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 0 0 0 0 0 0

1958 9 BitMask32 0 2105345 9 BitMask32 9 BitMask32 0 0 1957 0 0 0 0 0 0 0 0 0 0

1959 23 BitMask< uint64_t, 64 > 0 141313 23 BitMask< uint64_t, 64 > 23 BitMask< uint64_t, 64 > 0 0 0 1 1286 1349 0 62 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 0 0 0 0 0 0

1960 9 BitMask64 0 2105345 9 BitMask64 9 BitMask64 0 0 1959 0 0 0 0 0 0 0 0 0 0

1961 13 BitMaskNative 0 1 13 BitMaskNative 13 BitMaskNative 0 0 0 0 0 0 0 0 0 0 0 0 0

1962 8 BitArray 0 141313 8 BitArray 8 BitArray 0 0 0 1 1350 1409 0 58 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 0 0 0 0 1 1963 210
/**
 * A dynamic array with an unlimited number of bits.
 *
 * This is similar to a BitMask, except it appears to contain an infinite
 * number of bits.  You can use it very much as you would use a BitMask.
 */

1963 0 0 794624 10 BitArray:: 0 1962 0 0 0 0 0 0 0 0 0 1 17 num_bits_per_word 27 BitArray::num_bits_per_word 0
64 0 0

1964 12 ButtonHandle 0 16918529 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1410 1429 4 2331 2332 2333 2334 17 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1428 0 1 1427 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

1965 6 string 0 2105344 11 std::string 11 std::string 0 0 1966 0 0 0 0 0 0 0 0 0 0

1966 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1967 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1968 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 1 1435 1436 0 5 1430 1431 1432 1433 1434 0 0 0 0 0 188
/**
 * The ButtonRegistry class maintains all the assigned ButtonHandles in a
 * given system.  There should be only one ButtonRegistry class during the
 * lifetime of the application.
 */

1969 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 1 1444 1445 0 7 1437 1438 1439 1440 1441 1442 1443 0 0 1 0 1970 0 0 0 0 328
/**
 * This class represents a map containing all of the buttons of a (keyboard)
 * device, though it can also be used as a generic mapping between
 * ButtonHandles.  It maps an underlying 'raw' button to a 'virtual' button,
 * which may optionally be associated with an appropriate platform-specific
 * name for the button.
 */

1970 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1971 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 1 1449 1450 0 3 1446 1447 1448 0 0 1 0 1970 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1972 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 1 2335 5 1451 1452 1453 1454 1455 0 0 1 0 1929 0 0 0 0 722
/**
 * This is a special extension to ReferenceCount that includes dual reference
 * counts: the standard reference count number, which includes all references
 * to the object, and a separate number (the cache reference count) that
 * counts the number of references to the object just within its cache alone.
 * When get_ref_count() == get_cache_ref_count(), the object is not referenced
 * outside the cache.
 *
 * The cache refs must be explicitly maintained; there is no PointerTo<> class
 * to maintain the cache reference counts automatically.  The cache reference
 * count is automatically included in the overall reference count: calling
 * cache_ref() and cache_unref() automatically calls ref() and unref().
 */

1973 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1459 0 3 1456 1457 1458 0 0 1 0 1928 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1974 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1460 1450 1 2336 6 1461 1462 1463 1464 1465 1466 0 0 1 0 1971 0 0 0 0 158
/**
 * This is a specialization on CallbackObject to allow a callback to directly
 * call an arbitarary Python function.  Powerful!  But use with caution.
 */

1975 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1467 1472 1 2337 2 1468 1469 0 0 0 0 0 0

1976 9 ulong [2] 0 4202496 9 ulong [2] 9 ulong [2] 0 0 1977 2 0 0 0 0 0 0 0 0 0 0

1977 5 ulong 0 2105344 5 ulong 5 ulong 0 0 1978 0 0 0 0 0 0 0 0 0 0

1978 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1979 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1473 0 11 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 28 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 0 0 1 0 1930 0 0 0 1 1980 1000
/**
 * A ClockObject keeps track of elapsed real time and discrete time.  In
 * normal mode, get_frame_time() returns the time as of the last time tick()
 * was called.  This is the "discrete" time, and is usually used to get the
 * time as of, for instance, the beginning of the current frame.
 *
 * In other modes, as set by set_mode() or the clock-mode config variable,
 * get_frame_time() may return other values to simulate different timing
 * effects, for instance to perform non-real-time animation.  See set_mode().
 *
 * In all modes, get_real_time() always returns the elapsed real time in
 * seconds since the ClockObject was constructed, or since it was last reset.
 *
 * You can create your own ClockObject whenever you want to have your own
 * local timer.  There is also a default, global ClockObject intended to
 * represent global time for the application; this is normally set up to tick
 * every frame so that its get_frame_time() will return the time for the
 * current frame.
 */

1980 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1979 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

1981 11 CollideMask 0 2105345 11 CollideMask 11 CollideMask 0 0 1958 0 0 0 0 0 0 0 0 0 0

1982 10 ColorSpace 0 532481 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that a color
// space has not been specified.
0 9 CS_linear 9 CS_linear 389
// CS_linear is not a color space per se, but represents the working color
// space of graphics APIs, which is linearized.  Since the conversion from
// sRGB to linear is defined, one could posit that it has the ITU-R BT.709
// primaries, but this isn't meaningful as modern graphics APIs do not
// perform color management.  All colors in Panda3D are linear unless
// otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as used by
// the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding color
// values in the -0.5...7.4999 range.
3 0 0

1983 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1509 0 3 1506 1507 1508 0 0 1 0 1972 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

1984 14 DatagramBuffer 0 141313 14 DatagramBuffer 14 DatagramBuffer 0 0 0 1 1514 1518 1 2349 1 1515 0 0 2 3 1954 1510 1511 3 1947 1512 1513 0 0 355
/**
 * This class can be used to write a series of datagrams into a memory buffer.
 * It acts as both a datagram sink and generator; you can fill it up with
 * datagrams and then read as many datagrams from it.
 *
 * This uses the same format as DatagramInputFile and DatagramOutputFile,
 * meaning that Datagram sizes are always stored little-endian.
 */

1985 18 vector_uchar const 0 8832 18 vector_uchar const 18 vector_uchar const 0 0 1986 0 0 0 0 0 0 0 0 0 0

1986 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 1987 0 0 0 0 0 0 0 0 0 0

1987 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1988 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1519 0 0 4 1520 1521 1522 1523 0 0 1 0 1947 0 0 0 0 130
/**
 * This class can be used to read a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1989 18 DatagramOutputFile 0 75777 18 DatagramOutputFile 18 DatagramOutputFile 0 0 0 1 1524 0 1 2350 3 1525 1526 1527 0 0 1 0 1954 0 0 0 0 131
/**
 * This class can be used to write a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1990 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1991 30 DoubleBitMask< BitMaskNative > 0 141313 30 DoubleBitMask< BitMaskNative > 30 DoubleBitMask< BitMaskNative > 0 0 0 1 1529 1582 0 52 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 0 0 0 0 0 0

1992 19 DoubleBitMaskNative 0 2105345 19 DoubleBitMaskNative 19 DoubleBitMaskNative 0 0 1991 0 0 0 0 0 0 0 0 0 0

1993 36 DoubleBitMask< DoubleBitMaskNative > 0 141313 36 DoubleBitMask< DoubleBitMaskNative > 36 DoubleBitMask< DoubleBitMaskNative > 0 0 0 1 1583 1636 0 52 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 0 0 0 0 0 0

1994 17 QuadBitMaskNative 0 2105345 17 QuadBitMaskNative 17 QuadBitMaskNative 0 0 1993 0 0 0 0 0 0 0 0 0 0

1995 8 DrawMask 0 2105345 8 DrawMask 8 DrawMask 0 0 1958 0 0 0 0 0 0 0 0 0 0

1996 13 GamepadButton 0 141313 13 GamepadButton 13 GamepadButton 0 0 0 1 1668 1669 0 31 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 0 0 0 0 0 155
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to gamepad buttons.
 */

1997 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 1 1722 1723 0 52 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard keyboard keys.
 */

1998 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1728 1729 1 2351 23 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1 2374 0 0 0 0 135
/**
 * This class monitors the state of a number of individual buttons and tracks
 * whether each button is known to be down or up.
 */

1999 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 1 1764 1765 0 11 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard mouse buttons.
 */

2000 11 PointerType 0 8921089 11 PointerType 11 PointerType 0 0 0 0 0 0 0 0 0 0 5 7 unknown 7 unknown 0
0 5 mouse 5 mouse 0
1 6 finger 6 finger 0
2 6 stylus 6 stylus 0
3 6 eraser 6 eraser 0
4 0 48
/**
 * Contains the types of pointer device.
 */

2001 11 PointerData 0 141313 11 PointerData 11 PointerData 0 0 0 1 1772 1773 6 2352 2353 2354 2355 2356 2357 3 1766 1767 1768 0 0 0 0 0 124
/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */

2002 9 MouseData 0 2105345 9 MouseData 9 MouseData 0 0 2001 0 0 0 0 0 0 0 0 0 0

2003 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1774 1775 1776 1777 1778 1779 0 0 1 0 1972 0 0 0 1 2004 1495
/**
 * This class further specializes CachedTypedWritableReferenceCount to also
 * add a node_ref_count, for the purposes of counting the number of times the
 * object is referenced by a "node", presumably a PandaNode.
 *
 * This essentially combines the functionality of NodeReferenceCount and
 * CachedTypedWritableReferenceCount, so that a derivative of this object
 * actually has three counters: the standard reference count, the "cache"
 * reference count, and the "node" reference count.  Rather than multiply
 * inheriting from the two reference count classes, we inherit only from
 * CachedTypedWritableReferenceCount and simply duplicate the functionality of
 * NodeReferenceCount, to avoid all of the problems associated with multiple
 * inheritance.
 *
 * The intended design is to use this as a base class for RenderState and
 * TransformState, both of which are held by PandaNodes, and also have caches
 * which are independently maintained.  By keeping track of how many nodes
 * hold a pointer to a particular object, we can classify each object into
 * node-referenced, cache-referenced, or other, which is primarily useful for
 * PStats reporting.
 *
 * As with CachedTypedWritableReferenceCount's cache_ref() and cache_unref(),
 * the new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  In this case, however,
 * there does exist a NodePointerTo<> class to maintain the node_ref counters
 * automatically.
 */

2004 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 2003 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

2005 11 SparseArray 0 141313 11 SparseArray 11 SparseArray 0 0 0 1 1780 1834 0 53 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 0 0 0 0 0 736
/**
 * This class records a set of integers, where each integer is either present
 * or not present in the set.
 *
 * It is similar in principle and in interface to a BitArray (which can be
 * thought of as a set of integers, one integer corresponding to each
 * different bit position), but the SparseArray is implemented as a list of
 * min/max subrange lists, rather than as a bitmask.
 *
 * This makes it particularly efficient for storing sets which consist of
 * large sections of consecutively included or consecutively excluded
 * elements, with arbitrarily large integers, but particularly inefficient for
 * doing boolean operations such as & or |.
 *
 * Also, unlike BitArray, the SparseArray can store negative integers.
 */

2006 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 1052 0 3 1835 1836 1837 0 0 1 0 1929 0 0 0 0 141
/**
 * A non-template base class of ParamValue (below), which serves mainly to
 * define the placeholder for the virtual output function.
 */

2007 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1838 1052 1 2358 2 1839 1840 0 0 1 0 2006 0 0 0 0 143
/**
 * A class object for storing specifically objects of type
 * TypedReferenceCount, which is different than TypedWritableReferenceCount.
 */

2008 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1970 0 0 0 0 0 0 0 0 0 0

2009 20 ParamValue< string > 0 75777 25 ParamValue< std::string > 25 ParamValue< std::string > 0 0 0 1 1841 1052 1 2359 3 1842 1843 1844 0 0 1 0 2006 0 0 0 0 0

2010 10 Type const 0 8832 10 Type const 10 Type const 0 0 0 0 0 0 0 0 0 0 0 0 0

2011 11 ParamString 0 2105345 11 ParamString 11 ParamString 0 0 2009 0 0 0 0 0 0 0 0 0 0

2012 21 ParamValue< wstring > 0 75777 26 ParamValue< std::wstring > 26 ParamValue< std::wstring > 0 0 0 1 1845 1052 1 2360 3 1846 1847 1848 0 0 1 0 2006 0 0 0 0 0

2013 12 ParamWstring 0 2105345 12 ParamWstring 12 ParamWstring 0 0 2012 0 0 0 0 0 0 0 0 0 0

2014 24 ParamValue< LVecBase2d > 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1849 1052 1 2361 3 1850 1851 1852 0 0 1 0 2006 0 0 0 0 0

2015 14 ParamVecBase2d 0 2105345 14 ParamVecBase2d 14 ParamVecBase2d 0 0 2014 0 0 0 0 0 0 0 0 0 0

2016 24 ParamValue< LVecBase2f > 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1853 1052 1 2362 3 1854 1855 1856 0 0 1 0 2006 0 0 0 0 0

2017 14 ParamVecBase2f 0 2105345 14 ParamVecBase2f 14 ParamVecBase2f 0 0 2016 0 0 0 0 0 0 0 0 0 0

2018 24 ParamValue< LVecBase2i > 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1857 1052 1 2363 3 1858 1859 1860 0 0 1 0 2006 0 0 0 0 0

2019 14 ParamVecBase2i 0 2105345 14 ParamVecBase2i 14 ParamVecBase2i 0 0 2018 0 0 0 0 0 0 0 0 0 0

2020 24 ParamValue< LVecBase3d > 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1861 1052 1 2364 3 1862 1863 1864 0 0 1 0 2006 0 0 0 0 0

2021 14 ParamVecBase3d 0 2105345 14 ParamVecBase3d 14 ParamVecBase3d 0 0 2020 0 0 0 0 0 0 0 0 0 0

2022 24 ParamValue< LVecBase3f > 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1865 1052 1 2365 3 1866 1867 1868 0 0 1 0 2006 0 0 0 0 0

2023 14 ParamVecBase3f 0 2105345 14 ParamVecBase3f 14 ParamVecBase3f 0 0 2022 0 0 0 0 0 0 0 0 0 0

2024 24 ParamValue< LVecBase3i > 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1869 1052 1 2366 3 1870 1871 1872 0 0 1 0 2006 0 0 0 0 0

2025 14 ParamVecBase3i 0 2105345 14 ParamVecBase3i 14 ParamVecBase3i 0 0 2024 0 0 0 0 0 0 0 0 0 0

2026 24 ParamValue< LVecBase4d > 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1873 1052 1 2367 3 1874 1875 1876 0 0 1 0 2006 0 0 0 0 0

2027 14 ParamVecBase4d 0 2105345 14 ParamVecBase4d 14 ParamVecBase4d 0 0 2026 0 0 0 0 0 0 0 0 0 0

2028 24 ParamValue< LVecBase4f > 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1877 1052 1 2368 3 1878 1879 1880 0 0 1 0 2006 0 0 0 0 0

2029 14 ParamVecBase4f 0 2105345 14 ParamVecBase4f 14 ParamVecBase4f 0 0 2028 0 0 0 0 0 0 0 0 0 0

2030 24 ParamValue< LVecBase4i > 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1881 1052 1 2369 3 1882 1883 1884 0 0 1 0 2006 0 0 0 0 0

2031 14 ParamVecBase4i 0 2105345 14 ParamVecBase4i 14 ParamVecBase4i 0 0 2030 0 0 0 0 0 0 0 0 0 0

2032 23 ParamValue< LMatrix3d > 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1885 1052 1 2370 3 1886 1887 1888 0 0 1 0 2006 0 0 0 0 0

2033 13 ParamMatrix3d 0 2105345 13 ParamMatrix3d 13 ParamMatrix3d 0 0 2032 0 0 0 0 0 0 0 0 0 0

2034 23 ParamValue< LMatrix3f > 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1889 1052 1 2371 3 1890 1891 1892 0 0 1 0 2006 0 0 0 0 0

2035 13 ParamMatrix3f 0 2105345 13 ParamMatrix3f 13 ParamMatrix3f 0 0 2034 0 0 0 0 0 0 0 0 0 0

2036 23 ParamValue< LMatrix4d > 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1893 1052 1 2372 3 1894 1895 1896 0 0 1 0 2006 0 0 0 0 0

2037 13 ParamMatrix4d 0 2105345 13 ParamMatrix4d 13 ParamMatrix4d 0 0 2036 0 0 0 0 0 0 0 0 0 0

2038 23 ParamValue< LMatrix4f > 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1897 1052 1 2373 3 1898 1899 1900 0 0 1 0 2006 0 0 0 0 0

2039 13 ParamMatrix4f 0 2105345 13 ParamMatrix4f 13 ParamMatrix4f 0 0 2038 0 0 0 0 0 0 0 0 0 0

2040 13 ParamVecBase2 0 2105345 13 ParamVecBase2 13 ParamVecBase2 0 0 2017 0 0 0 0 0 0 0 0 0 0

2041 13 ParamVecBase3 0 2105345 13 ParamVecBase3 13 ParamVecBase3 0 0 2023 0 0 0 0 0 0 0 0 0 0

2042 13 ParamVecBase4 0 2105345 13 ParamVecBase4 13 ParamVecBase4 0 0 2029 0 0 0 0 0 0 0 0 0 0

2043 12 ParamMatrix3 0 2105345 12 ParamMatrix3 12 ParamMatrix3 0 0 2035 0 0 0 0 0 0 0 0 0 0

2044 12 ParamMatrix4 0 2105345 12 ParamMatrix4 12 ParamMatrix4 0 0 2039 0 0 0 0 0 0 0 0 0 0

2045 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1902 0 1 1901 0 0 1 0 1927 0 0 0 0 379
/**
 * Defined as a fix to allow creating Configurable and Writable objects.
 * Otherwise the compiler gets confused since both TypedWritable and
 * Configurable inherit from TypedObject.
 *
 * An object that has data or parameters that are set less frequently (at
 * least occasionally) than every frame.  We can cache the configuration info
 * by by using the "dirty" flag.
 */

2046 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1903 1904 0 6 1905 1906 1907 1908 1909 1910 0 0 0 0 0 812
/**
 * Manage a set of ID values from min to max inclusive.  The ID numbers that
 * are freed will be allocated (reused) in the same order.  I.e.  the oldest
 * ID numbers will be allocated.
 *
 * This implementation will use 4 bytes per id number, plus a few bytes of
 * management data.  e.g.  10,000 ID numbers will use 40KB.
 *
 * Also be advised that ID -1 and -2 are used internally by the allocator.  If
 * allocate returns IndexEnd (-1) then the allocator is out of free ID
 * numbers.
 *
 * There are other implementations that can better leverage runs of used or
 * unused IDs or use bit arrays for the IDs.  But, it takes extra work to
 * track the age of freed IDs, which is required for what we wanted.  If you
 * would like to kick around other implementation ideas, please contact
 * Schuyler.
 */

2047 10 PortalMask 0 2105345 10 PortalMask 10 PortalMask 0 0 1958 0 0 0 0 0 0 0 0 0 0

2048 37 ConstPointerToArray< ushort > const * 0 8576 37 ConstPointerToArray< ushort > const * 37 ConstPointerToArray< ushort > const * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2049 35 ConstPointerToArray< ushort > const 0 8832 35 ConstPointerToArray< ushort > const 35 ConstPointerToArray< ushort > const 0 0 1913 0 0 0 0 0 0 0 0 0 0

2050 31 ConstPointerToArray< ushort > * 0 8576 31 ConstPointerToArray< ushort > * 31 ConstPointerToArray< ushort > * 0 0 1913 0 0 0 0 0 0 0 0 0 0

2051 32 PointerToArray< ushort > const * 0 8576 32 PointerToArray< ushort > const * 32 PointerToArray< ushort > const * 0 0 2052 0 0 0 0 0 0 0 0 0 0

2052 30 PointerToArray< ushort > const 0 8832 30 PointerToArray< ushort > const 30 PointerToArray< ushort > const 0 0 1917 0 0 0 0 0 0 0 0 0 0

2053 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2054 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2055 6 ushort 0 2105344 6 ushort 6 ushort 0 0 2056 0 0 0 0 0 0 0 0 0 0

2056 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2057 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2058 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 2059 0 0 0 0 0 0 0 0 0 0

2059 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

2060 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 8576 51 PointerToBase< ReferenceCountedVector< ushort > > * 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 0 1915 0 0 0 0 0 0 0 0 0 0

2061 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< ushort > > const * 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2062 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 8832 55 PointerToBase< ReferenceCountedVector< ushort > > const 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 0 1915 0 0 0 0 0 0 0 0 0 0

2063 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1990 0 0 0 0 0 0 0 0 0 0

2064 26 PointerToArray< ushort > * 0 8576 26 PointerToArray< ushort > * 26 PointerToArray< ushort > * 0 0 1917 0 0 0 0 0 0 0 0 0 0

2065 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2066 0 0 0 0 0 0 0 0 0 0

2066 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

2067 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2068 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1918 0 0 0 0 0 0 0 0 0 0

2069 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2070 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1918 0 0 0 0 0 0 0 0 0 0

2071 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1923 0 0 0 0 0 0 0 0 0 0

2072 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 2073 0 0 0 0 0 0 0 0 0 0

2073 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1923 0 0 0 0 0 0 0 0 0 0

2074 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2075 0 0 0 0 0 0 0 0 0 0

2075 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 0

2076 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1945 0 0 0 0 0 0 0 0 0 0

2077 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 2078 0 0 0 0 0 0 0 0 0 0

2078 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1927 0 0 0 0 0 0 0 0 0 0

2079 14 vector_uchar * 0 8576 14 vector_uchar * 14 vector_uchar * 0 0 1986 0 0 0 0 0 0 0 0 0 0

2080 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1952 0 0 0 0 0 0 0 0 0 0

2081 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1929 0 0 0 0 0 0 0 0 0 0

2082 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1930 0 0 0 0 0 0 0 0 0 0

2083 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 2084 0 0 0 0 0 0 0 0 0 0

2084 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1931 0 0 0 0 0 0 0 0 0 0

2085 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1931 0 0 0 0 0 0 0 0 0 0

2086 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1933 0 0 0 0 0 0 0 0 0 0

2087 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 2088 0 0 0 0 0 0 0 0 0 0

2088 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 11 VirtualFile 0 2048 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

2090 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1937 0 0 0 0 0 0 0 0 0 0

2091 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 2092 0 0 0 0 0 0 0 0 0 0

2092 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1937 0 0 0 0 0 0 0 0 0 0

2093 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1934 0 0 0 0 0 0 0 0 0 0

2094 10 BamEnums * 0 8576 10 BamEnums * 10 BamEnums * 0 0 1938 0 0 0 0 0 0 0 0 0 0

2095 16 BamEnums const * 0 8576 16 BamEnums const * 16 BamEnums const * 0 0 2096 0 0 0 0 0 0 0 0 0 0

2096 14 BamEnums const 0 8832 14 BamEnums const 14 BamEnums const 0 0 1938 0 0 0 0 0 0 0 0 0 0

2097 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1948 0 0 0 0 0 0 0 0 0 0

2098 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1942 0 0 0 0 0 0 0 0 0 0

2099 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 2100 0 0 0 0 0 0 0 0 0 0

2100 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1945 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on the
// bamReader (via set_aux_data() and get_aux_data()) for any particular
// objects during the bam reading process.

2101 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 2102 0 0 0 0 0 0 0 0 0 0

2102 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1945 0 0 0 0 0 0 0 0 0 0

2103 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 2104 0 0 0 0 0 0 0 0 0 0

2104 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1952 0 0 0 0 0 0 0 0 0 0

2105 25 BitMask< uint16_t, 16 > * 0 8576 25 BitMask< uint16_t, 16 > * 25 BitMask< uint16_t, 16 > * 0 0 1955 0 0 0 0 0 0 0 0 0 0

2106 31 BitMask< uint16_t, 16 > const * 0 8576 31 BitMask< uint16_t, 16 > const * 31 BitMask< uint16_t, 16 > const * 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 29 BitMask< uint16_t, 16 > const 0 8832 29 BitMask< uint16_t, 16 > const 29 BitMask< uint16_t, 16 > const 0 0 1955 0 0 0 0 0 0 0 0 0 0

2108 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 2056 0 0 0 0 0 0 0 0 0 0

2109 25 BitMask< uint32_t, 32 > * 0 8576 25 BitMask< uint32_t, 32 > * 25 BitMask< uint32_t, 32 > * 0 0 1957 0 0 0 0 0 0 0 0 0 0

2110 31 BitMask< uint32_t, 32 > const * 0 8576 31 BitMask< uint32_t, 32 > const * 31 BitMask< uint32_t, 32 > const * 0 0 2111 0 0 0 0 0 0 0 0 0 0

2111 29 BitMask< uint32_t, 32 > const 0 8832 29 BitMask< uint32_t, 32 > const 29 BitMask< uint32_t, 32 > const 0 0 1957 0 0 0 0 0 0 0 0 0 0

2112 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 2113 0 0 0 0 0 0 0 0 0 0

2113 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2114 25 BitMask< uint64_t, 64 > * 0 8576 25 BitMask< uint64_t, 64 > * 25 BitMask< uint64_t, 64 > * 0 0 1959 0 0 0 0 0 0 0 0 0 0

2115 31 BitMask< uint64_t, 64 > const * 0 8576 31 BitMask< uint64_t, 64 > const * 31 BitMask< uint64_t, 64 > const * 0 0 2116 0 0 0 0 0 0 0 0 0 0

2116 29 BitMask< uint64_t, 64 > const 0 8832 29 BitMask< uint64_t, 64 > const 29 BitMask< uint64_t, 64 > const 0 0 1959 0 0 0 0 0 0 0 0 0 0

2117 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 2054 0 0 0 0 0 0 0 0 0 0

2118 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1962 0 0 0 0 0 0 0 0 0 0

2119 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 2120 0 0 0 0 0 0 0 0 0 0

2120 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1962 0 0 0 0 0 0 0 0 0 0

2121 8 WordType 0 2367488 18 BitArray::WordType 18 BitArray::WordType 1962 0 2117 0 0 0 0 0 0 0 0 0 0

2122 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 2123 0 0 0 0 0 0 0 0 0 0

2123 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 2005 0 0 0 0 0 0 0 0 0 0

2124 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 2054 0 0 0 0 0 0 0 0 0 0

2125 8 MaskType 0 2367488 18 BitArray::MaskType 18 BitArray::MaskType 1962 0 1961 0 0 0 0 0 0 0 0 0 0

2126 10 MaskType * 0 8576 20 BitArray::MaskType * 20 BitArray::MaskType * 0 0 2125 0 0 0 0 0 0 0 0 0 0

2127 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1964 0 0 0 0 0 0 0 0 0 0

2128 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 2129 0 0 0 0 0 0 0 0 0 0

2129 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1964 0 0 0 0 0 0 0 0 0 0

2130 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 2131 0 0 0 0 0 0 0 0 0 0

2131 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1968 0 0 0 0 0 0 0 0 0 0

2132 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1968 0 0 0 0 0 0 0 0 0 0

2133 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1969 0 0 0 0 0 0 0 0 0 0

2134 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1969 0 0 0 0 0 0 0 0 0 0

2136 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 2137 0 0 0 0 0 0 0 0 0 0

2137 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1971 0 0 0 0 0 0 0 0 0 0

2138 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1971 0 0 0 0 0 0 0 0 0 0

2139 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 2140 0 0 0 0 0 0 0 0 0 0

2140 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1972 0 0 0 0 0 0 0 0 0 0

2141 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 2142 0 0 0 0 0 0 0 0 0 0

2142 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1973 0 0 0 0 0 0 0 0 0 0

2143 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1973 0 0 0 0 0 0 0 0 0 0

2144 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1974 0 0 0 0 0 0 0 0 0 0

2145 28 PythonCallbackObject const * 0 8576 28 PythonCallbackObject const * 28 PythonCallbackObject const * 0 0 2146 0 0 0 0 0 0 0 0 0 0

2146 26 PythonCallbackObject const 0 8832 26 PythonCallbackObject const 26 PythonCallbackObject const 0 0 1974 0 0 0 0 0 0 0 0 0 0

2147 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1975 0 0 0 0 0 0 0 0 0 0

2148 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 2149 0 0 0 0 0 0 0 0 0 0

2149 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1975 0 0 0 0 0 0 0 0 0 0

2150 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 2151 0 0 0 0 0 0 0 0 0 0

2151 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1979 0 0 0 0 0 0 0 0 0 0

2152 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1979 0 0 0 0 0 0 0 0 0 0

2153 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 2154 0 0 0 0 0 0 0 0 0 0

2154 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

2155 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 2156 0 0 0 0 0 0 0 0 0 0

2156 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1983 0 0 0 0 0 0 0 0 0 0

2157 16 DatagramBuffer * 0 8576 16 DatagramBuffer * 16 DatagramBuffer * 0 0 1984 0 0 0 0 0 0 0 0 0 0

2158 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1988 0 0 0 0 0 0 0 0 0 0

2159 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 2160 0 0 0 0 0 0 0 0 0 0

2160 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2162 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 2163 0 0 0 0 0 0 0 0 0 0

2163 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2164 20 DatagramOutputFile * 0 8576 20 DatagramOutputFile * 20 DatagramOutputFile * 0 0 1989 0 0 0 0 0 0 0 0 0 0

2165 32 DoubleBitMask< BitMaskNative > * 0 8576 32 DoubleBitMask< BitMaskNative > * 32 DoubleBitMask< BitMaskNative > * 0 0 1991 0 0 0 0 0 0 0 0 0 0

2166 38 DoubleBitMask< BitMaskNative > const * 0 8576 38 DoubleBitMask< BitMaskNative > const * 38 DoubleBitMask< BitMaskNative > const * 0 0 2167 0 0 0 0 0 0 0 0 0 0

2167 36 DoubleBitMask< BitMaskNative > const 0 8832 36 DoubleBitMask< BitMaskNative > const 36 DoubleBitMask< BitMaskNative > const 0 0 1991 0 0 0 0 0 0 0 0 0 0

2168 38 DoubleBitMask< DoubleBitMaskNative > * 0 8576 38 DoubleBitMask< DoubleBitMaskNative > * 38 DoubleBitMask< DoubleBitMaskNative > * 0 0 1993 0 0 0 0 0 0 0 0 0 0

2169 44 DoubleBitMask< DoubleBitMaskNative > const * 0 8576 44 DoubleBitMask< DoubleBitMaskNative > const * 44 DoubleBitMask< DoubleBitMaskNative > const * 0 0 2170 0 0 0 0 0 0 0 0 0 0

2170 42 DoubleBitMask< DoubleBitMaskNative > const 0 8832 42 DoubleBitMask< DoubleBitMaskNative > const 42 DoubleBitMask< DoubleBitMaskNative > const 0 0 1993 0 0 0 0 0 0 0 0 0 0

2171 15 GamepadButton * 0 8576 15 GamepadButton * 15 GamepadButton * 0 0 1996 0 0 0 0 0 0 0 0 0 0

2172 21 GamepadButton const * 0 8576 21 GamepadButton const * 21 GamepadButton const * 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 19 GamepadButton const 0 8832 19 GamepadButton const 19 GamepadButton const 0 0 1996 0 0 0 0 0 0 0 0 0 0

2174 16 KeyboardButton * 0 8576 16 KeyboardButton * 16 KeyboardButton * 0 0 1997 0 0 0 0 0 0 0 0 0 0

2175 22 KeyboardButton const * 0 8576 22 KeyboardButton const * 22 KeyboardButton const * 0 0 2176 0 0 0 0 0 0 0 0 0 0

2176 20 KeyboardButton const 0 8832 20 KeyboardButton const 20 KeyboardButton const 0 0 1997 0 0 0 0 0 0 0 0 0 0

2177 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1998 0 0 0 0 0 0 0 0 0 0

2178 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2179 0 0 0 0 0 0 0 0 0 0

2179 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1998 0 0 0 0 0 0 0 0 0 0

2180 13 MouseButton * 0 8576 13 MouseButton * 13 MouseButton * 0 0 1999 0 0 0 0 0 0 0 0 0 0

2181 19 MouseButton const * 0 8576 19 MouseButton const * 19 MouseButton const * 0 0 2182 0 0 0 0 0 0 0 0 0 0

2182 17 MouseButton const 0 8832 17 MouseButton const 17 MouseButton const 0 0 1999 0 0 0 0 0 0 0 0 0 0

2183 13 PointerData * 0 8576 13 PointerData * 13 PointerData * 0 0 2001 0 0 0 0 0 0 0 0 0 0

2184 19 PointerData const * 0 8576 19 PointerData const * 19 PointerData const * 0 0 2185 0 0 0 0 0 0 0 0 0 0

2185 17 PointerData const 0 8832 17 PointerData const 17 PointerData const 0 0 2001 0 0 0 0 0 0 0 0 0 0

2186 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2187 0 0 0 0 0 0 0 0 0 0

2187 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 2003 0 0 0 0 0 0 0 0 0 0

2188 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 2005 0 0 0 0 0 0 0 0 0 0

2189 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2190 0 0 0 0 0 0 0 0 0 0

2190 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 2006 0 0 0 0 0 0 0 0 0 0

2191 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2192 0 0 0 0 0 0 0 0 0 0

2192 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1970 0 0 0 0 0 0 0 0 0 0

2193 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 2007 0 0 0 0 0 0 0 0 0 0

2194 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2195 0 0 0 0 0 0 0 0 0 0

2195 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 2007 0 0 0 0 0 0 0 0 0 0

2196 22 ParamValue< string > * 0 8576 27 ParamValue< std::string > * 27 ParamValue< std::string > * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2197 28 ParamValue< string > const * 0 8576 33 ParamValue< std::string > const * 33 ParamValue< std::string > const * 0 0 2198 0 0 0 0 0 0 0 0 0 0

2198 26 ParamValue< string > const 0 8832 31 ParamValue< std::string > const 31 ParamValue< std::string > const 0 0 2009 0 0 0 0 0 0 0 0 0 0

2199 23 ParamValue< wstring > * 0 8576 28 ParamValue< std::wstring > * 28 ParamValue< std::wstring > * 0 0 2012 0 0 0 0 0 0 0 0 0 0

2200 29 ParamValue< wstring > const * 0 8576 34 ParamValue< std::wstring > const * 34 ParamValue< std::wstring > const * 0 0 2201 0 0 0 0 0 0 0 0 0 0

2201 27 ParamValue< wstring > const 0 8832 32 ParamValue< std::wstring > const 32 ParamValue< std::wstring > const 0 0 2012 0 0 0 0 0 0 0 0 0 0

2202 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2203 0 0 0 0 0 0 0 0 0 0

2203 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2204 0 0 0 0 0 0 0 0 0 0

2204 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2205 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 2014 0 0 0 0 0 0 0 0 0 0

2206 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2207 0 0 0 0 0 0 0 0 0 0

2207 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 2014 0 0 0 0 0 0 0 0 0 0

2208 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2209 0 0 0 0 0 0 0 0 0 0

2209 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2210 0 0 0 0 0 0 0 0 0 0

2210 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2211 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 2016 0 0 0 0 0 0 0 0 0 0

2212 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2213 0 0 0 0 0 0 0 0 0 0

2213 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 2016 0 0 0 0 0 0 0 0 0 0

2214 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2215 0 0 0 0 0 0 0 0 0 0

2215 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2216 0 0 0 0 0 0 0 0 0 0

2216 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2217 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2218 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2219 0 0 0 0 0 0 0 0 0 0

2219 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 2018 0 0 0 0 0 0 0 0 0 0

2220 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2221 0 0 0 0 0 0 0 0 0 0

2221 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2222 0 0 0 0 0 0 0 0 0 0

2222 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2223 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 2020 0 0 0 0 0 0 0 0 0 0

2224 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2225 0 0 0 0 0 0 0 0 0 0

2225 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 2020 0 0 0 0 0 0 0 0 0 0

2226 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2227 0 0 0 0 0 0 0 0 0 0

2227 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2228 0 0 0 0 0 0 0 0 0 0

2228 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2229 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 2022 0 0 0 0 0 0 0 0 0 0

2230 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2231 0 0 0 0 0 0 0 0 0 0

2231 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 2022 0 0 0 0 0 0 0 0 0 0

2232 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2233 0 0 0 0 0 0 0 0 0 0

2233 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2234 0 0 0 0 0 0 0 0 0 0

2234 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2235 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 2024 0 0 0 0 0 0 0 0 0 0

2236 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2237 0 0 0 0 0 0 0 0 0 0

2237 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 2024 0 0 0 0 0 0 0 0 0 0

2238 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2239 0 0 0 0 0 0 0 0 0 0

2239 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2240 0 0 0 0 0 0 0 0 0 0

2240 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2241 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 2026 0 0 0 0 0 0 0 0 0 0

2242 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2243 0 0 0 0 0 0 0 0 0 0

2243 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 2026 0 0 0 0 0 0 0 0 0 0

2244 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2245 0 0 0 0 0 0 0 0 0 0

2245 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2246 0 0 0 0 0 0 0 0 0 0

2246 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2247 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 2028 0 0 0 0 0 0 0 0 0 0

2248 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2249 0 0 0 0 0 0 0 0 0 0

2249 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 2028 0 0 0 0 0 0 0 0 0 0

2250 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2251 0 0 0 0 0 0 0 0 0 0

2251 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2252 0 0 0 0 0 0 0 0 0 0

2252 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2253 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 2030 0 0 0 0 0 0 0 0 0 0

2254 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2255 0 0 0 0 0 0 0 0 0 0

2255 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 2030 0 0 0 0 0 0 0 0 0 0

2256 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2257 0 0 0 0 0 0 0 0 0 0

2257 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2258 0 0 0 0 0 0 0 0 0 0

2258 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2259 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2260 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2261 0 0 0 0 0 0 0 0 0 0

2261 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 2032 0 0 0 0 0 0 0 0 0 0

2262 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2263 0 0 0 0 0 0 0 0 0 0

2263 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2264 0 0 0 0 0 0 0 0 0 0

2264 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2265 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 2034 0 0 0 0 0 0 0 0 0 0

2266 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2267 0 0 0 0 0 0 0 0 0 0

2267 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 2034 0 0 0 0 0 0 0 0 0 0

2268 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2269 0 0 0 0 0 0 0 0 0 0

2269 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2270 0 0 0 0 0 0 0 0 0 0

2270 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2271 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 2036 0 0 0 0 0 0 0 0 0 0

2272 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2273 0 0 0 0 0 0 0 0 0 0

2273 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 2036 0 0 0 0 0 0 0 0 0 0

2274 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2275 0 0 0 0 0 0 0 0 0 0

2275 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2276 0 0 0 0 0 0 0 0 0 0

2276 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2277 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 2038 0 0 0 0 0 0 0 0 0 0

2278 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2279 0 0 0 0 0 0 0 0 0 0

2279 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 2038 0 0 0 0 0 0 0 0 0 0

2280 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2281 0 0 0 0 0 0 0 0 0 0

2281 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 2046 0 0 0 0 0 0 0 0 0 0

2282 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 2046 0 0 0 0 0 0 0 0 0 0

2283 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2284 0 0 0 0 0 0 0 0 0 0

2284 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2285 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2286 0 0 0 0 0 0 0 0 0 0

2286 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2287 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2288 0 0 0 0 0 0 0 0 0 0

2288 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2289 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2290 0 0 0 0 0 0 0 0 0 0

2290 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 0

0
83
2291 9 play_rate 0 6 1919 1006 1005 0 0 0 0 0 0 24 AnimInterface::play_rate 0

2292 10 frame_rate 0 2 1919 1007 0 0 0 0 0 0 0 25 AnimInterface::frame_rate 0

2293 10 num_frames 0 2 1920 1008 0 0 0 0 0 0 0 25 AnimInterface::num_frames 0

2294 5 frame 0 2 1920 1009 0 0 0 0 0 0 0 20 AnimInterface::frame 0

2295 10 next_frame 0 2 1920 1010 0 0 0 0 0 0 0 25 AnimInterface::next_frame 0

2296 4 frac 0 2 1919 1011 0 0 0 0 0 0 0 19 AnimInterface::frac 0

2297 10 full_frame 0 2 1920 1012 0 0 0 0 0 0 0 25 AnimInterface::full_frame 0

2298 11 full_fframe 0 2 1919 1013 0 0 0 0 0 0 0 26 AnimInterface::full_fframe 0

2299 7 playing 0 2 1921 1014 0 0 0 0 0 0 0 22 AnimInterface::playing 0

2300 3 seq 0 2 1924 1035 0 0 0 0 0 0 0 14 UpdateSeq::seq 0

2301 15 source_pathname 0 2 1933 1060 0 0 0 0 0 0 0 31 BamCacheRecord::source_pathname 0

2302 14 cache_filename 0 2 1933 1061 0 0 0 0 0 0 0 30 BamCacheRecord::cache_filename 0

2303 16 source_timestamp 0 2 1935 1062 0 0 0 0 0 0 0 32 BamCacheRecord::source_timestamp 0

2304 13 recorded_time 0 2 1935 1063 0 0 0 0 0 0 0 29 BamCacheRecord::recorded_time 0

2305 4 data 0 30 1936 1071 1073 1069 1070 0 0 0 0 20 BamCacheRecord::data 0

2306 6 active 0 6 1921 1080 1079 0 0 0 0 0 0 16 BamCache::active 0

2307 12 cache_models 0 6 1921 1082 1081 0 0 0 0 0 0 22 BamCache::cache_models 0

2308 14 cache_textures 0 6 1921 1084 1083 0 0 0 0 0 0 24 BamCache::cache_textures 0

2309 25 cache_compressed_textures 0 6 1921 1086 1085 0 0 0 0 0 0 35 BamCache::cache_compressed_textures 0

2310 22 cache_compiled_shaders 0 6 1921 1088 1087 0 0 0 0 0 0 32 BamCache::cache_compiled_shaders 0

2311 4 root 0 6 1934 1090 1089 0 0 0 0 0 0 14 BamCache::root 0

2312 10 flush_time 0 6 1920 1092 1091 0 0 0 0 0 0 20 BamCache::flush_time 0

2313 16 cache_max_kbytes 0 6 1920 1094 1093 0 0 0 0 0 0 26 BamCache::cache_max_kbytes 0

2314 9 read_only 0 6 1921 1096 1095 0 0 0 0 0 0 19 BamCache::read_only 0

2315 5 flags 0 6 1920 1109 1108 0 0 0 0 0 0 20 LoaderOptions::flags 0

2316 13 texture_flags 0 6 1920 1111 1110 0 0 0 0 0 0 28 LoaderOptions::texture_flags 0

2317 17 texture_num_views 0 6 1920 1113 1112 0 0 0 0 0 0 32 LoaderOptions::texture_num_views 0

2318 18 auto_texture_scale 0 6 1922 1115 1114 0 0 0 0 0 0 33 LoaderOptions::auto_texture_scale 0

2319 6 source 0 6 1946 1121 1120 0 0 0 0 0 0 17 BamReader::source 0

2320 8 filename 0 2 1933 1125 0 0 0 0 0 0 0 19 BamReader::filename 0

2321 14 loader_options 0 6 1948 1126 1127 0 0 0 0 0 0 25 BamReader::loader_options 0

2322 12 file_version 0 2 1949 1138 0 0 0 0 0 0 0 23 BamReader::file_version 0

2323 11 file_endian 0 2 1939 1134 0 0 0 0 0 0 0 22 BamReader::file_endian 0

2324 20 file_stdfloat_double 0 2 1921 1135 0 0 0 0 0 0 0 31 BamReader::file_stdfloat_double 0

2325 6 target 0 6 1953 1143 1142 0 0 0 0 0 0 17 BamWriter::target 0

2326 8 filename 0 2 1933 1145 0 0 0 0 0 0 0 19 BamWriter::filename 0

2327 11 file_endian 0 2 1939 1152 0 0 0 0 0 0 0 22 BamWriter::file_endian 0

2328 20 file_stdfloat_double 0 2 1921 1153 0 0 0 0 0 0 0 31 BamWriter::file_stdfloat_double 0

2329 17 file_texture_mode 0 2 1941 1154 0 0 0 0 0 0 0 28 BamWriter::file_texture_mode 0

2330 9 root_node 0 6 1936 1156 1157 0 0 0 0 0 0 20 BamWriter::root_node 0

2331 5 index 0 2 1920 1424 0 0 0 0 0 0 0 19 ButtonHandle::index 0

2332 4 name 0 2 1965 1419 0 0 0 0 0 0 0 18 ButtonHandle::name 0

2333 16 ascii_equivalent 0 10 1967 1421 0 1420 0 0 0 0 0 30 ButtonHandle::ascii_equivalent 0

2334 5 alias 0 2 1964 1422 0 0 0 0 0 0 0 19 ButtonHandle::alias 0

2335 15 cache_ref_count 0 2 1920 1451 0 0 0 0 0 0 0 50 CachedTypedWritableReferenceCount::cache_ref_count 0

2336 8 function 0 6 1949 1465 1464 0 0 0 0 0 0 30 PythonCallbackObject::function 0

2337 2 tv 0 6 1976 1470 1471 0 0 0 0 0 0 11 TimeVal::tv 0

2338 4 mode 0 6 1980 1475 1474 0 0 0 0 0 0 17 ClockObject::mode 0

2339 10 frame_time 0 6 1919 1476 1481 0 0 0 0 0 0 23 ClockObject::frame_time 0

2340 9 real_time 0 6 1919 1477 1480 0 0 0 0 0 0 22 ClockObject::real_time 0

2341 9 long_time 0 2 1919 1478 0 0 0 0 0 0 0 22 ClockObject::long_time 0

2342 11 frame_count 0 6 1920 1483 1482 0 0 0 0 0 0 24 ClockObject::frame_count 0

2343 2 dt 0 6 1919 1485 1486 0 0 0 0 0 0 15 ClockObject::dt 0

2344 6 max_dt 0 6 1919 1488 1489 0 0 0 0 0 0 19 ClockObject::max_dt 0

2345 14 degrade_factor 0 6 1919 1490 1491 0 0 0 0 0 0 27 ClockObject::degrade_factor 0

2346 27 average_frame_rate_interval 0 6 1919 1493 1492 0 0 0 0 0 0 40 ClockObject::average_frame_rate_interval 0

2347 18 average_frame_rate 0 2 1919 1494 0 0 0 0 0 0 0 31 ClockObject::average_frame_rate 0

2348 18 max_frame_duration 0 2 1919 1495 0 0 0 0 0 0 0 31 ClockObject::max_frame_duration 0

2349 4 data 0 6 1985 1516 1517 0 0 0 0 0 0 20 DatagramBuffer::data 0

2350 6 stream 0 2 1990 1528 0 0 0 0 0 0 0 26 DatagramOutputFile::stream 0

2351 7 buttons 0 66 1964 1744 0 0 0 0 1743 0 0 24 ModifierButtons::buttons 0

2352 1 x 0 2 1919 1766 0 0 0 0 0 0 0 14 PointerData::x 0

2353 1 y 0 2 1919 1767 0 0 0 0 0 0 0 14 PointerData::y 0

2354 4 type 0 2 2000 1769 0 0 0 0 0 0 0 17 PointerData::type 0

2355 2 id 0 2 1920 1770 0 0 0 0 0 0 0 15 PointerData::id 0

2356 9 in_window 0 2 1921 1768 0 0 0 0 0 0 0 22 PointerData::in_window 0

2357 8 pressure 0 2 1919 1771 0 0 0 0 0 0 0 21 PointerData::pressure 0

2358 5 value 0 2 2008 1839 0 0 0 0 0 0 0 25 ParamTypedRefCount::value 0

2359 5 value 0 6 2010 1843 1842 0 0 0 0 0 0 27 ParamValue< string >::value 0

2360 5 value 0 6 2010 1847 1846 0 0 0 0 0 0 28 ParamValue< wstring >::value 0

2361 5 value 0 6 2010 1851 1850 0 0 0 0 0 0 31 ParamValue< LVecBase2d >::value 0

2362 5 value 0 6 2010 1855 1854 0 0 0 0 0 0 31 ParamValue< LVecBase2f >::value 0

2363 5 value 0 6 2010 1859 1858 0 0 0 0 0 0 31 ParamValue< LVecBase2i >::value 0

2364 5 value 0 6 2010 1863 1862 0 0 0 0 0 0 31 ParamValue< LVecBase3d >::value 0

2365 5 value 0 6 2010 1867 1866 0 0 0 0 0 0 31 ParamValue< LVecBase3f >::value 0

2366 5 value 0 6 2010 1871 1870 0 0 0 0 0 0 31 ParamValue< LVecBase3i >::value 0

2367 5 value 0 6 2010 1875 1874 0 0 0 0 0 0 31 ParamValue< LVecBase4d >::value 0

2368 5 value 0 6 2010 1879 1878 0 0 0 0 0 0 31 ParamValue< LVecBase4f >::value 0

2369 5 value 0 6 2010 1883 1882 0 0 0 0 0 0 31 ParamValue< LVecBase4i >::value 0

2370 5 value 0 6 2010 1887 1886 0 0 0 0 0 0 30 ParamValue< LMatrix3d >::value 0

2371 5 value 0 6 2010 1891 1890 0 0 0 0 0 0 30 ParamValue< LMatrix3f >::value 0

2372 5 value 0 6 2010 1895 1894 0 0 0 0 0 0 30 ParamValue< LMatrix4d >::value 0

2373 5 value 0 6 2010 1899 1898 0 0 0 0 0 0 30 ParamValue< LMatrix4f >::value 0

1
2374 11 get_buttons 0 1743 1744 28 ModifierButtons::get_buttons 0

